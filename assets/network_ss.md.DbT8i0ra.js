import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.BufN96s7.js";const E=JSON.parse('{"title":"ss 命令介绍","description":"","frontmatter":{},"headers":[],"relativePath":"network/ss.md","filePath":"network/ss.md","lastUpdated":1721554286000}'),t={name:"network/ss.md"},p=n(`<h1 id="ss-命令介绍" tabindex="-1">ss 命令介绍 <a class="header-anchor" href="#ss-命令介绍" aria-label="Permalink to &quot;ss 命令介绍&quot;">​</a></h1><p>ss 替代传统的netstat, 通过netlink API获取网络连接socket(udp, tcp)的信息, 性能好且查询的结果丰富.<br> 以下信息基于 5.14内核</p><h2 id="socket统计概要" tabindex="-1">socket统计概要 <a class="header-anchor" href="#socket统计概要" aria-label="Permalink to &quot;socket统计概要&quot;">​</a></h2><p>运行<code>ss -s</code>获取当前系统中运行的Socket概要信息, 对系统有一个初步的了解. 从<code>/proc/net/sockstat</code> 和 <code>/proc/net/sockstat6</code> 采集的原始信息.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ss -s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Total:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 173</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TCP:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (estab </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">8,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> closed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> orphaned</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timewait</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Transport</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     IP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        IPv6</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RAW</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UDP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TCP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       12</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INET</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      15</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        10</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FRAG</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         0</span></span></code></pre></div><p>如上图所示:<br> 系统当前总的socket为 173<br> TCP 总共 <code>15</code>个, 等于 <code>倒数第三行的 total + closed </code><br><code>closed = orphaned + timewait + others</code> , 这块的others是指已经不在hash桶里的,但仍被进程占用的socket, 比如<code>刚创建的socket, 没有bind或者connect的</code>, 或者<code>处于FIN-WAIT-2状态keeptimer超时后的socket</code>.</p><p>处于<code>FIN-WAIT-1</code>状态的socket会算到 <code>orphaned</code><br> 处于<code>FIN-WAIT-2</code>状态和<code>TIME-WAIT</code>的socket会算到 <code>timewait</code></p><p>如下对每一种TCP状态的socket统计, 上面提到的others无法统计到</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ss -H -ta | awk &#39;{print $1}&#39; | sort | uniq -c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ESTAB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FIN-WAIT-2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LISTEN</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TIME-WAIT</span></span></code></pre></div><h2 id="基本操作" tabindex="-1">基本操作 <a class="header-anchor" href="#基本操作" aria-label="Permalink to &quot;基本操作&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ss -s          #显示各socket的统计信息</span></span>
<span class="line"><span>ss -ntlp       #-n 不解析, -t 显示tcp连接  -l 显示监听socket, -p 显示使用的进程名</span></span>
<span class="line"><span>ss -t -a       #查看所有tcp连接, 不带-a则指显示 Established 连接</span></span>
<span class="line"><span>ss -to         #查看tcp的keepalive信息</span></span>
<span class="line"><span>ss -ti         #查看tcp的内部信息,比如拥塞算法,rto,rtt,cwnd,ssthresh等</span></span>
<span class="line"><span>ss -tm         #查看tcp的内存使用信息, 比如收发缓冲区的大小</span></span></code></pre></div><h2 id="高级过滤用法" tabindex="-1">高级过滤用法 <a class="header-anchor" href="#高级过滤用法" aria-label="Permalink to &quot;高级过滤用法&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ss  -A raw,packet_raw  -a -p                      #查看raw socket的信息</span></span>
<span class="line"><span>ss -tan  state listening                           #显示处于listening状态的连接</span></span>
<span class="line"><span>ss -tan  state established                         #显示处于established状态的连接</span></span>
<span class="line"><span>ss -tan  state listening  &#39;( sport == 22 )&#39;        #显示处于listening状态且源端口为22的连接</span></span>
<span class="line"><span>ss -tan &#39;( sport == 22 )&#39;                          #显示源端口为22的连接</span></span>
<span class="line"><span>ss -tan &#39;( sport != 22 )&#39;                          #显示源端口不为22的连接</span></span>
<span class="line"><span>ss -tan &#39;( sport == 22 || dport == 22 )&#39;           #显示源端口为22或者目标端口为22的连接</span></span>
<span class="line"><span>ss -tan &#39;( dst 10.211.55.2 &amp;&amp; dport == 58181 )&#39;    #显示目标ip为10.211.55.2且目标端口为58181的连接</span></span>
<span class="line"><span>ss -tan &#39;( src 127.0.0.1 )&#39;                        #显示源ip为 127.0.0.1的连接</span></span>
<span class="line"><span>ss -tan &#39;( ! dst 10.211.55.2 &amp;&amp; dport != 58181 )&#39;  #显示目标ip不是10.211.55.2且目标端口不是58181的连接</span></span>
<span class="line"><span>ss -tan &quot;src == *:22&quot;                              #显示源端口是22的所有连接</span></span></code></pre></div><p>state后面支持的TCP状态如下:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sstate_namel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		&quot;UNKNOWN&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_ESTABLISHED] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;established&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_SYN_SENT] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;syn-sent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_SYN_RECV] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;syn-recv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_FIN_WAIT1] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fin-wait-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_FIN_WAIT2] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fin-wait-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_TIME_WAIT] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;time-wait&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_CLOSE] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;unconnected&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_CLOSE_WAIT] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;close-wait&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_LAST_ACK] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;last-ack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_LISTEN] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;listening&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_CLOSING] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;closing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	};</span></span></code></pre></div><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://man7.org/linux/man-pages/man8/ss.8.html" target="_blank" rel="noreferrer">https://man7.org/linux/man-pages/man8/ss.8.html</a><br><a href="https://github.com/shemminger/iproute2/blob/main/misc/ssfilter.y" target="_blank" rel="noreferrer">https://github.com/shemminger/iproute2/blob/main/misc/ssfilter.y</a></p>`,17),h=[p];function l(e,k,d,r,o,c){return a(),i("div",null,h)}const g=s(t,[["render",l]]);export{E as __pageData,g as default};
