import{_ as s,c as i,o as t,a2 as a}from"./chunks/framework.YBtj1D-X.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"network/tcp.md","filePath":"network/tcp.md","lastUpdated":1737294813000}'),e={name:"network/tcp.md"},n=a(`<p>记录自己对TCP协议栈的学习心得</p><h2 id="tcp处理与内核参数" tabindex="-1">TCP处理与内核参数 <a class="header-anchor" href="#tcp处理与内核参数" aria-label="Permalink to &quot;TCP处理与内核参数&quot;">​</a></h2><ol><li>client发送<code>syn</code>报文后,tcp状态为 syn-sent. 如果对端没有返回syn+ack, 则尝试发送<code>net.ipv4.tcp_syn_retries</code>次. 每次间隔2,4,8s....</li><li>server收到<code>syn</code>后,状态变为 syn-recv, 放到半队列里,同时返回syn-ack. 这个队列的大小为 net.ipv4.tcp_max_syn_backlog. 是个全局的参数. 如果这个半队列满,则直接丢弃syc.</li><li>当server收到ack后, 会检查全队列是否能放下. 这个大小为 min(backlog, net.core.somaxconn). 如果队列未满,则放进去, 状态变为 ESTABLISHED. 系统调用accept就是从这个全队列取已经三次握手成功的socket<br> 如果全队列满:<br> 当net.ipv4.tcp_abort_on_overflow为0, 则丢弃ack, 假定自己没有收到ack, 所以重发syn+ack, 重试次数为net.ipv4.tcp_synack_retries.<br> 当net.ipv4.tcp_abort_on_overflow为1, 则收到ack后直接发rst终止连接</li><li>先close socket的会进入time-wait状态, 这个过2MSL会自动消失.<br> client和server同时打开时间戳时: <ul><li>net.ipv4.tcp_tw_recycle = 1, 可快速回收进入time-wait状态的socket. 对客户端和服务端都有效. 但在nat网络下可能会将正常的syn报文丢弃</li><li>net.ipv4.tcp_tw_reuse = 1, 可快速重用time-wait的socket. 只对客户端有效.作为客户端因为有端口65535问题，TIME_OUT过多直接影响处理能力，打开tw_reuse 即可解决</li><li>tcp_max_tw_buckets设置time-wait的上限, 一旦超过OS会立即清除.</li></ul></li><li>当收到fin后, 回复ack后 socket进入close-wait状态. 此时需要程序运行close才会下发fin报文. 完成4次关闭</li><li>假设发送fin后, 没有收到对端的fin, 则socket进入 fin-wait-2状态. 如果一直没有收到对端的fin, 则经过<code>net.ipv4.tcp_fin_timeout</code>秒后自动消失</li></ol><h2 id="tcp半队列和全队列监控" tabindex="-1">TCP半队列和全队列监控 <a class="header-anchor" href="#tcp半队列和全队列监控" aria-label="Permalink to &quot;TCP半队列和全队列监控&quot;">​</a></h2><p>半队列如果丢包, 可检查如下值是否增长:<br><code>netstat -s</code> 观察<code>SYNs to LISTEN sockets dropped</code><br><code>nstat</code> 观察 <code>ListenDrops</code></p><p>全队列如果丢包, 可检查如下值是否增长:<br><code>netstat -s</code> 观察<code>times the listen queue of a socket overflowed</code><br><code>nstat</code> 观察 <code>TcpExtListenOverflows</code><br> 两个工具的信息都取自<code>/proc/net/netstat</code></p><h2 id="tcp丢包一些排查方法" tabindex="-1">TCP丢包一些排查方法 <a class="header-anchor" href="#tcp丢包一些排查方法" aria-label="Permalink to &quot;TCP丢包一些排查方法&quot;">​</a></h2><p>使用perf 跟踪 skb:kfree_skb, 然后看堆栈<br><a href="https://jvns.ca/blog/2017/09/05/finding-out-where-packets-are-being-dropped/" target="_blank" rel="noreferrer">https://jvns.ca/blog/2017/09/05/finding-out-where-packets-are-being-dropped/</a></p><h2 id="net-ipv4-tcp-tw-recycle-1" tabindex="-1">net.ipv4.tcp_tw_recycle = 1 <a class="header-anchor" href="#net-ipv4-tcp-tw-recycle-1" aria-label="Permalink to &quot;net.ipv4.tcp_tw_recycle = 1&quot;">​</a></h2><p>在nat场景下会产生丢包. 高内核已经删除这个参数<br><a href="https://github.com/torvalds/linux/commit/4396e46187ca5070219b81773c4e65088dac50cc" target="_blank" rel="noreferrer">https://github.com/torvalds/linux/commit/4396e46187ca5070219b81773c4e65088dac50cc</a><br> 对应的计数项为<code>TcpExtPAWSPassive</code></p><h2 id="tcp部分参数使用介绍" tabindex="-1">tcp部分参数使用介绍 <a class="header-anchor" href="#tcp部分参数使用介绍" aria-label="Permalink to &quot;tcp部分参数使用介绍&quot;">​</a></h2><p>tcp keepalive默认一些参数如下, 应用程序里也可以修改. enable该特性必须是在程序里设置. OS没有全部的打开该功能的参数</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sysctl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keep</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net.ipv4.tcp_keepalive_intvl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 75</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net.ipv4.tcp_keepalive_probes</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net.ipv4.tcp_keepalive_time</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7200</span></span></code></pre></div><p>Nagle算法主要在数据包很小很小时,先不发,等累积到一定程度再发出去.默认是打开的.应用程序可以通过TCP_NODELAY 选项来关闭这个算法, OS没有全局的关闭该算法的参数</p><p>TCP的延迟确认的策略：<br> 当有响应数据要发送时，ACK 会随着响应数据一起立刻发送给对方<br> 当没有响应数据要发送时，ACK 将会延迟一段时间，以等待是否有响应数据可以一起发送<br> 如果在延迟等待发送 ACK 期间，对方的第二个数据报文又到达了，这时就会立刻发送 ACK</p><p>最大延迟确认时间是 200 ms （1000/5）<br> 最短延迟确认时间是 40 ms （1000/25）</p><p>tcp_retries2 指定超时重传的次数, 默认是15次, 大概是16分钟左右</p><p>比如已经建立的TCP连接, 因某些原因(防火墙,中间网络中断)导致发往另一方的包, 一直没有收到回包. 这个RTO超时后开始重传.<br> RTO最小是 200ms, 最大是 2分钟. 每次发起重传的间隔为 200ms, 400ms, 800ms 逐渐递增.</p><h2 id="tcp-reset" tabindex="-1">TCP reset <a class="header-anchor" href="#tcp-reset" aria-label="Permalink to &quot;TCP reset&quot;">​</a></h2><p>reset分为主动reset和被动reset两种, 比如进程调用close关闭连接且仍有数据为读时会触发主动reset, 对端建立连接但本端 却没有对应的监听socket时会触发被动reset. 从代码上分析,主动reset的数据包里会带rst,ack两个标志位, 但<code>ack number</code>为0. <code>seq number</code>为下一个要发送的seq.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tcp_send_active_reset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gfp_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> priority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sk_buff </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">skb;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	TCP_INC_STATS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sock_net</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sk), TCP_MIB_OUTRSTS);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* NOTE: No TCP options attached and we never retransmit this. */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	skb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alloc_skb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MAX_TCP_HEADER, priority);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">skb) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		NET_INC_STATS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sock_net</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sk), LINUX_MIB_TCPABORTFAILED);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* Reserve space for headers and prepare control bits. */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	skb_reserve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(skb, MAX_TCP_HEADER);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	tcp_init_nondata_skb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(skb, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcp_acceptable_seq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sk),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			     TCPHDR_ACK </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TCPHDR_RST);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	tcp_mstamp_refresh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcp_sk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sk));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* Send it off. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcp_transmit_skb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sk, skb, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, priority))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		NET_INC_STATS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sock_net</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sk), LINUX_MIB_TCPABORTFAILED);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* skb of trace_tcp_send_reset() keeps the skb that caused RST,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * skb here is different to the troublesome skb, so use NULL</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	trace_tcp_send_reset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sk, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>被动reset属于收到非法包后发reset:<br> 如果收到的包flag有ack,则<code>seq number</code>有值， <code>ack number</code>为0 flag只有rst<br> 如果收到的包flag没有ack,则<code>seq number</code>为0， <code>ack number</code>有值 flag rst &amp; ack<br> 在被动reset场景下是通过一个全局socket发送具体的reset包, 这个包的ip层的id为0.</p><p>trace_tcp_send_reset这个tracepoint里, 如果skb为null, 则代表主动reset, 如果非null, 则代表导致发送reset的skb(接收到的). 如果没有对应的sk, 是无法用这个tracepoint跟踪 到的.</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt" target="_blank" rel="noreferrer">https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt</a><br><a href="https://www.jianshu.com/p/0d6243402987" target="_blank" rel="noreferrer">https://www.jianshu.com/p/0d6243402987</a><br><a href="https://www.codedump.info/post/20190227-tcp/" target="_blank" rel="noreferrer">https://www.codedump.info/post/20190227-tcp/</a><br><a href="https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data" target="_blank" rel="noreferrer">https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data</a><br><a href="https://blog.packagecloud.io/eng/2017/02/06/monitoring-tuning-linux-networking-stack-sending-data" target="_blank" rel="noreferrer">https://blog.packagecloud.io/eng/2017/02/06/monitoring-tuning-linux-networking-stack-sending-data</a><br><a href="https://lwn.net/Articles/362339/" target="_blank" rel="noreferrer">https://lwn.net/Articles/362339/</a><br><a href="https://access.redhat.com/solutions/30453" target="_blank" rel="noreferrer">https://access.redhat.com/solutions/30453</a><br><a href="https://loicpefferkorn.net/2016/03/linux-network-metrics-why-you-should-use-nstat-instead-of-netstat/" target="_blank" rel="noreferrer">https://loicpefferkorn.net/2016/03/linux-network-metrics-why-you-should-use-nstat-instead-of-netstat/</a><br><a href="https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt" target="_blank" rel="noreferrer">https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt</a><br><a href="https://perthcharles.github.io/2015/09/07/wiki-tcp-retries/" target="_blank" rel="noreferrer">https://perthcharles.github.io/2015/09/07/wiki-tcp-retries/</a><br><a href="https://pracucci.com/linux-tcp-rto-min-max-and-tcp-retries2.html" target="_blank" rel="noreferrer">https://pracucci.com/linux-tcp-rto-min-max-and-tcp-retries2.html</a></p>`,25),p=[n];function r(l,k,h,c,o,d){return t(),i("div",null,p)}const _=s(e,[["render",r]]);export{E as __pageData,_ as default};
