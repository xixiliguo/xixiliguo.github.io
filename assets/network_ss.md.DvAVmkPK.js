import{_ as s,c as i,o as a,a2 as t}from"./chunks/framework.YBtj1D-X.js";const o=JSON.parse('{"title":"ss 命令介绍","description":"","frontmatter":{},"headers":[],"relativePath":"network/ss.md","filePath":"network/ss.md","lastUpdated":1747665785000}'),n={name:"network/ss.md"},p=t(`<h1 id="ss-命令介绍" tabindex="-1">ss 命令介绍 <a class="header-anchor" href="#ss-命令介绍" aria-label="Permalink to &quot;ss 命令介绍&quot;">​</a></h1><p>ss 替代传统的netstat, 通过netlink API获取网络连接socket(udp, tcp)的信息, 性能好且查询的结果丰富.<br> 以下信息基于 5.14内核</p><h2 id="socket统计概要" tabindex="-1">socket统计概要 <a class="header-anchor" href="#socket统计概要" aria-label="Permalink to &quot;socket统计概要&quot;">​</a></h2><p>运行<code>ss -s</code>获取当前系统中运行的Socket概要信息, 对系统有一个初步的了解. 从<code>/proc/net/sockstat</code> 和 <code>/proc/net/sockstat6</code> 采集的原始信息.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ss -s</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Total:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 173</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TCP:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (estab </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">8,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> closed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> orphaned</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> timewait</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Transport</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     IP</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        IPv6</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RAW</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UDP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TCP</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       12</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">INET</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      15</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        10</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FRAG</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         0</span></span></code></pre></div><p>如上图所示:<br> 系统当前总的socket为 173<br> TCP 总共 <code>15</code>个, 等于 <code>倒数第三行的 total + closed </code><br><code>closed = orphaned + timewait + others</code> , 这块的others是指已经不在hash桶里的,但仍被进程占用的socket, 比如<code>刚创建的socket, 没有bind或者connect的</code>, 或者<code>处于FIN-WAIT-2状态keeptimer超时后的socket</code>.</p><p>处于<code>FIN-WAIT-1</code>状态的socket会算到 <code>orphaned</code><br> 处于<code>FIN-WAIT-2</code>状态和<code>TIME-WAIT</code>的socket会算到 <code>timewait</code></p><p>如下对每一种TCP状态的socket统计, 上面提到的others无法统计到</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ss -H -ta | awk &#39;{print $1}&#39; | sort | uniq -c</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ESTAB</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> FIN-WAIT-2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LISTEN</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TIME-WAIT</span></span></code></pre></div><h2 id="基本操作" tabindex="-1">基本操作 <a class="header-anchor" href="#基本操作" aria-label="Permalink to &quot;基本操作&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ss -s          #显示各socket的统计信息</span></span>
<span class="line"><span>ss -ntlp       #-n 不解析, -t 显示tcp连接  -l 显示监听socket, -p 显示使用的进程名</span></span>
<span class="line"><span>ss -t -a       #查看所有tcp连接, 不带-a则指显示 Established 连接</span></span>
<span class="line"><span>ss -to         #查看tcp的keepalive信息</span></span>
<span class="line"><span>ss -ti         #查看tcp的内部信息,比如拥塞算法,rto,rtt,cwnd,ssthresh等</span></span>
<span class="line"><span>ss -tm         #查看tcp的内存使用信息, 比如收发缓冲区的大小</span></span></code></pre></div><h2 id="高级过滤用法" tabindex="-1">高级过滤用法 <a class="header-anchor" href="#高级过滤用法" aria-label="Permalink to &quot;高级过滤用法&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ss  -A raw,packet_raw  -a -p                      #查看raw socket的信息</span></span>
<span class="line"><span>ss -tan  state listening                           #显示处于listening状态的连接</span></span>
<span class="line"><span>ss -tan  state established                         #显示处于established状态的连接</span></span>
<span class="line"><span>ss -tan  state listening  &#39;( sport == 22 )&#39;        #显示处于listening状态且源端口为22的连接</span></span>
<span class="line"><span>ss -tan &#39;( sport == 22 )&#39;                          #显示源端口为22的连接</span></span>
<span class="line"><span>ss -tan &#39;( sport != 22 )&#39;                          #显示源端口不为22的连接</span></span>
<span class="line"><span>ss -tan &#39;( sport == 22 || dport == 22 )&#39;           #显示源端口为22或者目标端口为22的连接</span></span>
<span class="line"><span>ss -tan &#39;( dst 10.211.55.2 &amp;&amp; dport == 58181 )&#39;    #显示目标ip为10.211.55.2且目标端口为58181的连接</span></span>
<span class="line"><span>ss -tan &#39;( src 127.0.0.1 )&#39;                        #显示源ip为 127.0.0.1的连接</span></span>
<span class="line"><span>ss -tan &#39;( ! dst 10.211.55.2 &amp;&amp; dport != 58181 )&#39;  #显示目标ip不是10.211.55.2且目标端口不是58181的连接</span></span>
<span class="line"><span>ss -tan &quot;src == *:22&quot;                              #显示源端口是22的所有连接</span></span></code></pre></div><p>state后面支持的TCP状态如下:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sstate_namel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		&quot;UNKNOWN&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_ESTABLISHED] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;established&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_SYN_SENT] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;syn-sent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_SYN_RECV] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;syn-recv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_FIN_WAIT1] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fin-wait-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_FIN_WAIT2] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fin-wait-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_TIME_WAIT] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;time-wait&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_CLOSE] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;unconnected&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_CLOSE_WAIT] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;close-wait&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_LAST_ACK] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;last-ack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_LISTEN] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&quot;listening&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[SS_CLOSING] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;closing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	};</span></span></code></pre></div><h2 id="memory输出解释" tabindex="-1">--memory输出解释 <a class="header-anchor" href="#memory输出解释" aria-label="Permalink to &quot;--memory输出解释&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> skmem:(r&lt;rmem_alloc&gt;,rb&lt;rcv_buf&gt;,t&lt;wmem_alloc&gt;,tb&lt;snd_buf&gt;,</span></span>
<span class="line"><span>                            f&lt;fwd_alloc&gt;,w&lt;wmem_queued&gt;,o&lt;opt_mem&gt;,</span></span>
<span class="line"><span>                            bl&lt;back_log&gt;,d&lt;sock_drop&gt;)</span></span></code></pre></div><p><code>sock_drop</code>的单位是<code>tcp seg</code>, 其他字段的单位都是字节, 且每一次增加减少的都是<code>skb-&gt;truesize</code>, <code>rcv_buf</code> 指接收缓冲区大小, <code>snd_buf</code>指发送缓冲区大小.<br><code>opt_mem</code>只在部分特殊场景下才会增加， 参见 <a href="https://access.redhat.com/solutions/2070883" target="_blank" rel="noreferrer">https://access.redhat.com/solutions/2070883</a></p><p>接收过程中,如果当前socket正处于进程上下文,那么包放到backlog算到<code>back_log</code>里, 否则放到receive_queue里,算到 <code>rmem_alloc</code>里,同时<code>fwd_alloc</code>减少</p><p>发送过程中生成的skb先计算到<code>wmem_queued</code>里,同时<code>fwd_alloc</code>减少。如果拥塞窗口允许且包发送到L3层, 那么也会计算到<code>wmem_alloc</code>里, 然后通过<code>tcp_event_new_data_sent</code>函数将skb从write_queue删除, 放到rtx_queue里(这是一个红黑树, 根据seq排序)，表示包已发送，等待ack回复。</p><p>在后续的接收过程中通过获取到的ack, 调用 <code>tcp_clean_rtx_queue</code> 清理已被对方ack的skb, 最终<code>wmem_queued</code>的值做相应的减少,紧接着在kfree_skb时通过调用<code>tcp_wfree</code>减少<code>wmem_alloc</code>。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcp_clean_rtx_queue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  tcp_rtx_queue_unlink_and_free</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    tcp_wmem_free_skb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	  sk_wmem_queued_add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sk, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">skb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">truesize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //减少wmem_queued</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	  sk_mem_uncharge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sk, skb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">truesize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	  __kfree_skb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(skb)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //减少wmem_alloc</span></span></code></pre></div><p><code>rmem_alloc</code> &gt;= <code>rcv_buf</code> 或者 <code>wmem_queued</code> &gt;= <code>snd_buf</code> 就算缓冲区满。</p><h2 id="recv-q-与-send-q" tabindex="-1">Recv-Q 与 Send-Q <a class="header-anchor" href="#recv-q-与-send-q" aria-label="Permalink to &quot;Recv-Q 与 Send-Q&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>State          Recv-Q          Send-Q    Local Address:Port     Peer Address:Port</span></span>
<span class="line"><span>LISTEN         0               1024      xxx.xxx.xxx.xxx:xxx    xxx.xxx.xxx.xxx:*</span></span>
<span class="line"><span>ESTAB          0               52        xxx.xxx.xxx.xxx:xxx    xxx.xxx.xxx.xxx:xxx</span></span></code></pre></div><p>处于listen状态的socket, 队列指的是已完成TCP三次握手但进程还没有通过accept取走的连接个数, recv-q 表示当前连接个数. send-q是最大连接数<br> 其他状态时, recv-q 表示已到达接受队列但进程还没有取走的字节数(e.g. TCP协议的话不包括IP和TCP头), send-q表示在发送队列中还未发到L3和已发送但还未收到对方ack的字节数</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TCP_LISTEN)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		rx_queue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> READ_ONCE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sk</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sk_ack_backlog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	else</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		/* Because we don&#39;t lock the socket,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		 * we might find a transient negative value.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		rx_queue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> max_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">READ_ONCE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">rcv_nxt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">				      READ_ONCE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">copied_seq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	READ_ONCE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">write_seq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">snd_una</span></span></code></pre></div><h2 id="i-显示tcp内部状态" tabindex="-1">-i 显示tcp内部状态 <a class="header-anchor" href="#i-显示tcp内部状态" aria-label="Permalink to &quot;-i 显示tcp内部状态&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ESTAB</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                 0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           192.168.3.21:22</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           192.168.3.11:53942</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         cubic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wscale:8,7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rto:234</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rtt:33.6/12.372</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ato:40</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mss:1460</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pmtu:1500</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rcvmss:1460</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> advmss:1460</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cwnd:10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ssthresh:43</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes_sent:18548977</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes_acked:18548977</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes_received:9093761</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> segs_out:46323</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> segs_in:44834</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data_segs_out:35908</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data_segs_in:29570</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> send</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 3476190bps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lastsnd:2168</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lastrcv:328</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lastack:328</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pacing_rate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 6952296bps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> delivery_rate</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 152679736bps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> delivered:35909</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app_limited</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> busy:445323ms</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rcv_rtt:21.354</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rcv_space:115272</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rcv_ssthresh:682103</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> minrtt:0.094</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snd_wnd:1049856</span></span></code></pre></div><p>cubic 表示当前使用的拥塞算法<br><code>wscale:&lt;snd_wscale&gt;:&lt;rcv_wscale&gt;</code> 滑动窗口扩展因子，发送方向和接受方向。发送方向的数值是对端发送syn/synack报文时传过来的，接受方向是自行计算出数值后，会通过syn/synack报文发给对端。<br> rto 重传超时时间，单位是ms<br><code>rtt:&lt;rtt&gt;/&lt;rttvar&gt;</code> rtt是平均rtt时间， rttvar是rtt的平均偏差。单位是ms<br> ato ack超时时间， 单位ms, 用于延迟ack<br> mss 发送方向的mss,单位byte rcvmss是评估的接收方的mss advmss<br> cwnd 拥塞窗口大小，单位是mss 比如 10 代表 10*mss == 10 * 1460 == 14600 bytes<br> ssthresh 慢启动阈值， 单位是mss<br> bytes_sent bytes_acked bytes_received 迄今为止发送的，ack的，收到的字节数（不含ip, tcp header）。send 表示已发到L3层。<br> segs_out，segs_in，data_segs_out，data_segs_in的单位都是seg。data_segs_out只统计含有数据（不算header）的包， segs_out统计 所有发送包。data_segs_in与segs_in的区别同理。<br> lastsnd lastrcv lastack 上一次发送，接收，ack到现在的时长。 单位ms<br> send pacing_rate delivery_rate 单位是 bit/s, send是根据当前的拥塞窗口评估出来的（即想以xx的速率发送， 但其实可能受各种因素限制）。 pacing_rate 通常是send的两倍，delivery_rate 通过在收到Ack时利用已经发送且对端已收到的包来评估速率。<br> unacked 等于tp-&gt;packets_out， 已发送未acked的包，单位：seg<br> retrans 第一个等于tp-&gt;retrans_out，当前仍在重传的包（未acked)。第二个等于tp-&gt;total_retrans，历史上重传过的包。单位seg<br> lost 等于tp-&gt;lost_out，单位：seg<br> sacked 等于tp-&gt;sacked_out，单位：seg<br> dsack_dups 收到的dsack包， 单位：seg<br> reordering<br> reord_seen<br> rcv_rtt 最近一次采样的rtt<br> rcv_space 采样时用户态最大的拷贝字节数<br> rcv_ssthresh 单位：字节数<br> not_sent 在发送队列里，但还没有发送到L3的字节数（不含IP，TCP头）<br> minrtt 最小的rtt值，单位ms<br> snd_wnd 通过对端报文里的window和snd_wscale计算出来<br> rcv_wnd</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tcp_update_pacing_rate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tcp_sock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tcp_sk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sk);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	u64 rate;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* set sk_pacing_rate to 200 % of current rate (mss * cwnd / srtt) */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	rate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (u64)tp-&gt;mss_cache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((USEC_PER_SEC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* current rate is (cwnd * mss) / srtt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * In Slow Start [1], set sk_pacing_rate to 200 % the current rate.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * In Congestion Avoidance phase, set it to 120 % the current rate.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * [1] : Normal Slow Start condition is (tp-&gt;snd_cwnd &lt; tp-&gt;snd_ssthresh)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 *	 If snd_cwnd &gt;= (tp-&gt;snd_ssthresh / 2), we are approaching</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 *	 end of slow start and should slow down.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcp_snd_cwnd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tp) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tp-&gt;snd_ssthresh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		rate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> READ_ONCE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sock_net</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sk)-&gt;ipv4.sysctl_tcp_pacing_ss_ratio);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		rate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> READ_ONCE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sock_net</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sk)-&gt;ipv4.sysctl_tcp_pacing_ca_ratio);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	rate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcp_snd_cwnd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tp), tp-&gt;packets_out);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">likely</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tp-&gt;srtt_us))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		do_div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rate, tp-&gt;srtt_us);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* WRITE_ONCE() is needed because sch_fq fetches sk_pacing_rate</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * without any lock. We want to make sure compiler wont store</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * intermediate values in this location.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	WRITE_ONCE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sk-&gt;sk_pacing_rate, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">min_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(u64, rate,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">					     sk-&gt;sk_max_pacing_rate));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// iproute2/misc/ss.c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tcp_show_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nlmsghdr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nlh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inet_diag_msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rtattr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (rtt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> info-&gt;tcpi_snd_mss </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> info-&gt;tcpi_snd_cwnd) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			s.send_bps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) info-&gt;tcpi_snd_cwnd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)info-&gt;tcpi_snd_mss </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8000000.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rtt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (info-&gt;tcpi_pacing_rate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				info-&gt;tcpi_pacing_rate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			s.pacing_rate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> info-&gt;tcpi_pacing_rate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (info-&gt;tcpi_max_pacing_rate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">					info-&gt;tcpi_max_pacing_rate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				s.pacing_rate_max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> info-&gt;tcpi_max_pacing_rate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		s.delivery_rate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> info-&gt;tcpi_delivery_rate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>ss -i</code>的大部分信息来自内核<code>tcp_get_info</code>函数。</p><h2 id="tcp性能分析" tabindex="-1">TCP性能分析 <a class="header-anchor" href="#tcp性能分析" aria-label="Permalink to &quot;TCP性能分析&quot;">​</a></h2><p>通过ss -i 的结果可以帮助我们判断TCP发送性能的部分受限原因。<br> busy_time 表示非空闲时间，包括发送队列一直处于忙（即发送队列一直有数据）和如下两种情况时间的总和<br> rwnd_limited 表示发送速率受对端接受窗口限制的时间/百分比<br> sndbuf_limited 表示发送速率受发送buffer大小限制的时间/百分比</p><p><a href="https://lore.kernel.org/netdev/1480191016-73210-1-git-send-email-ycheng@google.com/t/#m40b206792ed684902a723dfd1e668942485db5fd" target="_blank" rel="noreferrer">原始Patch</a></p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><code>struct tcp_sock</code> 部分字段解释：<br> write_seq 已放入到write_queue里的最后一个序列号<br> rcv_nxt 要接收的下一个序列号<br> snd_nxt 要发送到L3层的下一个序列号<br> snd_una 最后已发送未收到acked的序列号<br> packets_out 已发送但未acked的包（inflight），单位seg<br> sacked_out 单位seg<br> lost_out 单位seg<br> retrans_out 单位seg<br> delivered 发送过且已acked的包，单位seg</p><p><a href="https://man7.org/linux/man-pages/man8/ss.8.html" target="_blank" rel="noreferrer">https://man7.org/linux/man-pages/man8/ss.8.html</a><br><a href="https://github.com/shemminger/iproute2/blob/main/misc/ssfilter.y" target="_blank" rel="noreferrer">https://github.com/shemminger/iproute2/blob/main/misc/ssfilter.y</a><br><a href="https://unix.stackexchange.com/questions/33855/kernel-socket-structure-and-tcp-diag" target="_blank" rel="noreferrer">https://unix.stackexchange.com/questions/33855/kernel-socket-structure-and-tcp-diag</a></p>`,39),h=[p];function k(l,e,r,d,c,E){return a(),i("div",null,h)}const F=s(n,[["render",k]]);export{o as __pageData,F as default};
