import{_ as s,c as i,o as a,a2 as t,ae as h,af as l,ag as e}from"./chunks/framework.YBtj1D-X.js";const u=JSON.parse('{"title":"Tcpdump与Wireshark点滴记录","description":"","frontmatter":{"title":"Tcpdump与Wireshark点滴记录","author":"Peter Wang","tags":["NetWork"],"date":"2018-08-16T14:41:37.000Z","draft":false},"headers":[],"relativePath":"network/tcpdump-wireshark.md","filePath":"network/tcpdump-wireshark.md","lastUpdated":1747665785000}'),n={name:"network/tcpdump-wireshark.md"},p=t(`<p>记录Tcpdump相关知识和Wireshark技巧</p><h2 id="tcpdump-基本介绍" tabindex="-1">tcpdump 基本介绍 <a class="header-anchor" href="#tcpdump-基本介绍" aria-label="Permalink to &quot;tcpdump 基本介绍&quot;">​</a></h2><h3 id="常用语法" tabindex="-1">常用语法 <a class="header-anchor" href="#常用语法" aria-label="Permalink to &quot;常用语法&quot;">​</a></h3><ul><li>指定网卡(eth0), 如果要抓取所有网卡的包, 使用<code>any</code></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcpdump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcpdump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> any</span></span></code></pre></div><ul><li>使用<code>-nnv</code>, 不解析协议和端口,同时多打印写详细信息(IP头)</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcpdump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -nnv</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    10.211.55.9.22</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10.211.55.2.63376:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [P.], cksum 0x84ff (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">incorrect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x0ec3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), seq 935672:935968, ack 761, win 385, options [nop,nop,TS val </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">102595534</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ecr 1564236582], length 296</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">22:53:54.006694</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> IP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (tos </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0x10,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ttl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 64,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> id</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 59224,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> offset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [DF], proto TCP (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), length 52)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    10.211.55.2.63376</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10.211.55.9.22:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [.], cksum 0x8bf2 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">correct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), ack 935672, win 8139, options [nop,nop,TS val </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1564236582</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ecr 102595534], length 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">22:53:54.006746</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> IP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (tos </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0x10,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ttl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 64,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> id</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 25202,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> offset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [DF], proto TCP (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), length 52)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    10.211.55.2.63376</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10.211.55.9.22:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [.], cksum 0x8adc (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">correct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), ack 935968, win 8121, options [nop,nop,TS val </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1564236582</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ecr 102595534], length 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">22:53:54.006895</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> IP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (tos </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0x10,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ttl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 64,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> id</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 57471,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> offset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [DF], proto TCP (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), length 924)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    10.211.55.9.22</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 10.211.55.2.63376:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Flags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [P.], cksum 0x873f (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">incorrect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x2d02</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), seq 935968:936840, ack 761, win 385, options [nop,nop,TS val </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">102595534</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ecr 1564236582], length 872</span></span></code></pre></div><ul><li>使用<code>-e</code>可以打印MAC地址</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcpdump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcpdump:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> verbose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> suppressed,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> or</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -vv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> for</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> full</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> protocol</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> decode</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listening</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth0,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link-type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> EN10MB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Ethernet), capture size 262144 bytes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">22:56:22.708510</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 00:1c:42:13:d0:f5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (oui </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 00:1c:42:00:00:08 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">oui</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), ethertype IPv4 (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0x0800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), length 266: linux.ssh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 10.211.55.2.63376: Flags [P.], seq 3187876880:3187877080, ack 2645742059, win 385, options [nop,nop,TS val </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">102744236</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ecr 1564384779], length 200</span></span></code></pre></div><ul><li>使用<code>-w</code>将信息保存到文件, 下列命令将包信息保存到<code>abc.cap</code>. <code>-C</code> 配合<code>-w</code>使用, 进一步指定文件的最大size, 一旦超过, 会新建文件继续写入</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcpdump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> abc.cap</span></span></code></pre></div><h3 id="常用过滤语法" tabindex="-1">常用过滤语法 <a class="header-anchor" href="#常用过滤语法" aria-label="Permalink to &quot;常用过滤语法&quot;">​</a></h3><p>不带过滤器, 则默认抓取指定网卡所有的包(接受和发送)</p><ul><li>抓取所有经过eth1，目的或源地址是192.168.1.1的网络数据</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcpdump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 192.168.1.1</span></span></code></pre></div><ul><li>抓取所有经过eth1，目的或源网络为192.168.XXX.XXX的网络数据</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcpdump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> net</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 192.168</span></span></code></pre></div><ul><li>指定源地址或者目的地址</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcpdump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 192.168.1.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcpdump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dst</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 192.168.1.1</span></span></code></pre></div><ul><li>抓取所有经过eth1，目的或源端口是25的网络数据, 如果要指定过滤源端口, 可使用 <code>src port 25</code>. 目的端口类似</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcpdump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> port</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span></span></code></pre></div><ul><li>抓取所有经过eth1的所有icmp包, tcp, arp包语法类似</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcpdump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcpdump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ip</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcpdump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tcp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcpdump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> udp</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcpdump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> icmp</span></span></code></pre></div><ul><li>逻辑表达式</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>非 : ! or &quot;not&quot; (去掉双引号)  </span></span>
<span class="line"><span>且 : &amp;&amp; or &quot;and&quot;  </span></span>
<span class="line"><span>或 : || or &quot;or&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>多个表达式整体用单引号或者双引号引用起来, 单个最好用括号这样更清晰</span></span></code></pre></div><ul><li>抓取所有经过eth1，目的网络是192.168，但目的主机不是192.168.1.200的TCP数据</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcpdump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eth1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;((tcp) and ((dst net 192.168) and (not dst host 192.168.1.200)))&#39;</span></span></code></pre></div><blockquote><p>详细的过滤指导请参考: <a href="https://wiki.wireshark.org/CaptureFilters" target="_blank" rel="noreferrer">https://wiki.wireshark.org/CaptureFilters</a></p></blockquote><h2 id="wireshark-介绍" tabindex="-1">wireshark 介绍 <a class="header-anchor" href="#wireshark-介绍" aria-label="Permalink to &quot;wireshark 介绍&quot;">​</a></h2><h3 id="显示过滤器" tabindex="-1">显示过滤器 <a class="header-anchor" href="#显示过滤器" aria-label="Permalink to &quot;显示过滤器&quot;">​</a></h3><p>默认wireshark打开文件后,显示所有的包. 可以指定相应的显示过滤器, 显示特定部分</p><ul><li><p>比如想显示所有经过端口80的数据包, 使用 <code>tcp.port == 80</code></p></li><li><p>显示所有经过 192.168这个网段的包,使用 <code>ip.addr == 192.168.0.0/16</code></p></li><li><p>仍然可以组合多个过滤条件</p></li></ul><blockquote><p>and, &amp;&amp; 逻辑与<br> or, || 逻辑或<br> not, ! 逻辑否</p></blockquote><p>下面是具体的例子:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tcp.port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ip.src</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 192.168.2.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">not</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> llc</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> and</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> frame[100-199]</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> contains</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;wireshark&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ipx.src.net</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0xbad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ipx.src.node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0.0.0.0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ip</span></span></code></pre></div><ul><li>两个特殊的过滤操作<code>contains</code> 和 <code>match</code></li></ul><p><code>ip.addr contains &quot;192.168&quot;</code>是指过滤所有ip地址里包含&quot;192.168&quot;这几个字符的数据包<br><code>http contains &quot;www.163.com&quot;</code> 过滤所有http消息里包含&quot;www.163.com&quot;字符串的数据包<br><code>match</code> 用法类似, 不过它支持perl的正则表达式, 而且是大小写不敏感</p><p><code>contains</code> 后面可以是带双引号的字符串, 字节数组, 单字节(类c语言风格). 其他的如&quot;tcp.port&quot; 也可以跟这些 下面的表达式都是正确的:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;www.163.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">56:98:47</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    (十六进制)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">68</span></span></code></pre></div><p>如下的过滤都是等价的:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http.request.method</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;\\x47ET&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http.request.method</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;GET&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http.request.method</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 47.45.54</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http.request.method</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 47:45:54</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http.request.method</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 47-45-54</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">frame.pkt_len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">frame.pkt_len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 012</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">frame.pkt_len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0xa</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">frame.pkt_len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;\\n&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">frame.pkt_len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;\\xa&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">frame.pkt_len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;\\012&#39;</span></span></code></pre></div><ul><li>还有很多切片,字节操作等高级操作, 可以进一步查看如下两个文档</li></ul><blockquote><p><a href="https://wiki.wireshark.org/DisplayFilters" target="_blank" rel="noreferrer">https://wiki.wireshark.org/DisplayFilters</a><br><a href="https://www.wireshark.org/docs/man-pages/wireshark-filter.html" target="_blank" rel="noreferrer">https://www.wireshark.org/docs/man-pages/wireshark-filter.html</a></p></blockquote><h3 id="三板斧" tabindex="-1">三板斧 <a class="header-anchor" href="#三板斧" aria-label="Permalink to &quot;三板斧&quot;">​</a></h3><p>处理linux主机性能问题, 我们通常有三个方面是必查的. CPU, 内存 和 IO 使用率<br> 通过wireshark分析网络问题, 也有类似的3个必查项</p><ul><li>统计 --&gt; 对话</li></ul><p>已<code>TCP</code>为例, 每一行代表一个TCP连接.他统计了流量和速率(每个方向和两个方向交互的总和) <code>rel start</code> 是该连接上第一条TCP包与该cap文件的第一条数据的时间相对值, 勾选绝对开始时间, 可显示包发送的绝对时间. 例如<code>23:17:95</code></p><p><img src="`+h+'" alt="统计--&gt;对话框"></p><ul><li>分析 --&gt; 专家信息</li></ul><p>Wireshark会自动分析整个文件, 然后分严重等级罗列出每一项分析结果和对应出现的次数<br> 一定要多关注错误和警告级别的, 根据出现的次数和文件总的<code>packet</code>数计算其出现的比例. 比如重传大于10%对性能影响就非常严重了</p><p><img src="'+l+'" alt="分析 --&gt; 专家信息"></p><ul><li>统计 --&gt; TCP流图形 --&gt; 时间序列(Steven)</li></ul><p>该图可以显示一个TCP连接上某个方向序列号的变化, 以此查看发送性能</p><p><img src="'+e+`" alt="统计 --&gt; TCP流图形 --&gt; 时间序列"></p><h3 id="wireshark提示消息解释" tabindex="-1">Wireshark提示消息解释 <a class="header-anchor" href="#wireshark提示消息解释" aria-label="Permalink to &quot;Wireshark提示消息解释&quot;">​</a></h3><ul><li>[Packet size limited during capture]<br> 表示该包没有抓全, 比如包是大小是1024, 结果tcpdump抓时只了1000. 通常这是抓包是<code>-s</code>值太小造成的</li><li>[TCP Previous segment not captured]<br> TCP连接上后一包的seq大于前一个包的seq+eln, 说明中间缺失数据. 给出这个提示</li><li>[TCP ACKed unseen segment]<br> 该报文里的ACK确认的seq在整个抓包里没有找到</li><li>[TCP Out-of-Order]<br> 后一个包的seq小于前一个包的seq+len, 认为乱序</li><li>[TCP Dup ACK]<br> 后一个包的ack和前一个包里的ack指一样.</li><li>[TCP Fast Retransmission]<br> 当Dup ACK发生3次, 发送端启动快速重传</li><li>[TCP Retransmission]<br> 包丢且也没有触发Dup ACK, 则RTO超时过后启动重传</li><li>[TCP zerowindow]<br> win为0, 表示接受方暂时无法接受新包</li><li>[TCP window Full]<br> 表示发送方已经将接受串口占满, 可对比接受方发的窗口和发送方的<code>byte in flight</code></li></ul><blockquote><p>可进一步查看官方文档: <a href="https://www.wireshark.org/docs/wsug_html_chunked/ChAdvTCPAnalysis.html" target="_blank" rel="noreferrer">https://www.wireshark.org/docs/wsug_html_chunked/ChAdvTCPAnalysis.html</a><br> 有兴趣的话, 可以进一步查看源码: <a href="https://github.com/boundary/wireshark/blob/master/epan/dissectors/packet-tcp.c" target="_blank" rel="noreferrer">https://github.com/boundary/wireshark/blob/master/epan/dissectors/packet-tcp.c</a></p></blockquote><h3 id="其他技巧" tabindex="-1">其他技巧 <a class="header-anchor" href="#其他技巧" aria-label="Permalink to &quot;其他技巧&quot;">​</a></h3><ul><li><p>如果包在英国的某台服务器上生成, 在中国打开时, 会发现并不是英国当地的发生时间. 需要做timeshift<br> 在<code>编辑 --&gt; 时间平移</code> 将时间通过<code>08:00:00</code>或者<code>-08:00:00</code>这样的格式进行调整</p></li><li><p>推荐两个讲解Wireshark的书:<br> &lt;&lt; Wireshark网络分析就这么简单&gt;&gt; 和 &lt;&lt; Wireshark网络分析的艺术 &gt;&gt;</p></li><li><p>iRTT 与 RTT<br><a href="https://osqa-ask.wireshark.org/questions/21813/how-is-rtt-calculated" target="_blank" rel="noreferrer">https://osqa-ask.wireshark.org/questions/21813/how-is-rtt-calculated</a></p></li></ul><h2 id="tcp协议" tabindex="-1">TCP协议 <a class="header-anchor" href="#tcp协议" aria-label="Permalink to &quot;TCP协议&quot;">​</a></h2><h3 id="知识学习" tabindex="-1">知识学习 <a class="header-anchor" href="#知识学习" aria-label="Permalink to &quot;知识学习&quot;">​</a></h3><p>这块非常复杂, 推荐如下书籍或文章: TCP/IP详解卷1<br> TCP 的那些事儿:<br><a href="https://coolshell.cn/articles/11564.html" target="_blank" rel="noreferrer">https://coolshell.cn/articles/11564.html</a><br><a href="https://coolshell.cn/articles/11609.html" target="_blank" rel="noreferrer">https://coolshell.cn/articles/11609.html</a><br> TCP/IP Guide:<br><a href="http://www.tcpipguide.com/free/index.htm" target="_blank" rel="noreferrer">http://www.tcpipguide.com/free/index.htm</a> 免费电子书</p><h3 id="问题记录" tabindex="-1">问题记录 <a class="header-anchor" href="#问题记录" aria-label="Permalink to &quot;问题记录&quot;">​</a></h3><ul><li><p>网卡eth1收到包, 根据路由要从网卡eth0发出去, 但从抓包上却没有看到回包<br> 通过设置参数<code>net.ipv4.conf.all.rp_filter</code>为0 可解决 默认为1, 是严格模式, 不允许回程路由和先前的不一样, 同时<code>nstat | grep IPReversePathFilter</code>可观察到包被丢弃后,计数器增加 具体解释看:<br><a href="https://access.redhat.com/solutions/53031" target="_blank" rel="noreferrer">https://access.redhat.com/solutions/53031</a><br><a href="https://www.slashroot.in/linux-kernel-rpfilter-settings-reverse-path-filtering" target="_blank" rel="noreferrer">https://www.slashroot.in/linux-kernel-rpfilter-settings-reverse-path-filtering</a><br><a href="https://access.redhat.com/solutions/53031" target="_blank" rel="noreferrer">https://access.redhat.com/solutions/53031</a><br> 同时可以打开内核参数<code>net.ipv4.conf.all.log_martians</code>,将OS认为的martians报文打印到系统日志里<br> 具体解释:<br><a href="https://serverfault.com/questions/570980/what-is-the-usefulness-of-logging-of-martians-packet-e-g-net-ipv4-conf-all-lo" target="_blank" rel="noreferrer">https://serverfault.com/questions/570980/what-is-the-usefulness-of-logging-of-martians-packet-e-g-net-ipv4-conf-all-lo</a></p></li><li><p>NAT场景下内网机器配置所有消息转发到一台nat服务器上, 但有时通过<code>ip route get xxx</code> 会显示路由指向默认网关. 并且有<code>cache redirect</code>字样<br> 路由分为静态路由和动态的. 动态是通过智能学的, 例如<code>icmp</code>的重定向会影响的动态路由. NAT场景下要关闭ICMP的重定向功能</p></li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net.ipv4.conf.all.accept_redirects</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net.ipv4.conf.all.secure_redirects</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net.ipv4.conf.all.send_redirects</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=0</span></span></code></pre></div><ul><li>多网卡一般配置不同的网段, 但有时会将同一网段的IP配置在两个网卡上, 这样回复消息只会从一个网卡出去. 需要通过策略路由解决:<br> 为每一个网卡配置单独的路由表<br> 默认任意一个网卡会对自己所有的 ip 地址在 ARP 请求上作出响应, 所有对端学到的这两个IP的mac地址可能是一样的, 解决方案如下:</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net.ipv4.conf.all.arp_announce</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net.ipv4.conf.all.arp_ignore</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div><ul><li><p>经常处理tcp各种超时问题, 如下文章总结了大部分tcp下的超时情况和对应的参数控制<br><a href="http://blog.qiusuo.im/blog/2014/03/19/tcp-timeout/" target="_blank" rel="noreferrer">http://blog.qiusuo.im/blog/2014/03/19/tcp-timeout/</a></p></li><li><p>服务端收到包, 在tcp层会校验checksum, 如果错误, 则直接丢弃该包. 用<code>nstat</code>可以看到<code>TcpInCsumErrors</code>增大</p></li></ul>`,69),k=[p];function r(d,F,o,c,g,C){return a(),i("div",null,k)}const E=s(n,[["render",r]]);export{u as __pageData,E as default};
