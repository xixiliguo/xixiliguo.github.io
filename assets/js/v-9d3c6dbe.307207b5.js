(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[695],{9665:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-9d3c6dbe",path:"/kernel/kernel-memory.html",title:"内存管理",lang:"en-US",frontmatter:{title:"内存管理",date:"2021-10-17T11:37:59.000Z",draft:!1},excerpt:"",headers:[{level:2,title:"分段",slug:"分段",children:[]},{level:2,title:"虚拟地址映射",slug:"虚拟地址映射",children:[]},{level:2,title:"进程空间",slug:"进程空间",children:[{level:3,title:"用户态",slug:"用户态",children:[]},{level:3,title:"内核态",slug:"内核态",children:[]}]},{level:2,title:"物理分配",slug:"物理分配",children:[]}],filePathRelative:"kernel/kernel-memory.md",git:{updatedTime:1657468158e3,contributors:[]}}},4953:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h2 id="分段" tabindex="-1"><a class="header-anchor" href="#分段" aria-hidden="true">#</a> 分段</h2><p>linux并没有利用分段实现虚拟内存, 但是却利用了dpl功能实现了权限控制. 用户态DPL是3, 内核态DPL是0, 当用户态程序 CPL为3时直接访问内核态的地址时，会因权限不足而报错。所以要通过syscal, int等特别指令触发切换, 这些指令会改变CPL值</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token function">DEFINE_PER_CPU_PAGE_ALIGNED</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">gdt_page</span><span class="token punctuation">,</span> gdt_page<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span>gdt <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t<span class="token comment">/*\n\t * We need valid kernel segments for data and code in long mode too\n\t * IRET will check the segment types  kkeil 2000/10/28\n\t * Also sysret mandates a special GDT layout\n\t *\n\t * TLS descriptors are currently at a different place compared to i386.\n\t * Hopefully nobody expects them at a fixed place (Wine?)\n\t */</span>\n\t<span class="token punctuation">[</span>GDT_ENTRY_KERNEL32_CS<span class="token punctuation">]</span>\t\t<span class="token operator">=</span> <span class="token function">GDT_ENTRY_INIT</span><span class="token punctuation">(</span><span class="token number">0xc09b</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xfffff</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">[</span>GDT_ENTRY_KERNEL_CS<span class="token punctuation">]</span>\t\t<span class="token operator">=</span> <span class="token function">GDT_ENTRY_INIT</span><span class="token punctuation">(</span><span class="token number">0xa09b</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xfffff</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">[</span>GDT_ENTRY_KERNEL_DS<span class="token punctuation">]</span>\t\t<span class="token operator">=</span> <span class="token function">GDT_ENTRY_INIT</span><span class="token punctuation">(</span><span class="token number">0xc093</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xfffff</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">[</span>GDT_ENTRY_DEFAULT_USER32_CS<span class="token punctuation">]</span>\t<span class="token operator">=</span> <span class="token function">GDT_ENTRY_INIT</span><span class="token punctuation">(</span><span class="token number">0xc0fb</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xfffff</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">[</span>GDT_ENTRY_DEFAULT_USER_DS<span class="token punctuation">]</span>\t<span class="token operator">=</span> <span class="token function">GDT_ENTRY_INIT</span><span class="token punctuation">(</span><span class="token number">0xc0f3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xfffff</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">[</span>GDT_ENTRY_DEFAULT_USER_CS<span class="token punctuation">]</span>\t<span class="token operator">=</span> <span class="token function">GDT_ENTRY_INIT</span><span class="token punctuation">(</span><span class="token number">0xa0fb</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0xfffff</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="虚拟地址映射" tabindex="-1"><a class="header-anchor" href="#虚拟地址映射" aria-hidden="true">#</a> 虚拟地址映射</h2><p>x86_64下面分页机制采用四级目录, 相关数据结构在<code>arch/x86/include/asm/pgtable_64_types.h</code> 如果cpu支持5级分页, 当前centos9会自动激活这个特性</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PGDIR_SHIFT</span>\t<span class="token expression"><span class="token number">39</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PTRS_PER_PGD</span>\t<span class="token expression"><span class="token number">512</span></span></span>\n<span class="token comment">/*\n * 3rd level page\n */</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUD_SHIFT</span>\t<span class="token expression"><span class="token number">30</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PTRS_PER_PUD</span>\t<span class="token expression"><span class="token number">512</span></span></span>\n\n<span class="token comment">/*\n * PMD_SHIFT determines the size of the area a middle-level\n * page table can map\n */</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PMD_SHIFT</span>\t<span class="token expression"><span class="token number">21</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PTRS_PER_PMD</span>\t<span class="token expression"><span class="token number">512</span></span></span>\n\n<span class="token comment">/*\n * entries per page directory level\n */</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PTRS_PER_PTE</span>\t<span class="token expression"><span class="token number">512</span></span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PMD_SIZE</span>\t<span class="token expression"><span class="token punctuation">(</span><span class="token function">_AC</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> UL<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> PMD_SHIFT<span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PMD_MASK</span>\t<span class="token expression"><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>PMD_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUD_SIZE</span>\t<span class="token expression"><span class="token punctuation">(</span><span class="token function">_AC</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> UL<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> PUD_SHIFT<span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUD_MASK</span>\t<span class="token expression"><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>PUD_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PGDIR_SIZE</span>\t<span class="token expression"><span class="token punctuation">(</span><span class="token function">_AC</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> UL<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> PGDIR_SHIFT<span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PGDIR_MASK</span>\t<span class="token expression"><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>PGDIR_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>\n</code></pre></div><p>x86_64的虚拟地址是64位, 但只使用48位用于映射到物理地址.因为处理器地址只有48条,要求内存地址48位到63位必须相同, 具体四级目录用到的位数如下:<br> PGD(9) + PUD(9) + PMD(9) + PTE(9) + 页内偏移(12)</p><p>查询当前系统一页的大小</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># getconf PAGE_SIZE</span>\n<span class="token number">4096</span>\n</code></pre></div><h2 id="进程空间" tabindex="-1"><a class="header-anchor" href="#进程空间" aria-hidden="true">#</a> 进程空间</h2><p>进程空间分为用户态地址空间和内核态地址空间, 32位下面用户态空间是3G, 内核态时1G. 分界线为宏<code>#define TASK_SIZE</code>, 这个定义了用户态空间的最大地址, 根据下面的宏, 计算出x86_64下面为<code>0x00007FFFFFFFF000</code></p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TASK_SIZE</span>\t\t<span class="token expression"><span class="token punctuation">(</span><span class="token function">test_thread_flag</span><span class="token punctuation">(</span>TIF_ADDR32<span class="token punctuation">)</span> <span class="token operator">?</span> </span><span class="token punctuation">\\</span>\n\t\t\t\t\t<span class="token expression">IA32_PAGE_OFFSET <span class="token operator">:</span> TASK_SIZE_MAX<span class="token punctuation">)</span></span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TASK_SIZE_MAX</span>\t<span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1UL</span> <span class="token operator">&lt;&lt;</span> __VIRTUAL_MASK_SHIFT<span class="token punctuation">)</span> <span class="token operator">-</span> PAGE_SIZE<span class="token punctuation">)</span></span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_X86_5LEVEL</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__VIRTUAL_MASK_SHIFT</span>\t<span class="token expression"><span class="token punctuation">(</span><span class="token function">pgtable_l5_enabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">56</span> <span class="token operator">:</span> <span class="token number">47</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__VIRTUAL_MASK_SHIFT</span>\t<span class="token expression"><span class="token number">47</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>\n</code></pre></div><div class="language-text ext-text"><pre class="language-text"><code>crash&gt; struct mm_struct -x 0xffff99da00e79540 | grep size\n    task_size = 0x7ffffffff000,\ncrash&gt;\n</code></pre></div><p>x86_64下<br> 用户空间 0x0000000000000000 ~ 0x00007FFFFFFFF000 128T<br> 内核空间 0xFFFF800000000000 ~ 0xFFFFFFFFFFFFFFFF 128T<br> 0x00007FFFFFFFF000 到 0xFFFF800000000000 为空洞区域</p><p>在execve时,将该值设置到mm_struct上面去</p><div class="language-c ext-c"><pre class="language-c"><code>\t<span class="token comment">/* Set the new mm task size. We have to do that late because it may\n\t * depend on TIF_32BIT which is only updated in flush_thread() on\n\t * some architectures like powerpc\n\t */</span>\n\tcurrent<span class="token operator">-&gt;</span>mm<span class="token operator">-&gt;</span>task_size <span class="token operator">=</span> TASK_SIZE<span class="token punctuation">;</span>\n</code></pre></div><div class="language-bash ext-sh"><pre class="language-bash"><code>crash<span class="token operator">&gt;</span> struct mm_struct.task_size -x 0xffff9f814be29f80\n    task_size <span class="token operator">=</span> 0x7ffffffff000\ncrash<span class="token operator">&gt;</span>\n</code></pre></div><p>在x86_64, 内核态从<code>0xffff888000000000</code> 开始映射整个物理内存</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__PAGE_OFFSET_BASE_L4</span>\t<span class="token expression"><span class="token function">_AC</span><span class="token punctuation">(</span><span class="token number">0xffff888000000000</span><span class="token punctuation">,</span> UL<span class="token punctuation">)</span></span></span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_DYNAMIC_MEMORY_LAYOUT</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__PAGE_OFFSET</span>           <span class="token expression">page_offset_base</span></span>\n</code></pre></div><p>如果打开了kaslr, 在<code>kernel_randomize_memory</code>里会对<code>page_offset_base</code>随机向上偏移一些位置, 如下是实际运行的cents8里的值:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>crash<span class="token operator">&gt;</span> px page_offset_base\npage_offset_base <span class="token operator">=</span> <span class="token variable">$20</span> <span class="token operator">=</span> 0xffff9f7f40000000\ncrash<span class="token operator">&gt;</span>\n</code></pre></div><p>参考文档: Documentation/x86/x86_64/mm.txt</p><h3 id="用户态" tabindex="-1"><a class="header-anchor" href="#用户态" aria-hidden="true">#</a> 用户态</h3><p>在load_elf_binary函数里 <code>setup_new_exec</code>里设置mm-&gt;mmap_base和mm-&gt;task_size, <code>kernel.randomize_va_space = 2</code>表示需要随机化部分区域的起始地址, 包括mmap, stack等<br><code>setup_arg_pages</code>里设置mm-&gt;arg_start和mm-&gt;start_stack, 此时这两个值一样<br><code>create_elf_tables</code> 重新设置了mm-&gt;start_stack<br> start_stack指栈底, 它与arg_start之前存放了一些信息, 比如执行命令的参数个数和每一个参数的具体字符串指针, 每一个环境变量的指针. arg_start ~ arg_end, env_start ~ env_end 之间才是真正存放这些数据的地方. 在程序内部改变这些指针值就能改变参数和环境变量信息</p><h3 id="内核态" tabindex="-1"><a class="header-anchor" href="#内核态" aria-hidden="true">#</a> 内核态</h3><p>page_offset_base开始的64T范围内是直接映射内存, 这些虚拟地址对应的物理地址就是 减去page_offset_base<br> page_offset_base默认是0xffff888000000000, 如果<code>CONFIG_RANDOMIZE_MEMORY=y</code>则会随机偏移些<br> 每个进程对应的task_struct分配在这个区域, 可以减去page_offset_base直接得到物理地址</p><div class="language-text ext-text"><pre class="language-text"><code>crash&gt; vtop ffff9e68002398c0\nVIRTUAL           PHYSICAL\nffff9e68002398c0  1002398c0\n\nPGD DIRECTORY: ffffffffb2e10000\nPAGE DIRECTORY: 1c601067\n   PUD: 1c601d00 =&gt; 1c606067\n   PMD: 1c606008 =&gt; 1057a9063\n   PTE: 1057a91c8 =&gt; 8000000100239063\n  PAGE: 100239000\n\n      PTE         PHYSICAL   FLAGS\n8000000100239063  100239000  (PRESENT|RW|ACCESSED|DIRTY|NX)\n\n      PAGE        PHYSICAL      MAPPING       INDEX CNT FLAGS\nffffdba004008e40 100239000 dead000000000008        0  0 17ffffc0000000\ncrash&gt; px page_offset_base\npage_offset_base = $15 = 0xffff9e6700000000\ncrash&gt; eval ffff9e68002398c0 - 0xffff9e6700000000\nhexadecimal: 1002398c0\n    decimal: 4297300160\n      octal: 40010714300\n     binary: 0000000000000000000000000000000100000000001000111001100011000000\ncrash&gt;\n</code></pre></div><p>vmalloc_base从 0xffffc90000000000UL开始, 随机偏移后, 可通过如下命令获取当前值</p><div class="language-text ext-text"><pre class="language-text"><code>crash&gt; px vmalloc_base\nvmalloc_base = $16 = 0xffffb9cb00000000\ncrash&gt;\n</code></pre></div><p>vmemmap_base从 0xffffea0000000000UL开始, 随机偏移后, 可通过如下命令获取当前值, 存放 struct page</p><div class="language-text ext-text"><pre class="language-text"><code>crash&gt; px vmemmap_base\nvmemmap_base = $17 = 0xffffdba000000000\ncrash&gt;\n</code></pre></div><p>内核的代码段从__START_KERNEL_map开始, 对应的物理地址是减去 __START_KERNEL_map 加上 phys_base</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__START_KERNEL_map</span>\t<span class="token expression"><span class="token function">_AC</span><span class="token punctuation">(</span><span class="token number">0xffffffff80000000</span><span class="token punctuation">,</span> UL<span class="token punctuation">)</span></span></span>\n</code></pre></div><h2 id="物理分配" tabindex="-1"><a class="header-anchor" href="#物理分配" aria-hidden="true">#</a> 物理分配</h2><p>当前主流都是numa结构, 即一个CPU对应本地内存, 当本地内存不够, 再通过总线访问其他节点的内存. 内存管理的最小单位是页, 通常是4K, 它属于Zone, Zone属于node节点节. node节点就是numa节点</p><p>如下表示该OS可以支持 1&lt;&lt; 10 == 1024个numa节点</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># grep CONFIG_NODES_SHIFT /boot/config-5.14.0-22.el9.x86_64</span>\n<span class="token assign-left variable">CONFIG_NODES_SHIFT</span><span class="token operator">=</span><span class="token number">10</span>\n</code></pre></div><p>一台4u8G的机器, 只有一个numa. cpu0~3属于node0</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># lscpu | grep NUMA</span>\nNUMA node<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:                    <span class="token number">1</span>\nNUMA node0 CPU<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:               <span class="token number">0</span>-3\n</code></pre></div><p>node0里面的跟物理内存的相关的数据如下</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">pglist_data</span> <span class="token operator">*</span>node_data<span class="token punctuation">[</span>MAX_NUMNODES<span class="token punctuation">]</span> __read_mostly<span class="token punctuation">;</span>\n<span class="token function">EXPORT_SYMBOL</span><span class="token punctuation">(</span>node_data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-text ext-text"><pre class="language-text"><code>crash&gt; p node_data[0]\n$22 = (pg_data_t *) 0xffff94e6dffd1000\ncrash&gt;  struct pg_data_t.node_id,nr_zones,node_start_pfn,node_present_pages,node_spanned_pages -x 0xffff94e6dffd1000\n  node_id = 0x0,\n  nr_zones = 0x3,\n  node_start_pfn = 0x1,              //从页号1开始\n  node_present_pages = 0x1fff8e,     //该node管理0x1fff8e个可用的页. \n  node_spanned_pages = 0x21ffff,     //管理0x21ffff页(8G), 除了包含present_pages, 还包含了空洞的物理地址. 这些页不可用.\ncrash&gt; struct zone.name,zone_start_pfn,spanned_pages,present_pages,managed_pages -x ffff94e6dffd1000 5\n  name = 0xffffffffa9fa3ed3 &quot;DMA&quot;,\n  zone_start_pfn = 0x1,\n  spanned_pages = 0xfff,\n  present_pages = 0xf9e,\n  managed_pages = {\n    counter = 0xf00\n  },\n\n  name = 0xffffffffa9f4c32c &quot;DMA32&quot;,\n  zone_start_pfn = 0x1000,\n  spanned_pages = 0xff000,\n  present_pages = 0xdeff0,\n  managed_pages = {\n    counter = 0xcaff0\n  },\n\n  name = 0xffffffffa9f4c222 &quot;Normal&quot;,\n  zone_start_pfn = 0x100000,\n  spanned_pages = 0x120000,\n  present_pages = 0x120000,\n  managed_pages = {\n    counter = 0x1145ec\n  },\n\n  name = 0xffffffffa9f4c229 &quot;Movable&quot;,\n  zone_start_pfn = 0x0,\n  spanned_pages = 0x0,\n  present_pages = 0x0,\n  managed_pages = {\n    counter = 0x0\n  },\n\n  name = 0xffffffffa9f9924d &quot;Device&quot;,\n  zone_start_pfn = 0x0,\n  spanned_pages = 0x0,\n  present_pages = 0x0,\n  managed_pages = {\n    counter = 0x0\n  },\ncrash&gt;\n</code></pre></div><p>0x1fff8e个可用页等于 8388152K</p><div class="language-text ext-text"><pre class="language-text"><code>[root@localhost ~]# dmesg -T | grep Mem\n[Sun Dec 26 11:12:09 2021] Memory: 3442876K/8388152K available (14345K kernel code, 5931K rwdata, 8944K rodata, 2656K init, 5448K bss, 556100K reserved, 0K cma-reserved)\n</code></pre></div><p>上面可以看到64位下有三个zone, 分别是 DMA, DMA32, Normal<br> struct page代表一页, 页通过伙伴系统管理. 所有空闲页挂在11个页块链表上. 每个链表包含相同连续页的地址. 有 1、2、4、8、16、32、64、128、256、512 和 1024. 所以一次最大可申请1024个物理地址连续的页(即4M的内存). 这些链表存在struct zone.free_area<br> 第 i 个页块链表中，页块中页的数目为 2^i</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_ORDER</span> <span class="token expression"><span class="token number">11</span></span></span>\n</code></pre></div><p>order为i时, 意味着申请 2 ^ i 个连续页, 如果free_area[i]没有, 则去free_area[i+1]里面找, 依次类推</p>',47),p={render:function(n,s){return e}}}}]);