(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[406],{8458:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-7bd93d06",path:"/others/lua-implemention-gc.html",title:"Lua实现原理 - GC垃圾回收",lang:"en-US",frontmatter:{title:"Lua实现原理 - GC垃圾回收",author:"Peter Wang",tags:["Lua","c"],date:"2020-09-30T13:17:14.000Z",draft:!1},excerpt:"",headers:[],filePathRelative:"others/lua-implemention-gc.md",git:{updatedTime:1626591395e3,contributors:[]}}},3787:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<p>Lua是巴西人发明的脚本语言,作者称之为穿过针孔的语言.体积非常小巧(Lua 5.3.1在Linux下编译后仅为546K),同时功能很强大(支持闭包,协程等). 本文主要介绍它的垃圾回收算法</p><p>通常的垃圾回收算法主要有两种, 引用计数和标记清除</p><ol><li>引用计数主要是当对象被创建时计数为1.以后当该对象再次被引用时则计数加1.当取消引用时计数减1.这样当计数为0时则释放对象.该方法较容易理解,目前CPython是这样实现的.但该方法会遇到循环引用的问题.比如A和B都是列表,A包含B,B也同时包含A.即<code>A[0] = B; B[0]=A</code>.这样当取消引用时,A和B所引用的列表计数仍为1,即不会释放.但显然这时需要释放.CPython通过标记清除来解决循环引用的问题.</li><li>标记清除原理是从根开始扫描(通常指全局变量和栈),发现一个存活对象则mark一下.等完成扫描动作后没有mark的则为需要清除的对象.直接释放.将mark过的对象reset后为下一次GC做准备.</li></ol><p>Lua 5.3.1使用增量的三色标记清除的GC算法, 对象刚被创建时默认标记颜色为白色,GC具体步骤如下:</p><ol><li>确定根部为全局变量(内部是hash table实现)和内部称之为therad的数据结构(它的一个成员指向一段连续内存,对应lua函数执行的逻辑栈)</li><li>从根开始扫描, 如果该对象内部并不引用其他对象,则直接标记为黑色.如果该对象引用了其他对象,则该对象标记为灰色并加入灰色链表里(例如 <code>b = 1; a[&quot;abc&quot;] = b</code>即啊引用b, 此时标记a为灰色).当扫描完一遍后,检查灰色列表是否为空, 为空则调到4, 否则继续执行步骤3.这一步称之为mark</li><li>取灰色链表上一个对象,首先设置为黑色并从该链接上去除,然后按步骤2的方法mark这个对象所引用的所有对象.(这里有个例外thread的处理仍然为灰色,会放入另一个灰色链接,暂纪委grayagain), 这步称之为traverse, 循环提取对象traverse直到灰色链接表为空</li><li>检查grayagain是否为空,不为空则继续按步骤3的原则继续traverse, 直到为空.写屏障生成的灰色对象会放在grayagain里</li><li>此时没有颜色为灰色的对象, GC进入sweep阶段,系统开始把标记为黑色的转换为白色,将当前白色的对象(即未mark到的对象)全部释放掉.</li><li>reset相关状态,等下一个GC的触发条件达到时候继续按步骤1进行. lua默认当前内存申请的大小为上次GC后存活的所有对象大小的2倍时启动next GC</li></ol><p>如果上述步骤连续一次性运行,这样会导致STW(stop the world)很长, Lua实现比较巧妙, 一次只做一点. 比如在步骤3里按每个对象的大小作为参考值.Traverse一定量后停止GC操作,继续执行Lua字节码的操作. 下次Check时继续运行, 达到一定量再次回到Lua字节码的执行. 这样STW中断时间很短,提高了程序响应时间,这是称之为增量GC的原因.</p><p>这样GC和程序逻辑交错运行会引入一个问题,对象A是hash table在一次GC中已经标记为黑色,紧接着执行业务逻辑<code>A[&quot;abc&quot;] = B</code>.假设B对象为白色,按因对象A已经是黑色,所有永远不会扫描到B, 则可能出现被意外释放的风险. 写屏障是用来解决这个问题的.当执行操作码<code>OP_SETLIST</code>时,为键赋新值后都要执行宏定义<code>LuaC_barrierback</code>, 当hash table 为黑, 值为白时,则将hash table由黑转为灰, 放到grayagain链表里,会在步骤4里重新traverse一遍<br> 也正是交错运行的原因, 已经扫描过的逻辑栈和马上要进入sweep阶段的逻辑栈肯定不一样了. 这就是thread标记为灰色,放入grayagain的原因, 在进入sweep前执行一个不可被业务逻辑打断的原子操作, 重新mark&amp;traverse一下</p><p>在Lua巨大的虚拟机里,当执行<code>OP_NEWTABLE</code>,<code>OP_CONCAT</code>,<code>OP_CLOSURE</code>时执行宏<code>checkGC(L, ra + 1)</code>,展开如下,主要是调用了<code>luaC_step</code>这个函数</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">checkGC</span><span class="token expression"><span class="token punctuation">(</span>L<span class="token punctuation">,</span>c<span class="token punctuation">)</span>  </span><span class="token punctuation">\\</span>\n  <span class="token expression"><span class="token function">Protect</span><span class="token punctuation">(</span> <span class="token function">luaC_condGC</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token punctuation">{</span>L<span class="token operator">-&gt;</span>top <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token comment">/* limit of live values */</span> <span class="token punctuation">\\</span>\n                          <span class="token expression"><span class="token function">luaC_step</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>\n                          <span class="token expression">L<span class="token operator">-&gt;</span>top <span class="token operator">=</span> ci<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token comment">/* restore top */</span> <span class="token punctuation">\\</span>\n           <span class="token expression"><span class="token function">luai_threadyield</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span></span></span>\n\n<span class="token comment">/*只有当debt大于0时才正是开始执行GC,在实际运行时,此值通常小于负的一个步长, 随着新对象的创建,达到一个步长时,则启动GC */</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">luaC_condGC</span><span class="token expression"><span class="token punctuation">(</span>L<span class="token punctuation">,</span>c<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>\n\t<span class="token expression"><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">G</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token operator">-&gt;</span>GCdebt <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token function">condchangemem</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   </span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">luaC_checkGC</span><span class="token expression"><span class="token punctuation">(</span>L<span class="token punctuation">)</span>\t\t<span class="token function">luaC_condGC</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token function">luaC_step</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span></span></span>\n\n<span class="token comment">/*\n** performs a basic GC step when collector is running\n*/</span>\n<span class="token keyword">void</span> <span class="token function">luaC_step</span> <span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  global_State <span class="token operator">*</span>g <span class="token operator">=</span> <span class="token function">G</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  l_mem debt <span class="token operator">=</span> <span class="token function">getdebt</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* GC deficit (be paid now) */</span>  <span class="token comment">/*所有新创对象都会增加debt的值*/</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>g<span class="token operator">-&gt;</span>gcrunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">/* not running? */</span>\n    <span class="token function">luaE_setdebt</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token operator">-</span>GCSTEPSIZE <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* avoid being called too often */</span>\n    <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">do</span> <span class="token punctuation">{</span>  <span class="token comment">/* repeat until pause or enough &quot;credit&quot; (negative debt) */</span>\n    lu_mem work <span class="token operator">=</span> <span class="token function">singlestep</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* perform one single step */</span> <span class="token comment">/*work代表单次step(mark或者sweep)的成本*/</span>\n    debt <span class="token operator">-=</span> work<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>debt <span class="token operator">&gt;</span> <span class="token operator">-</span>GCSTEPSIZE <span class="token operator">&amp;&amp;</span> g<span class="token operator">-&gt;</span>gcstate <span class="token operator">!=</span> GCSpause<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>gcstate <span class="token operator">==</span> GCSpause<span class="token punctuation">)</span>\n    <span class="token function">setpause</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* pause until next cycle */</span>\n  <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    debt <span class="token operator">=</span> <span class="token punctuation">(</span>debt <span class="token operator">/</span> g<span class="token operator">-&gt;</span>gcstepmul<span class="token punctuation">)</span> <span class="token operator">*</span> STEPMULADJ<span class="token punctuation">;</span>  <span class="token comment">/* convert &#39;work units&#39; to Kb */</span>\n    <span class="token function">luaE_setdebt</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> debt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">runafewfinalizers</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><p>singlestep函数用来控制GC内部状态过程的迁移</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">static</span> lu_mem <span class="token function">singlestep</span> <span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  global_State <span class="token operator">*</span>g <span class="token operator">=</span> <span class="token function">G</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>gcstate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">case</span> GCSpause<span class="token operator">:</span> <span class="token punctuation">{</span>\n      g<span class="token operator">-&gt;</span>GCmemtrav <span class="token operator">=</span> g<span class="token operator">-&gt;</span>strt<span class="token punctuation">.</span>size <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>GCObject<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">restartcollection</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*启动GC,并mark根部(全局变量表和内部的thread(又称协程, 每个协程有自己的独立逻辑栈))*/</span>\n      g<span class="token operator">-&gt;</span>gcstate <span class="token operator">=</span> GCSpropagate<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> g<span class="token operator">-&gt;</span>GCmemtrav<span class="token punctuation">;</span>  <span class="token comment">/*返回work成本,用于增量GC控制*/</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> GCSpropagate<span class="token operator">:</span> <span class="token punctuation">{</span>\n      g<span class="token operator">-&gt;</span>GCmemtrav <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n      <span class="token function">lua_assert</span><span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>gray<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">propagatemark</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/*Traverse灰色链表中的一个对象*/</span>\n       <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>gray <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token comment">/* no more gray objects? */</span>\n        g<span class="token operator">-&gt;</span>gcstate <span class="token operator">=</span> GCSatomic<span class="token punctuation">;</span>  <span class="token comment">/* finish propagate phase */</span> <span class="token comment">/*当灰色链接中没有对象后,迁移到下一个状态*/</span>\n      <span class="token keyword">return</span> g<span class="token operator">-&gt;</span>GCmemtrav<span class="token punctuation">;</span>  <span class="token comment">/* memory traversed in this step */</span>  <span class="token comment">/*返回work成本,用于增量GC控制*/</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> GCSatomic<span class="token operator">:</span> <span class="token punctuation">{</span>\n      lu_mem work<span class="token punctuation">;</span>\n      <span class="token keyword">int</span> sw<span class="token punctuation">;</span>\n      <span class="token function">propagateall</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* make sure gray list is empty */</span>  <span class="token comment">/*再次检查灰色链表是否还有对象*/</span>\n      work <span class="token operator">=</span> <span class="token function">atomic</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* work is what was traversed by &#39;atomic&#39; */</span> <span class="token comment">/*这块操作是不可中断的,主要是将一些写屏障导致的灰色对象继续traverse*/</span>\n      sw <span class="token operator">=</span> <span class="token function">entersweep</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      g<span class="token operator">-&gt;</span>GCestimate <span class="token operator">=</span> <span class="token function">gettotalbytes</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* first estimate */</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> work <span class="token operator">+</span> sw <span class="token operator">*</span> GCSWEEPCOST<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> GCSswpallgc<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">/* sweep &quot;regular&quot; objects */</span>\n      <span class="token keyword">return</span> <span class="token function">sweepstep</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> g<span class="token punctuation">,</span> GCSswpfinobj<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>finobj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> GCSswpfinobj<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">/* sweep objects with finalizers */</span>\n      <span class="token keyword">return</span> <span class="token function">sweepstep</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> g<span class="token punctuation">,</span> GCSswptobefnz<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token operator">-&gt;</span>tobefnz<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> GCSswptobefnz<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">/* sweep objects to be finalized */</span>\n      <span class="token keyword">return</span> <span class="token function">sweepstep</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> g<span class="token punctuation">,</span> GCSswpend<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> GCSswpend<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">/* finish sweeps */</span>\n      <span class="token function">makewhite</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>mainthread<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* sweep main thread */</span>\n      <span class="token function">checkSizes</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      g<span class="token operator">-&gt;</span>gcstate <span class="token operator">=</span> GCScallfin<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">case</span> GCScallfin<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">/* call remaining finalizers */</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token operator">-&gt;</span>tobefnz <span class="token operator">&amp;&amp;</span> g<span class="token operator">-&gt;</span>gckind <span class="token operator">!=</span> KGC_EMERGENCY<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">runafewfinalizers</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">*</span> GCFINALIZECOST<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">/* emergency mode or no more finalizers */</span>\n        g<span class="token operator">-&gt;</span>gcstate <span class="token operator">=</span> GCSpause<span class="token punctuation">;</span>  <span class="token comment">/* finish collection */</span>\n        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token function">lua_assert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>写屏障的具体相关函数</p><div class="language-c ext-c"><pre class="language-c"><code>      <span class="token function">vmcase</span><span class="token punctuation">(</span>OP_SETLIST<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">GETARG_B</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">GETARG_C</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> last<span class="token punctuation">;</span>\n        Table <span class="token operator">*</span>h<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> n <span class="token operator">=</span> <span class="token function">cast_int</span><span class="token punctuation">(</span>L<span class="token operator">-&gt;</span>top <span class="token operator">-</span> ra<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">lua_assert</span><span class="token punctuation">(</span><span class="token function">GET_OPCODE</span><span class="token punctuation">(</span><span class="token operator">*</span>ci<span class="token operator">-&gt;</span>u<span class="token punctuation">.</span>l<span class="token punctuation">.</span>savedpc<span class="token punctuation">)</span> <span class="token operator">==</span> OP_EXTRAARG<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          c <span class="token operator">=</span> <span class="token function">GETARG_Ax</span><span class="token punctuation">(</span><span class="token operator">*</span>ci<span class="token operator">-&gt;</span>u<span class="token punctuation">.</span>l<span class="token punctuation">.</span>savedpc<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token function">luai_runtimecheck</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> <span class="token function">ttistable</span><span class="token punctuation">(</span>ra<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        h <span class="token operator">=</span> <span class="token function">hvalue</span><span class="token punctuation">(</span>ra<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        last <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>LFIELDS_PER_FLUSH<span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">&gt;</span> h<span class="token operator">-&gt;</span>sizearray<span class="token punctuation">)</span>  <span class="token comment">/* needs more space? */</span>\n          <span class="token function">luaH_resizearray</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> h<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* pre-allocate it at once */</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          TValue <span class="token operator">*</span>val <span class="token operator">=</span> ra<span class="token operator">+</span>n<span class="token punctuation">;</span>\n          <span class="token function">luaH_setint</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> h<span class="token punctuation">,</span> last<span class="token operator">--</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token function">luaC_barrierback</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> h<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        L<span class="token operator">-&gt;</span>top <span class="token operator">=</span> ci<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span>  <span class="token comment">/* correct top (in case of previous open call) */</span>\n        vmbreak<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">luaC_barrierback</span><span class="token expression"><span class="token punctuation">(</span>L<span class="token punctuation">,</span>p<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>  </span><span class="token punctuation">\\</span>\n\t<span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">iscollectable</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isblack</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">iswhite</span><span class="token punctuation">(</span><span class="token function">gcvalue</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  </span><span class="token punctuation">\\</span>\n\t<span class="token expression"><span class="token function">luaC_barrierback_</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span></span>\n\n<span class="token comment">/*\n** barrier that moves collector backward, that is, mark the black object\n** pointing to a white object as gray again.\n*/</span>\n<span class="token keyword">void</span> <span class="token function">luaC_barrierback_</span> <span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">,</span> Table <span class="token operator">*</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  global_State <span class="token operator">*</span>g <span class="token operator">=</span> <span class="token function">G</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">lua_assert</span><span class="token punctuation">(</span><span class="token function">isblack</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isdead</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">black2gray</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* make table gray (again) */</span>\n  <span class="token function">linkgclist</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> g<span class="token operator">-&gt;</span>grayagain<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',13),t={render:function(n,s){return p}}}}]);