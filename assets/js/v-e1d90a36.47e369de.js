(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[561],{415:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-e1d90a36",path:"/others/code_segment.html",title:"一些代码片段",lang:"en-US",frontmatter:{title:"一些代码片段",author:"Peter Wang",tags:["代码","片段"],date:"2020-09-29T16:09:04.000Z",draft:!1},excerpt:"",headers:[{level:3,title:"使用golang实现类似ping获取网络时延",slug:"使用golang实现类似ping获取网络时延",children:[]},{level:3,title:"使用golang打印系统调用时errorno的含义",slug:"使用golang打印系统调用时errorno的含义",children:[]},{level:3,title:"分析两个关于超出最大文件数的错误逻辑",slug:"分析两个关于超出最大文件数的错误逻辑",children:[]},{level:3,title:"分析EAGAIN的产生场景",slug:"分析eagain的产生场景",children:[]},{level:3,title:"实现类似hexdump打印格式的代码",slug:"实现类似hexdump打印格式的代码",children:[]}],filePathRelative:"others/code_segment.md",git:{updatedTime:1626591395e3,contributors:[]}}},4974:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<p>记录自己日常写的一些代码片段</p><h3 id="使用golang实现类似ping获取网络时延" tabindex="-1"><a class="header-anchor" href="#使用golang实现类似ping获取网络时延" aria-hidden="true">#</a> 使用golang实现类似ping获取网络时延</h3><div class="language-golang ext-golang"><pre class="language-golang"><code>package main\n\nimport (\n\t&quot;log&quot;\n\t&quot;net&quot;\n\t&quot;os&quot;\n\t&quot;syscall&quot;\n\t&quot;time&quot;\n\t&quot;unsafe&quot;\n\n\t&quot;golang.org/x/net/icmp&quot;\n\t&quot;golang.org/x/net/ipv4&quot;\n)\n\nfunc main() {\n\n\tconn, err := net.DialIP(&quot;ip4:icmp&quot;, nil, &amp;net.IPAddr{IP: net.ParseIP(&quot;114.114.114.114&quot;)})\n\tif err != nil {\n\t\tlog.Fatalf(&quot;net DialIP: %s&quot;, err)\n\t}\n\trawconn, err := conn.SyscallConn()\n\tif err != nil {\n\t\tlog.Fatalf(&quot;get raw: %s&quot;, err)\n\t}\n\trawconn.Control(func(fd uintptr) {\n\t\tsyscall.SetsockoptInt(int(fd), syscall.SOL_SOCKET, syscall.SO_TIMESTAMP, 1)\n\n\t})\n\twm := icmp.Message{\n\t\tType: ipv4.ICMPTypeEcho,\n\t\tCode: 0,\n\t\tBody: &amp;icmp.Echo{\n\t\t\tID: os.Getpid() &amp; 0xffff, Seq: 1,\n\t\t\tData: []byte(&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;),\n\t\t},\n\t}\n\twb, err := wm.Marshal(nil)\n\tif err != nil {\n\t\tlog.Fatalf(&quot;generate icmp request: %s&quot;, err)\n\t}\n\n\tbeforetime := time.Now()\n\tlog.Printf(&quot;send %+v\\n&quot;, wm)\n\t_, err = conn.Write(wb)\n\tif err != nil {\n\t\tlog.Fatalf(&quot;send icmp request: %s&quot;, err)\n\t}\n\n\trb := make([]byte, 1500)\n\toob := make([]byte, 1500)\n\tn, oobn, _, addr, err := conn.ReadMsgIP(rb, oob)\n\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\theader, err := ipv4.ParseHeader(rb[:n])\n\tif err != nil {\n\t\tlog.Fatalf(&quot;decode ip header of icmp response: %s&quot;, err)\n\t}\n\n\trm, err := icmp.ParseMessage(1, rb[header.Len:n])\n\n\tif err != nil {\n\t\tlog.Fatalf(&quot;parse icmp messages: %s&quot;, err)\n\t}\n\tswitch rm.Type {\n\tcase ipv4.ICMPTypeEchoReply:\n\t\tresp := rm.Body.(*icmp.Echo)\n\t\tif resp.ID != os.Getpid()&amp;0xffff || resp.Seq != 1 {\n\t\t\tlog.Fatalf(&quot;receiv icmp response for antoher process&quot;)\n\t\t}\n\t\tcmsgs, err := syscall.ParseSocketControlMessage(oob[:oobn])\n\t\tif err != nil {\n\t\t\tlog.Fatalf(&quot;parse cmsg: %s&quot;, err)\n\t\t}\n\t\tm := cmsgs[0]\n\t\taftertime := time.Now()\n\t\tif m.Header.Level == syscall.SOL_SOCKET &amp;&amp; m.Header.Type == syscall.SCM_TIMESTAMP {\n\t\t\tvar recvtime syscall.Timeval\n\t\t\trecvtime = *(*syscall.Timeval)(unsafe.Pointer(&amp;m.Data[0]))\n\t\t\taftertime = time.Unix(recvtime.Unix())\n\t\t\tlog.Printf(&quot;using so_timestamp&quot;)\n\t\t}\n\t\tlog.Printf(&quot;after %dms, got msg %+v from %v&quot;, aftertime.Sub(beforetime).Milliseconds(), rm, addr)\n\n\tdefault:\n\t\tlog.Printf(&quot;got %+v from %v; want echo reply&quot;, rm, addr)\n\t}\n\n}\n</code></pre></div><p>运行结果如下:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>$ go run main.go\n<span class="token number">2020</span>/09/30 00:12:07 send <span class="token punctuation">{</span>Type:echo Code:0 Checksum:0 Body:0xc000094870<span class="token punctuation">}</span>\n<span class="token number">2020</span>/09/30 00:12:07 using so_timestamp\n<span class="token number">2020</span>/09/30 00:12:07 after 30ms, got msg <span class="token operator">&amp;</span><span class="token punctuation">{</span>Type:echo reply Code:0 Checksum:38592 Body:0xc00006c060<span class="token punctuation">}</span> from <span class="token number">114.114</span>.114.114\n</code></pre></div><h3 id="使用golang打印系统调用时errorno的含义" tabindex="-1"><a class="header-anchor" href="#使用golang打印系统调用时errorno的含义" aria-hidden="true">#</a> 使用golang打印系统调用时errorno的含义</h3><div class="language-golang ext-golang"><pre class="language-golang"><code>package main\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;syscall&quot;\n)\n\nfunc main() {\n\tfor i := 1; i &lt; 133; i++ {\n\t\terrno := syscall.Errno(i)\n\t\tfmt.Printf(&quot;Errno %d 0x%x: %s\\n&quot;, i, i, errno.Error())\n\t}\n}\n</code></pre></div><p>运行结果如下:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>$ go run main.go\nErrno <span class="token number">1</span> 0x1: operation not permitted\nErrno <span class="token number">2</span> 0x2: no such <span class="token function">file</span> or directory\nErrno <span class="token number">3</span> 0x3: no such process\nErrno <span class="token number">4</span> 0x4: interrupted system call\nErrno <span class="token number">5</span> 0x5: input/output error\nErrno <span class="token number">6</span> 0x6: no such device or address\nErrno <span class="token number">7</span> 0x7: argument list too long\nErrno <span class="token number">8</span> 0x8: <span class="token builtin class-name">exec</span> <span class="token function">format</span> error\nErrno <span class="token number">9</span> 0x9: bad <span class="token function">file</span> descriptor\nErrno <span class="token number">10</span> 0xa: no child processes\nErrno <span class="token number">11</span> 0xb: resource temporarily unavailable\n<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>\n</code></pre></div><h3 id="分析两个关于超出最大文件数的错误逻辑" tabindex="-1"><a class="header-anchor" href="#分析两个关于超出最大文件数的错误逻辑" aria-hidden="true">#</a> 分析两个关于超出最大文件数的错误逻辑</h3><p>ENFILE是指超过了系统级最大的文件句柄数. <code>sysctl fs.file-max</code><br> EMFILE是指超过了该进程指定的最大文件数. <code>cat /proc/[pid]/limits</code>里的<code>Max open files</code></p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>\t<span class="token macro-name">ENFILE</span>\t\t<span class="token expression"><span class="token number">23</span>\t</span><span class="token comment">/* File table overflow */</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>\t<span class="token macro-name">EMFILE</span>\t\t<span class="token expression"><span class="token number">24</span>\t</span><span class="token comment">/* Too many open files */</span></span>\n</code></pre></div><p><code>Too many open files</code> 演示代码:</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/resource.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">struct</span> <span class="token class-name">rlimit</span> old_lim<span class="token punctuation">,</span> lim<span class="token punctuation">,</span> new_lim<span class="token punctuation">;</span>\n\n    <span class="token comment">// Get old limits</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">getrlimit</span><span class="token punctuation">(</span>RLIMIT_NOFILE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>old_lim<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Old limits -&gt; soft limit= %ld \\t&quot;</span>\n          <span class="token string">&quot; hard limit= %ld \\n&quot;</span><span class="token punctuation">,</span> old_lim<span class="token punctuation">.</span>rlim_cur<span class="token punctuation">,</span>\n                               old_lim<span class="token punctuation">.</span>rlim_max<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span>\n        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Set new value</span>\n    lim<span class="token punctuation">.</span>rlim_cur <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n    lim<span class="token punctuation">.</span>rlim_max <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n\n\n    <span class="token comment">// Set limits</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">setrlimit</span><span class="token punctuation">(</span>RLIMIT_NOFILE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>lim<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Get new limits</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">getrlimit</span><span class="token punctuation">(</span>RLIMIT_NOFILE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>new_lim<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;New limits -&gt; soft limit= %ld \\t&quot;</span>\n          <span class="token string">&quot; hard limit= %ld \\n&quot;</span><span class="token punctuation">,</span> new_lim<span class="token punctuation">.</span>rlim_cur<span class="token punctuation">,</span>\n                                new_lim<span class="token punctuation">.</span>rlim_max<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span>\n        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Try to open a new file</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;foo.txt&quot;</span><span class="token punctuation">,</span> O_WRONLY <span class="token operator">|</span> O_CREAT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;errno %d: %s\\n&quot;</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span>\n            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Opened successfully\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>运行结果如下, 说明当进程打开的文件数超过<code>ulimit -a</code>里设置的值或者<code>RLIMIT_NOFILE</code>, 两者等价. 返回<code>EMFILE</code> 24号错误</p><div class="language-bash ext-sh"><pre class="language-bash"><code>$ gcc -g testopenfiles-process.c -o testopenfiles-process <span class="token operator">&amp;&amp;</span> ./testopenfiles-process\nOld limits -<span class="token operator">&gt;</span> soft <span class="token assign-left variable">limit</span><span class="token operator">=</span> <span class="token number">1048576</span> \t hard <span class="token assign-left variable">limit</span><span class="token operator">=</span> <span class="token number">1048576</span>\nNew limits -<span class="token operator">&gt;</span> soft <span class="token assign-left variable">limit</span><span class="token operator">=</span> <span class="token number">3</span> \t hard <span class="token assign-left variable">limit</span><span class="token operator">=</span> <span class="token number">3</span>\nerrno <span class="token number">24</span>: Too many <span class="token function">open</span> files\n</code></pre></div><p><code>File table overflow</code> 或者<code>Too many open files in system</code>演示代码:</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/resource.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">int</span> i<span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token function">sprintf</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;foo%d.txt&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">open</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> O_WRONLY <span class="token operator">|</span> O_CREAT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;errno %d: %s\\n&quot;</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">else</span>\n      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Opened successfully\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>运行结果如下, 说明当进程打开的文件数系统的最大文件数时. 返回<code>ENFILE</code> 23号错误</p><div class="language-bash ext-sh"><pre class="language-bash"><code>$ gcc -g testopenfiles-system.c -o testopenfiles-system <span class="token operator">&amp;&amp;</span> ./testopenfiles-system\nerrno <span class="token number">23</span>: Too many <span class="token function">open</span> files <span class="token keyword">in</span> system\nerrno <span class="token number">23</span>: Too many <span class="token function">open</span> files <span class="token keyword">in</span> system\nerrno <span class="token number">23</span>: Too many <span class="token function">open</span> files <span class="token keyword">in</span> system\nerrno <span class="token number">23</span>: Too many <span class="token function">open</span> files <span class="token keyword">in</span> system\nerrno <span class="token number">23</span>: Too many <span class="token function">open</span> files <span class="token keyword">in</span> system\nerrno <span class="token number">23</span>: Too many <span class="token function">open</span> files <span class="token keyword">in</span> system\nerrno <span class="token number">23</span>: Too many <span class="token function">open</span> files <span class="token keyword">in</span> system\nerrno <span class="token number">23</span>: Too many <span class="token function">open</span> files <span class="token keyword">in</span> system\nerrno <span class="token number">23</span>: Too many <span class="token function">open</span> files <span class="token keyword">in</span> system\nerrno <span class="token number">23</span>: Too many <span class="token function">open</span> files <span class="token keyword">in</span> system\n</code></pre></div><p>dmesg里可以同时也打印类似<code>VFS: file-max limit 135375 reached</code>这样的日志.</p><h3 id="分析eagain的产生场景" tabindex="-1"><a class="header-anchor" href="#分析eagain的产生场景" aria-hidden="true">#</a> 分析EAGAIN的产生场景</h3><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>\t<span class="token macro-name">EAGAIN</span>\t\t<span class="token expression"><span class="token number">11</span>\t</span><span class="token comment">/* Try again */</span></span>\n</code></pre></div><p>在<code>fork</code>等系统调用时返回<code>EAGAIN Resource temporarily unavailable</code>是因为进程/线程数超限了, 要检查两种情况</p><ol><li>当该进程/线程对应的用户的所有进程数超过上限, <code>ulimit -a</code>里的<code>NOFILE</code></li><li><code>sysctl kernel.pid_max</code> OS系统级的最大进程数<br> 有一篇详细的案例可参考: https://access.redhat.com/solutions/1434943<br><code>man 2 fork</code>里的解释如下:</li></ol><div class="language-text ext-text"><pre class="language-text"><code>EAGAIN fork() cannot allocate sufficient memory to copy the parent&#39;s page tables and allocate a task structure for the child.\nEAGAIN It  was  not  possible to create a new process because the caller&#39;s RLIMIT_NPROC resource limit was encountered.  To exceed this limit, the process must have either the CAP_SYS_ADMIN or the CAP_SYS_RESOURCE capability.   \n</code></pre></div><p>非root用户执行如下代码:</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/resource.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">struct</span> <span class="token class-name">rlimit</span> old_lim<span class="token punctuation">,</span> lim<span class="token punctuation">,</span> new_lim<span class="token punctuation">;</span>\n\n  <span class="token comment">// Get old limits</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getrlimit</span><span class="token punctuation">(</span>RLIMIT_NPROC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>old_lim<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span>\n        <span class="token string">&quot;Old limits -&gt; soft limit= %ld \\t&quot;</span>\n        <span class="token string">&quot; hard limit= %ld \\n&quot;</span><span class="token punctuation">,</span>\n        old_lim<span class="token punctuation">.</span>rlim_cur<span class="token punctuation">,</span> old_lim<span class="token punctuation">.</span>rlim_max<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span>\n    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Set new value</span>\n  lim<span class="token punctuation">.</span>rlim_cur <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n  lim<span class="token punctuation">.</span>rlim_max <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Set limits</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setrlimit</span><span class="token punctuation">(</span>RLIMIT_NPROC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>lim<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Get new limits</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getrlimit</span><span class="token punctuation">(</span>RLIMIT_NPROC<span class="token punctuation">,</span> <span class="token operator">&amp;</span>new_lim<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span>\n        <span class="token string">&quot;New limits -&gt; soft limit= %ld &quot;</span>\n        <span class="token string">&quot;\\t hard limit= %ld \\n&quot;</span><span class="token punctuation">,</span>\n        new_lim<span class="token punctuation">.</span>rlim_cur<span class="token punctuation">,</span> new_lim<span class="token punctuation">.</span>rlim_max<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span>\n    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token keyword">int</span> targetFork <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n  <span class="token class-name">pid_t</span> forkResult<span class="token punctuation">;</span>\n  <span class="token keyword">int</span> i<span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> targetFork<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    forkResult <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>forkResult <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;errno %d %s\\n&quot;</span><span class="token punctuation">,</span> errno<span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>forkResult <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Child pid: %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Parent pid: %d trigger fork %d times %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>结果为:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>$ ./a.out\nOld limits -<span class="token operator">&gt;</span> soft <span class="token assign-left variable">limit</span><span class="token operator">=</span> <span class="token number">4096</span> \t hard <span class="token assign-left variable">limit</span><span class="token operator">=</span> <span class="token number">5370</span>\nNew limits -<span class="token operator">&gt;</span> soft <span class="token assign-left variable">limit</span><span class="token operator">=</span> <span class="token number">5</span> \t hard <span class="token assign-left variable">limit</span><span class="token operator">=</span> <span class="token number">5</span>\nParent pid: <span class="token number">26665</span> trigger fork <span class="token number">1</span> <span class="token builtin class-name">times</span> <span class="token number">1068333019</span>\nChild pid: <span class="token number">26666</span>\nParent pid: <span class="token number">26665</span> trigger fork <span class="token number">2</span> <span class="token builtin class-name">times</span> <span class="token number">1068329250</span>\nParent pid: <span class="token number">26665</span> trigger fork <span class="token number">3</span> <span class="token builtin class-name">times</span> <span class="token number">1068329250</span>\nChild pid: <span class="token number">26667</span>\nerrno <span class="token number">11</span> Resource temporarily unavailable\nerrno <span class="token number">11</span> Resource temporarily unavailable\nerrno <span class="token number">11</span> Resource temporarily unavailable\nerrno <span class="token number">11</span> Resource temporarily unavailable\nerrno <span class="token number">11</span> Resource temporarily unavailable\nerrno <span class="token number">11</span> Resource temporarily unavailable\nerrno <span class="token number">11</span> Resource temporarily unavailable\nChild pid: <span class="token number">26668</span>\n</code></pre></div><p>如果是<code>root</code>用户执行, 则不会有报错, 是因为root默认有<code>CAP_SYS_ADMIN</code>或者<code>CAP_SYS_RESOURCE</code>权限</p><h3 id="实现类似hexdump打印格式的代码" tabindex="-1"><a class="header-anchor" href="#实现类似hexdump打印格式的代码" aria-hidden="true">#</a> 实现类似hexdump打印格式的代码</h3><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n\n<span class="token keyword">extern</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>environ<span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">hexDump</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>desc<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">int</span> i<span class="token punctuation">;</span>\n  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> buffLine<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>pc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>addr<span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>desc <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:\\n&quot;</span><span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;  %s\\n&quot;</span><span class="token punctuation">,</span> buffLine<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// Prints the ADDRESS</span>\n      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;  %08x &quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Prints the HEXCODES that represent each chars.</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%02x&quot;</span><span class="token punctuation">,</span> pc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>pc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0x7e</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      buffLine<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      buffLine<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> pc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    buffLine<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;\\0&#39;</span><span class="token punctuation">;</span>  <span class="token comment">// Clears the next array buffLine</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;   &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;  &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    i<span class="token operator">++</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;  %s\\n&quot;</span><span class="token punctuation">,</span> buffLine<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">char</span> <span class="token operator">*</span>end<span class="token punctuation">;</span>\n  <span class="token keyword">int</span> i<span class="token punctuation">;</span>\n\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;argc = %p %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>argc<span class="token punctuation">,</span> argc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;argv = %p\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;argv[%d] = %p %s\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;environ = %p\\n&quot;</span><span class="token punctuation">,</span> environ<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> environ<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;environ[%d] = %p %s\\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> environ<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> environ<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\n\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>end <span class="token operator">=</span> environ<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">*</span>end <span class="token operator">!=</span> <span class="token number">0x00</span><span class="token punctuation">;</span> end<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">hexDump</span><span class="token punctuation">(</span><span class="token string">&quot;begin from argv[0]&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end <span class="token operator">-</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',33),p={render:function(n,s){return t}}}}]);