(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[196],{6543:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-4df4667b",path:"/others/lua-implemention-type-value.html",title:"Lua实现原理 - 类型与值",lang:"en-US",frontmatter:{title:"Lua实现原理 - 类型与值",author:"Peter Wang",tags:["Lua","c"],date:"2020-09-27T13:17:14.000Z",draft:!1},excerpt:"",headers:[],filePathRelative:"others/lua-implemention-type-value.md",git:{updatedTime:1626591395e3,contributors:[]}}},949:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<p>Lua是巴西人发明的脚本语言,作者称之为穿过针孔的语言.体积非常小巧(Lua 5.3.1在Linux下编译后仅为546K),同时功能很强大(支持闭包,协程等).<br> 本文主要介绍它的值实现方式</p><p>Lua的虚拟机自5.0后是虚拟机运行是基于寄存器的.其他大部分解释性语言都是基于栈的(Python,Java).Lua全部采用C语言编写,可在多个平台下编译通过.作为一个嵌入式的语言,常作为大型程序的插件使用(比如Wireshark,Redis).<br> Lua和其他解释性语言一样,先将原文件编译为字节码.即一种虚拟机可&quot;读懂&quot;的数据形式.然后虚拟机循环读取每个字节码,并执行相应的操作.<br> 文中所有代码都指Lua 5.3.1,OS环境为CentOS7,同时例子中的代码做了增减,将宏展开或者删除掉一些与所讲内容关系不大的代码.</p><p>值与类型 在Lua里的总共实现了9种类型,具体如下：</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">nil</td><td style="text-align:left;">代表一个值不存在</td></tr><tr><td style="text-align:left;">boolean</td><td style="text-align:left;">代表逻辑判断的结果 包括true,false两个值</td></tr><tr><td style="text-align:left;">number</td><td style="text-align:left;">代表数字，可以是整数,也可以是浮点数.</td></tr><tr><td style="text-align:left;">lightuserdata</td><td style="text-align:left;">代表轻型用户数据，它简单地指向一个C指针</td></tr><tr><td style="text-align:left;">userdata</td><td style="text-align:left;">代表完全用户数据，它可以通过元表定义许多操作.</td></tr><tr><td style="text-align:left;">string</td><td style="text-align:left;">代表字符串</td></tr><tr><td style="text-align:left;">table</td><td style="text-align:left;">代表hash表和列表， 这块Lua设计得相当取巧,用一种类型同时支持Python里的dict(表示键值对)和Python里的list(数组).</td></tr><tr><td style="text-align:left;">function</td><td style="text-align:left;">代表Lua和C语言里的函数</td></tr><tr><td style="text-align:left;">thread</td><td style="text-align:left;">代表Lua内部实现的协程。 它并不是OS的原生线程, 它代表了一组执行序列. 虚拟机的字节码执行就是在它的栈上</td></tr></tbody></table><p>在解释性语言里, 值的实现上是自带类型的. 例如 <code>a = 10</code> 这样的语句表示将number类型的值为10的对象绑定到a上. 与C这种静态语言不同，变量名只是一个名字, 它可以通过<code>=</code>和任意类型的对象绑定。<br> 如下是Lua中对象的结构定义. 所有对象都用这个结构体表示.</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lua_TValue</span> <span class="token punctuation">{</span>\n  Value value_<span class="token punctuation">;</span> \n  <span class="token keyword">int</span> tt_<span class="token punctuation">;</span>\n<span class="token punctuation">}</span> TValue<span class="token punctuation">;</span> \n<span class="token keyword">union</span> Value <span class="token punctuation">{</span>\n  GCObject <span class="token operator">*</span>gc<span class="token punctuation">;</span>    <span class="token comment">/* collectable objects */</span>\n  <span class="token keyword">void</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>         <span class="token comment">/* light userdata */</span>\n  <span class="token keyword">int</span> b<span class="token punctuation">;</span>           <span class="token comment">/* booleans */</span>\n  lua_CFunction f<span class="token punctuation">;</span> <span class="token comment">/* light C functions */</span>\n  lua_Integer i<span class="token punctuation">;</span>   <span class="token comment">/* integer numbers */</span>\n  lua_Number n<span class="token punctuation">;</span>    <span class="token comment">/* float numbers */</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">/* 使用 union 可以节省空间,因为这几个字段不可能同时有效 */</span>\n</code></pre></div><p>其中<code>tt_</code>字段包含了类型信息. 低位0到3代表了类型. 4,5位则对类型细分. 比如字符串里又分为短字符串和长字符串. 比如function这个类型可分为c函数, Lua闭包和C闭包. 他们各自的调用方式或者行为都不同, 这样做的目的是可以进一步做优化.<br> 第6位表示该值是否由GC管理. 用户数据,boolean,c function,整数或者浮点数可以直接表示, 其他如string, table需要GC管理. 相比Python下是所有的类型都受GC管理, Lua则做了优化.这样GC压力小,自然性能好.</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token comment">/*\n** basic types\n*/</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LUA_TNIL</span>\t\t<span class="token expression"><span class="token number">0</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LUA_TBOOLEAN</span>\t\t<span class="token expression"><span class="token number">1</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LUA_TLIGHTUSERDATA</span>\t<span class="token expression"><span class="token number">2</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LUA_TNUMBER</span>\t\t<span class="token expression"><span class="token number">3</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LUA_TSTRING</span>\t\t<span class="token expression"><span class="token number">4</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LUA_TTABLE</span>\t\t<span class="token expression"><span class="token number">5</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LUA_TFUNCTION</span>\t\t<span class="token expression"><span class="token number">6</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LUA_TUSERDATA</span>\t\t<span class="token expression"><span class="token number">7</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LUA_TTHREAD</span>\t\t<span class="token expression"><span class="token number">8</span></span></span>\n\n<span class="token comment">/*\n** tags for Tagged Values have the following use of bits:\n** bits 0-3: actual tag (a LUA_T* value)\n** bits 4-5: variant bits\n** bit 6: whether value is collectable\n*/</span>\n<span class="token comment">/*\n** LUA_TFUNCTION variants:\n** 0 - Lua function\n** 1 - light C function\n** 2 - regular C function (closure)\n*/</span>\n<span class="token comment">/* Variant tags for functions */</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LUA_TLCL</span>\t<span class="token expression"><span class="token punctuation">(</span>LUA_TFUNCTION <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  </span><span class="token comment">/* Lua closure */</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LUA_TLCF</span>\t<span class="token expression"><span class="token punctuation">(</span>LUA_TFUNCTION <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  </span><span class="token comment">/* light C function */</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LUA_TCCL</span>\t<span class="token expression"><span class="token punctuation">(</span>LUA_TFUNCTION <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  </span><span class="token comment">/* C closure */</span></span>\n<span class="token comment">/* Variant tags for strings */</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LUA_TSHRSTR</span>\t<span class="token expression"><span class="token punctuation">(</span>LUA_TSTRING <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  </span><span class="token comment">/* short strings */</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LUA_TLNGSTR</span>\t<span class="token expression"><span class="token punctuation">(</span>LUA_TSTRING <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  </span><span class="token comment">/* long strings */</span></span>\n<span class="token comment">/* Variant tags for numbers */</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LUA_TNUMFLT</span>\t<span class="token expression"><span class="token punctuation">(</span>LUA_TNUMBER <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  </span><span class="token comment">/* float numbers */</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LUA_TNUMINT</span>\t<span class="token expression"><span class="token punctuation">(</span>LUA_TNUMBER <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  </span><span class="token comment">/* integer numbers */</span></span>\n<span class="token comment">/* Bit mark for collectable types */</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">BIT_ISCOLLECTABLE</span>\t<span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span></span></span>\n</code></pre></div><p><code>TValue</code>通过字段<code>tt_</code>字段可知道其型, 如果是<code>booleans</code>, 则直接取<code>TValue.b</code>. 如果是<code>light c function</code>,则取<code>TValue.f</code>. 如果是GC管理的对象, 则需要通过如下宏将类型为GCObject指针显性转换为相应类型的指针. 比如字符串的结构为<code>struct TString</code>, 当前有个<code>TValue</code>的指针p. 通过<code>p-&gt;tt_</code>判断该值是字符串, 则<code>GCUnion*(p-&gt;value_.gc)-&gt;ts</code> 则可以得到一个指向 struct TString结构的指针. 当然也可以将新生成的<code>struct TString</code>结构的指针转换为<code>GCObject</code>结构的指针, 放入<code>TValue</code></p><div class="language-c ext-c"><pre class="language-c"><code><span class="token operator">*</span><span class="token operator">*</span> Common Header <span class="token keyword">for</span> all collectable <span class="token function">objects</span> <span class="token punctuation">(</span>in macro form<span class="token punctuation">,</span> to be\n<span class="token operator">*</span><span class="token operator">*</span> included in other objects<span class="token punctuation">)</span>\n<span class="token operator">*</span><span class="token operator">/</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CommonHeader</span>\t<span class="token expression">GCObject <span class="token operator">*</span>next<span class="token punctuation">;</span> lu_byte tt<span class="token punctuation">;</span> lu_byte marked</span></span>\n<span class="token comment">/*\n** Common type has only the common header\n*/</span>\n<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">GCObject</span> <span class="token punctuation">{</span>\n  CommonHeader<span class="token punctuation">;</span>\n<span class="token punctuation">}</span> GCObject<span class="token punctuation">;</span>\n<span class="token comment">/*\n** Union of all collectable objects (only for conversions)\n*/</span>\n<span class="token keyword">union</span> GCUnion <span class="token punctuation">{</span>\n  GCObject gc<span class="token punctuation">;</span>  <span class="token comment">/* common header */</span>\n  <span class="token keyword">struct</span> <span class="token class-name">TString</span> ts<span class="token punctuation">;</span>\n  <span class="token keyword">struct</span> <span class="token class-name">Udata</span> u<span class="token punctuation">;</span>\n  <span class="token keyword">union</span> Closure cl<span class="token punctuation">;</span>\n  <span class="token keyword">struct</span> <span class="token class-name">Table</span> h<span class="token punctuation">;</span>\n  <span class="token keyword">struct</span> <span class="token class-name">Proto</span> p<span class="token punctuation">;</span>\n  <span class="token keyword">struct</span> <span class="token class-name">lua_State</span> th<span class="token punctuation">;</span>  <span class="token comment">/* thread */</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">cast</span><span class="token expression"><span class="token punctuation">(</span>t<span class="token punctuation">,</span> exp<span class="token punctuation">)</span>\t<span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">cast_u</span><span class="token expression"><span class="token punctuation">(</span>o<span class="token punctuation">)</span>\t<span class="token function">cast</span><span class="token punctuation">(</span><span class="token keyword">union</span> GCUnion <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>\n\n<span class="token comment">/* macros to convert a GCObject into a specific value */</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">gco2ts</span><span class="token expression"><span class="token punctuation">(</span>o<span class="token punctuation">)</span>  </span><span class="token punctuation">\\</span>\n\t<span class="token expression"><span class="token function">check_exp</span><span class="token punctuation">(</span><span class="token function">novariant</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token operator">-&gt;</span>tt<span class="token punctuation">)</span> <span class="token operator">==</span> LUA_TSTRING<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">cast_u</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>ts<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>\n   \n<span class="token comment">/* macro to convert a Lua object into a GCObject */</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">obj2gco</span><span class="token expression"><span class="token punctuation">(</span>v<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>\n\t<span class="token expression"><span class="token function">check_exp</span><span class="token punctuation">(</span><span class="token function">novariant</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">-&gt;</span>tt<span class="token punctuation">)</span> <span class="token operator">&lt;</span> LUA_TDEADKEY<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token function">cast_u</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">-&gt;</span>gc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>\n</code></pre></div><p>字符串在Lua里也是zero-terminated的. 所以可以利用c标准库的各种字符串操作函数.</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token comment">/*\n** Header for string value; string bytes follow the end of this structure\n** (aligned according to &#39;UTString&#39;; see next).\n*/</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CommonHeader</span>\t<span class="token expression">GCObject <span class="token operator">*</span>next<span class="token punctuation">;</span> lu_byte tt<span class="token punctuation">;</span> lu_byte marked</span></span>\n<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TString</span> <span class="token punctuation">{</span>\n  CommonHeader<span class="token punctuation">;</span>\n  lu_byte extra<span class="token punctuation">;</span>  <span class="token comment">/* reserved words for short strings; &quot;has hash&quot; for longs */</span>\n  lu_byte shrlen<span class="token punctuation">;</span>  <span class="token comment">/* length for short strings */</span>\n  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>\n  <span class="token keyword">union</span> <span class="token punctuation">{</span>\n    <span class="token class-name">size_t</span> lnglen<span class="token punctuation">;</span>  <span class="token comment">/* length for long strings */</span>\n    <span class="token keyword">struct</span> <span class="token class-name">TString</span> <span class="token operator">*</span>hnext<span class="token punctuation">;</span>  <span class="token comment">/* linked list for hash table */</span>\n  <span class="token punctuation">}</span> u<span class="token punctuation">;</span>\n<span class="token punctuation">}</span> TString<span class="token punctuation">;</span>\n<span class="token comment">/*\n** Ensures that address after this type is always fully aligned.\n*/</span>\n<span class="token keyword">typedef</span> <span class="token keyword">union</span> UTString <span class="token punctuation">{</span>\n  L_Umaxalign dummy<span class="token punctuation">;</span>  <span class="token comment">/* ensures maximum alignment for strings */</span>\n  TString tsv<span class="token punctuation">;</span>\n<span class="token punctuation">}</span> UTString<span class="token punctuation">;</span>\n</code></pre></div><p>字符串长度有专门的字段. 这样取长度时就很快. 不用再计算. 如下代码可以看到,真正储存字符的数据并不是紧跟在struct TString后. 这是为了保证指向第一个字符的指针是对齐的. 参见上面的结构体 union UTString</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">cast</span><span class="token expression"><span class="token punctuation">(</span>t<span class="token punctuation">,</span> exp<span class="token punctuation">)</span>\t<span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>\n<span class="token comment">/*\n** Get the actual string (array of bytes) from a &#39;TString&#39;.\n** (Access to &#39;extra&#39; ensures that value is really a &#39;TString&#39;.)\n*/</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">getaddrstr</span><span class="token expression"><span class="token punctuation">(</span>ts<span class="token punctuation">)</span>\t<span class="token punctuation">(</span><span class="token function">cast</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>UTString<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">getstr</span><span class="token expression"><span class="token punctuation">(</span>ts<span class="token punctuation">)</span>  </span><span class="token punctuation">\\</span>\n  <span class="token expression"><span class="token function">check_exp</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token operator">-&gt;</span>extra<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cast</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token function">getaddrstr</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>\n<span class="token comment">/*\n** creates a new string object\n*/</span>\n<span class="token keyword">static</span> TString <span class="token operator">*</span><span class="token function">createstrobj</span> <span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token class-name">size_t</span> l<span class="token punctuation">,</span>\n                              <span class="token keyword">int</span> tag<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  TString <span class="token operator">*</span>ts<span class="token punctuation">;</span>\n  GCObject <span class="token operator">*</span>o<span class="token punctuation">;</span>\n  <span class="token class-name">size_t</span> totalsize<span class="token punctuation">;</span>  <span class="token comment">/* total size of TString object */</span>\n  totalsize <span class="token operator">=</span> <span class="token function">sizelstring</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  o <span class="token operator">=</span> <span class="token function">luaC_newobj</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> totalsize<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  ts <span class="token operator">=</span> <span class="token function">gco2ts</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  ts<span class="token operator">-&gt;</span>hash <span class="token operator">=</span> h<span class="token punctuation">;</span>\n  ts<span class="token operator">-&gt;</span>extra <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token function">getaddrstr</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> l <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">getaddrstr</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;\\0&#39;</span><span class="token punctuation">;</span>  <span class="token comment">/* ending 0 */</span>\n  <span class="token keyword">return</span> ts<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>这里Lua对短字符做了优化处理. 如果需要生成的字符串长度小于或者等于40(可在编译时调整), 则该字符串属于短字符串.Lua里所有的短字符串都保存在一个基于链表的哈希表里. 这样当新创建一个短字符串时,先检查该表有没有.有就直接利用,返回表中的字符指针. 没有则新建并放入该哈希表. 新的short string因为要放入到哈希表里,所以顺带hash过了. long string在新建时为加速并没有立即hash. 等以后有需要时再计算 判断两个字符串是否相等时,则很简单: 一个short,一个long则不同. 都是short时,直接比指针地址即可(因为所有short string在系统中只存在一份) 都是long时,则对比长度, 先用memcmp比较</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token comment">/*\n** new string (with explicit length)\n*/</span>\nTString <span class="token operator">*</span><span class="token function">luaS_newlstr</span> <span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token class-name">size_t</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> LUAI_MAXSHORTLEN<span class="token punctuation">)</span>  <span class="token comment">/* short string? */</span>\n    <span class="token keyword">return</span> <span class="token function">internshrstr</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> str<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    TString <span class="token operator">*</span>ts<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span>MAX_SIZE <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>TString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token function">luaM_toobig</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ts <span class="token operator">=</span> <span class="token function">createstrobj</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> str<span class="token punctuation">,</span> l<span class="token punctuation">,</span> LUA_TLNGSTR<span class="token punctuation">,</span> <span class="token function">G</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token operator">-&gt;</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ts<span class="token operator">-&gt;</span>u<span class="token punctuation">.</span>lnglen <span class="token operator">=</span> l<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> ts<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>hash计算时需要seed. 当进程运行时,会生成如下的运算生成一个随机数作为种子. 该值会赋给g-&gt;seed. 在新建状态机时产生. 整个运行过程中不会再改变</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">luai_makeseed</span><span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">)</span>\t\t<span class="token function">cast</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>\n<span class="token comment">/*\n** Compute an initial seed as random as possible. Rely on Address Space\n** Layout Randomization (if present) to increase randomness..\n*/</span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">addbuff</span><span class="token expression"><span class="token punctuation">(</span>b<span class="token punctuation">,</span>p<span class="token punctuation">,</span>e<span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>\n  <span class="token expression"><span class="token punctuation">{</span> <span class="token class-name">size_t</span> t <span class="token operator">=</span> <span class="token function">cast</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>\n    <span class="token expression"><span class="token function">memcpy</span><span class="token punctuation">(</span>buff <span class="token operator">+</span> p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span></span>\n\n<span class="token keyword">static</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">makeseed</span> <span class="token punctuation">(</span>lua_State <span class="token operator">*</span>L<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">luai_makeseed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token function">addbuff</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> p<span class="token punctuation">,</span> L<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* heap variable */</span>\n  <span class="token function">addbuff</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* local variable */</span>\n  <span class="token function">addbuff</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> p<span class="token punctuation">,</span> luaO_nilobject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* global variable */</span>\n  <span class="token function">addbuff</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>lua_newstate<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* public function */</span>\n  <span class="token function">lua_assert</span><span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">luaS_hash</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> p<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">luaS_hash</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token class-name">size_t</span> l<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> seed<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> h <span class="token operator">=</span> seed <span class="token operator">^</span> <span class="token function">cast</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">size_t</span> l1<span class="token punctuation">;</span>\n  <span class="token class-name">size_t</span> step <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;&gt;</span> LUAI_HASHLIMIT<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>l1 <span class="token operator">=</span> l<span class="token punctuation">;</span> l1 <span class="token operator">&gt;=</span> step<span class="token punctuation">;</span> l1 <span class="token operator">-=</span> step<span class="token punctuation">)</span>\n    h <span class="token operator">=</span> h <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h<span class="token operator">&lt;&lt;</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>h<span class="token operator">&gt;&gt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">cast_byte</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>l1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> h<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>可以看到对string做hash计算时, 并没有对每个字符进行计算, 至多会对其中的 2^5 个字符进行计算</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token function">luaS_hash</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token class-name">size_t</span> l<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> seed<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> h <span class="token operator">=</span> seed <span class="token operator">^</span> <span class="token function">cast</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">size_t</span> l1<span class="token punctuation">;</span>\n  <span class="token class-name">size_t</span> step <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;&gt;</span> LUAI_HASHLIMIT<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment">/* LUAI_HASHLIMIT 默认是 5 */</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>l1 <span class="token operator">=</span> l<span class="token punctuation">;</span> l1 <span class="token operator">&gt;=</span> step<span class="token punctuation">;</span> l1 <span class="token operator">-=</span> step<span class="token punctuation">)</span>\n    h <span class="token operator">=</span> h <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h<span class="token operator">&lt;&lt;</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>h<span class="token operator">&gt;&gt;</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">cast_byte</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>l1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> h<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>init和bool类型,包括指针(可转换为整数)直接使用值为hash值</p><p>Lua中的table不仅支持键值对这样的结构,还支持以索引值来访问的数组. 可以说将两者合二为1. 少了一个数据结构,但功能上仍一样. 哈希表主要是基于开放地址, 这样所有数据都在连续排在一起, 避免内存碎化. 内存效率高</p>',22),p={render:function(n,s){return t}}}}]);