(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[435],{6553:(e,t,c)=>{"use strict";c.r(t),c.d(t,{data:()=>n});const n={key:"v-05efc152",path:"/network/tcp.html",title:"TCP协议栈笔记",lang:"en-US",frontmatter:{title:"TCP协议栈笔记",author:"Peter Wang",tags:["tcp","net stack"],date:"2019-03-24T06:31:29.000Z",draft:!1},excerpt:"",headers:[{level:3,title:"TCP处理与内核参数",slug:"tcp处理与内核参数",children:[]},{level:3,title:"TCP半队列和全队列监控",slug:"tcp半队列和全队列监控",children:[]},{level:3,title:"TCP丢包一些排查方法",slug:"tcp丢包一些排查方法",children:[]},{level:3,title:"net.ipv4.tcp_tw_recycle = 1",slug:"net-ipv4-tcp-tw-recycle-1",children:[]},{level:3,title:"tcp部分参数使用介绍",slug:"tcp部分参数使用介绍",children:[]}],filePathRelative:"network/tcp.md",git:{updatedTime:1626591395e3,contributors:[]}}},8543:(e,t,c)=>{"use strict";c.r(t),c.d(t,{default:()=>s});const n=(0,c(6252).uE)('<p>记录自己对TCP协议栈的学习心得</p><h3 id="tcp处理与内核参数" tabindex="-1"><a class="header-anchor" href="#tcp处理与内核参数" aria-hidden="true">#</a> TCP处理与内核参数</h3><ol><li>client发送<code>syn</code>报文后,tcp状态为 syn-sent. 如果对端没有返回syn+ack, 则尝试发送<code>net.ipv4.tcp_syn_retries</code>次. 每次间隔2,4,8s....</li><li>server收到<code>syn</code>后,状态变为 syn-recv, 放到半队列里,同时返回syn-ack. 这个队列的大小为 net.ipv4.tcp_max_syn_backlog. 是个全局的参数. 如果这个半队列满,则直接丢弃syc.</li><li>当server收到ack后, 会检查全队列是否能放下. 这个大小为 min(backlog, net.core.somaxconn). 如果队列未满,则放进去, 状态变为 ESTABLISHED. 系统调用accept就是从这个全队列取已经三次握手成功的socket<br> 如果全队列满:<br> 当net.ipv4.tcp_abort_on_overflow为0, 则丢弃ack, 假定自己没有收到ack, 所以重发syn+ack, 重试次数为net.ipv4.tcp_synack_retries.<br> 当net.ipv4.tcp_abort_on_overflow为1, 则收到ack后直接发rst终止连接</li><li>先close socket的会进入time-wait状态, 这个过2MSL会自动消失.<br> client和server同时打开时间戳时: <ul><li>net.ipv4.tcp_tw_recycle = 1, 可快速回收进入time-wait状态的socket. 对客户端和服务端都有效. 但在nat网络下可能会将正常的syn报文丢弃</li><li>net.ipv4.tcp_tw_reuse = 1, 可快速重用time-wait的socket. 只对客户端有效.作为客户端因为有端口65535问题，TIME_OUT过多直接影响处理能力，打开tw_reuse 即可解决</li><li>tcp_max_tw_buckets设置time-wait的上限, 一旦超过OS会立即清除.</li></ul></li><li>当收到fin后, 回复ack后 socket进入close-wait状态. 此时需要程序运行close才会下发fin报文. 完成4次关闭</li><li>假设发送fin后, 没有收到对端的fin, 则socket进入 fin-wait-2状态. 如果一直没有收到对端的fin, 则经过<code>net.ipv4.tcp_fin_timeout</code>秒后自动消失</li></ol><h3 id="tcp半队列和全队列监控" tabindex="-1"><a class="header-anchor" href="#tcp半队列和全队列监控" aria-hidden="true">#</a> TCP半队列和全队列监控</h3><p>半队列如果丢包, 可检查如下值是否增长:<br><code>netstat -s</code> 观察<code>SYNs to LISTEN sockets dropped</code><br><code>nstat</code> 观察 <code>ListenDrops</code></p><p>全队列如果丢包, 可检查如下值是否增长:<br><code>netstat -s</code> 观察<code>times the listen queue of a socket overflowed</code><br><code>nstat</code> 观察 <code>TcpExtListenOverflows</code><br> 两个工具的信息都取自<code>/proc/net/netstat</code></p><h3 id="tcp丢包一些排查方法" tabindex="-1"><a class="header-anchor" href="#tcp丢包一些排查方法" aria-hidden="true">#</a> TCP丢包一些排查方法</h3><p>使用perf 跟踪 skb:kfree_skb, 然后看堆栈<br> https://jvns.ca/blog/2017/09/05/finding-out-where-packets-are-being-dropped/</p><h3 id="net-ipv4-tcp-tw-recycle-1" tabindex="-1"><a class="header-anchor" href="#net-ipv4-tcp-tw-recycle-1" aria-hidden="true">#</a> net.ipv4.tcp_tw_recycle = 1</h3><p>在nat场景下会产生丢包. 高内核已经删除这个参数<br> https://github.com/torvalds/linux/commit/4396e46187ca5070219b81773c4e65088dac50cc<br> 对应的计数项为<code>TcpExtPAWSPassive</code></p><h3 id="tcp部分参数使用介绍" tabindex="-1"><a class="header-anchor" href="#tcp部分参数使用介绍" aria-hidden="true">#</a> tcp部分参数使用介绍</h3><p>tcp keepalive默认一些参数如下, 应用程序里也可以修改. enable该特性必须是在程序里设置. OS没有全部的打开该功能的参数</p><div class="language-bash ext-sh"><pre class="language-bash"><code>$ sysctl -a <span class="token operator">|</span> <span class="token function">grep</span> keep\nnet.ipv4.tcp_keepalive_intvl <span class="token operator">=</span> <span class="token number">75</span>\nnet.ipv4.tcp_keepalive_probes <span class="token operator">=</span> <span class="token number">9</span>\nnet.ipv4.tcp_keepalive_time <span class="token operator">=</span> <span class="token number">7200</span>\n</code></pre></div><p>Nagle算法主要在数据包很小很小时,先不发,等累积到一定程度再发出去.默认是打开的.应用程序可以通过TCP_NODELAY 选项来关闭这个算法, OS没有全局的关闭该算法的参数</p><p>TCP的延迟确认的策略：<br> 当有响应数据要发送时，ACK 会随着响应数据一起立刻发送给对方<br> 当没有响应数据要发送时，ACK 将会延迟一段时间，以等待是否有响应数据可以一起发送<br> 如果在延迟等待发送 ACK 期间，对方的第二个数据报文又到达了，这时就会立刻发送 ACK</p><p>最大延迟确认时间是 200 ms （1000/5）<br> 最短延迟确认时间是 40 ms （1000/25）</p><p>tcp_retries2 指定超时重传的次数, 默认是15次, 大概是16分钟左右</p><p>比如已经建立的TCP连接, 因某些原因(防火墙,中间网络中断)导致发往另一方的包, 一直没有收到回包. 这个RTO超时后开始重传.<br> RTO最小是 200ms, 最大是 2分钟. 每次发起重传的间隔为 200ms, 400ms, 800ms 逐渐递增.</p><h1 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考:</h1><p>https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt<br> https://www.jianshu.com/p/0d6243402987<br> https://www.codedump.info/post/20190227-tcp/<br> https://blog.packagecloud.io/eng/2016/06/22/monitoring-tuning-linux-networking-stack-receiving-data<br> https://blog.packagecloud.io/eng/2017/02/06/monitoring-tuning-linux-networking-stack-sending-data<br> https://lwn.net/Articles/362339/<br> https://access.redhat.com/solutions/30453<br> https://loicpefferkorn.net/2016/03/linux-network-metrics-why-you-should-use-nstat-instead-of-netstat/<br> https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt<br> https://perthcharles.github.io/2015/09/07/wiki-tcp-retries/<br> https://pracucci.com/linux-tcp-rto-min-max-and-tcp-retries2.html</p>',20),s={render:function(e,t){return n}}}}]);