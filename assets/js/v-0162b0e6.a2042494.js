(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[114],{1299:(n,t,e)=>{"use strict";e.r(t),e.d(t,{data:()=>i});const i={key:"v-0162b0e6",path:"/algorithm/binary-index-tree.html",title:'树状数组和相关题解"',lang:"en-US",frontmatter:{title:'树状数组和相关题解"',author:"Peter Wang"},excerpt:"",headers:[],filePathRelative:"algorithm/binary-index-tree.md",git:{updatedTime:1639312953e3,contributors:[]}}},566:(n,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>r});const i=(0,e(6252).uE)('<h1 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h1><p>并查集的go实现</p><div class="language-golang ext-golang"><pre class="language-golang"><code>type BinaryIndexedTree struct {\n\ttree     []int\n\tcapacity int\n}\n\nfunc (bit *BinaryIndexedTree) Add(index int, val int) {\n\tfor ; index &lt;= bit.capacity; index += lowbit(index) {\n\t\tbit.tree[index] += val\n\t}\n}\n\nfunc (bit *BinaryIndexedTree) Query(index int) int {\n\tsum := 0\n\tfor ; index &gt; 0; index -= lowbit(index) {\n\t\tsum += bit.tree[index]\n\t}\n\treturn sum\n}\n\nfunc (bit *BinaryIndexedTree) InitWithNums(nums []int) {\n\tbit.tree, bit.capacity = make([]int, len(nums)+1), len(nums)\n\tfor i := 1; i &lt;= len(nums); i++ {\n\t\tfor j := i - 1; j &gt;= i-lowbit(i); j-- {\n\t\t\tbit.tree[i] += nums[j]\n\t\t}\n\t}\n}\n\nfunc lowbit(x int) int {\n\treturn x &amp; -x\n}\n</code></pre></div><h1 id="_307-区域和检索-数组可修改" tabindex="-1"><a class="header-anchor" href="#_307-区域和检索-数组可修改" aria-hidden="true">#</a> 307. 区域和检索 - 数组可修改</h1><div class="language-golang ext-golang"><pre class="language-golang"><code>type NumArray struct {\n    bit BinaryIndexedTree\n    nums []int\n}\n\n\nfunc Constructor(nums []int) NumArray {\n    n := NumArray{}\n    n.bit.InitWithNums(nums)\n    n.nums = nums\n    return n\n}\n\n\nfunc (this *NumArray) Update(index int, val int)  {\n\n    this.bit.Add(index + 1, val - this.nums[index] )\n    this.nums[index] = val\n\n}\n\n\nfunc (this *NumArray) SumRange(left int, right int) int {\n    return this.bit.Query(right+1) - this.bit.Query(left)\n}\n</code></pre></div><h1 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h1><p>https://segmentfault.com/a/1190000022952886</p>',7),r={render:function(n,t){return i}}}}]);