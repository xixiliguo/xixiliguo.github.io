(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[644],{3059:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-2a84035a",path:"/golang/strings-algorithm-golang.html",title:"从Go标准库看字符串匹配算法",lang:"en-US",frontmatter:{title:"从Go标准库看字符串匹配算法",tags:["golang","KMP","BM","Hash"],date:"2017-10-02T01:48:04.000Z",draft:!1},excerpt:"",headers:[],filePathRelative:"golang/strings-algorithm-golang.md",git:{updatedTime:1626591395e3,contributors:[]}}},7553:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>r});var t=a(6252);const p=(0,t.uE)('<p>Go的标准库本身质量非常高，本文主要深入strings库，从源代码中探查字符串匹配常用算法的具体实现</p><p>我们先看一个简单的例子开始。</p><p>在目标字符串中检查是否有子串等于匹配文本,这是非常常见的操作. 最容易让人想到的算法就是从目标字符串第一位开始，逐个字符与待匹配文本比较.匹配成功则指针右移继续比较，要不然从目标文本的第二位开始和待匹配文本继续逐个比较。如果指针先到达待匹配文本末尾，则匹配成功，要不然匹配失败。该算法称之为朴素算法，非常容易理解,但效率也比较慢.具体实现如下：</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span>\n<span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>pat<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>txt<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pat<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> i<span class="token punctuation">;</span>\n    <span class="token comment">// 只需要遍历目标文本 N-M 次， 因为从目标文本的 N-M 位开始的子串，长度永远小于 M， 所以不会匹配成功</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N <span class="token operator">-</span> M<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  \n    <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> j<span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>txt<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> pat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> M<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n           <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Pattern found at index %d \\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n   <span class="token keyword">char</span> <span class="token operator">*</span>txt <span class="token operator">=</span> <span class="token string">&quot;AABAACAADAABAAABAA&quot;</span><span class="token punctuation">;</span>\n   <span class="token keyword">char</span> <span class="token operator">*</span>pat <span class="token operator">=</span> <span class="token string">&quot;AABA&quot;</span><span class="token punctuation">;</span>\n   <span class="token function">search</span><span class="token punctuation">(</span>pat<span class="token punctuation">,</span> txt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',4),o=(0,t.Uk)("\bGo 标准库中的"),e=(0,t.Wm)("code",null,"strings.Contains",-1),c=(0,t.Uk)("函数使用了"),u={href:"https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Uk)("Rabin-Karp算法"),k=(0,t.Uk)(", 主要思想如下:"),i=(0,t.uE)('<p>假设匹配文本的长度为M,目标文本的长度为N</p><ol><li>计算匹配文本的hash值</li><li>计算目标字符串中每个长度为M的子串的hash值（需要计算N-M+1次）</li><li>比较hash值, 如果hash值不同，字符串必然不匹配，如果hash值相同，还需要使用朴素算法再次判断</li></ol><p>步骤2中每次都要重新计算hash, Rabin-Karp算法的优点在于设计了一个特别的hash算法,使其在计算下一个子串的hash时可以利用之前的hash结果, 以达到加速计算的效果。将每一个字节看作数字, 选择一个比较大的质数作为base. 字节的值是包含在基数之内的</p><p>举例说明：<br> 文本为&quot;abracadabra&quot;,base为101,那么 hash(&quot;abr&quot;) = 97 * 101的2次方 + 98 * 101的1次方 + 114 * 101的0次方= 999509<br> 下一个子串 &quot;bra&quot;的hash值为 98 * 101的2次方 + 114 * 101的1次方 + 97 * 101的0次方. 我们可以利用之前&quot;abr&quot;的hash值, 写成:</p><blockquote><p>//　　　　　　　base　　old hash　　　　　　new &#39;a&#39;　　　　old &#39;a&#39; * base<br> hash(&quot;bra&quot;) = 1011 * hash(&quot;abr&quot;) + (97 × 101的0次方) - (97 × 101的3次方)</p></blockquote><p>可以看出hash算法里要点是确立一个非常大的数字作为base\b,同时根据子串长度得到乘数因子(上述的 101的3次方，其实就是base的len(待匹配文本)次方).</p><p><code>src/strings/strings_amd64.go</code>相关代码注释</p><div class="language-go ext-go"><pre class="language-go"><code><span class="token comment">// 选择非常大的一个质数16777619 作为 base </span>\n<span class="token keyword">const</span> primeRK <span class="token operator">=</span> <span class="token number">16777619</span>   \n\n<span class="token comment">// hashStr \b返回子串的hash值和乘数因子</span>\n<span class="token keyword">func</span> <span class="token function">hashStr</span><span class="token punctuation">(</span>sep <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">uint32</span><span class="token punctuation">,</span> <span class="token builtin">uint32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\thash <span class="token operator">:=</span> <span class="token function">uint32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n\t<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>sep<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n\t\thash <span class="token operator">=</span> hash<span class="token operator">*</span>primeRK <span class="token operator">+</span> <span class="token function">uint32</span><span class="token punctuation">(</span>sep<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">//计算hash值</span>\n\t<span class="token punctuation">}</span>\n    <span class="token comment">// 计算(最高位 + 1)位的乘数因子, 使用位移, 没有使用 i--, 可以有效减少循环次数. i &gt;&gt;=1 相当于遍历二进制的每一位</span>\n\t<span class="token keyword">var</span> pow<span class="token punctuation">,</span> sq <span class="token builtin">uint32</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> primeRK\n\t<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>sep<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&gt;&gt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> i<span class="token operator">&amp;</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\t\tpow <span class="token operator">*=</span> sq\n\t\t<span class="token punctuation">}</span>\n\t\tsq <span class="token operator">*=</span> sq\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> hash<span class="token punctuation">,</span> pow\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Index 返回sep在s里第一次匹配时的index, 无法匹配则返回-1.</span>\n<span class="token keyword">func</span> <span class="token function">Index</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sep <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>\n\tn <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>sep<span class="token punctuation">)</span>\n    <span class="token comment">// 先分析一些常见情况, 起到进一步加速的效果</span>\n\t<span class="token keyword">switch</span> <span class="token punctuation">{</span>   \n\t<span class="token keyword">case</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>\n\t\t<span class="token keyword">return</span> <span class="token number">0</span>\n\t<span class="token keyword">case</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment">//如果为一个字节,则调用IndixByte(汇编语言)</span>\n\t\t<span class="token keyword">return</span> <span class="token function">IndexByte</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sep<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\t<span class="token keyword">case</span> n <span class="token operator">&lt;=</span> shortStringLen<span class="token punctuation">:</span>  <span class="token comment">//如果sep的长度小于31且大于1, 则使用汇编代码(也是一种优化). </span>\n\t\t<span class="token keyword">return</span> <span class="token function">indexShortStr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sep<span class="token punctuation">)</span>  \n\t<span class="token keyword">case</span> n <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>  \n\t\t<span class="token keyword">if</span> sep <span class="token operator">==</span> s <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> <span class="token number">0</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>\n\t<span class="token keyword">case</span> n <span class="token operator">&gt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>\n\t\t<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">// 使用Rabin-Karp\b算法匹配</span>\n    <span class="token comment">// 步骤1 初始计算待匹配的文本的hash值和乘数因子, </span>\n\thashsep<span class="token punctuation">,</span> pow <span class="token operator">:=</span> <span class="token function">hashStr</span><span class="token punctuation">(</span>sep<span class="token punctuation">)</span>\n\t<span class="token keyword">var</span> h <span class="token builtin">uint32</span>\n\t<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n\t\th <span class="token operator">=</span> h<span class="token operator">*</span>primeRK <span class="token operator">+</span> <span class="token function">uint32</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">// 步骤2 计算长度跟sep一样的s子串的hash值</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">if</span> h <span class="token operator">==</span> hashsep <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> sep <span class="token punctuation">{</span>\n\t\t<span class="token keyword">return</span> <span class="token number">0</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">for</span> i <span class="token operator">:=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 利用先前的hash值, 计算新的hash值 </span>\n\t\th <span class="token operator">*=</span> primeRK  <span class="token comment">// \b乘以base</span>\n\t\th <span class="token operator">+=</span> <span class="token function">uint32</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 加上下一个字符的 hash 值</span>\n\t\th <span class="token operator">-=</span> pow <span class="token operator">*</span> <span class="token function">uint32</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 减去先前子串的第一个字符的hash值</span>\n\t\ti<span class="token operator">++</span>\n        <span class="token comment">// 如果hash相等则继续使用朴素算法比较, 如果hash不一致,则直接用下一个匹配</span>\n\t\t<span class="token keyword">if</span> h <span class="token operator">==</span> hashsep <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span>n<span class="token punctuation">:</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sep <span class="token punctuation">{</span>   \n\t\t\t<span class="token keyword">return</span> i <span class="token operator">-</span> n\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>strings库里还实现了BM算法， 在这之前，我们先来看另一个非常经典的KMP算法</p><p>假设检查bacbababaabcbab是否包含abababca, 此时发现第6位不一样</p><div class="language-text ext-text"><pre class="language-text"><code>bacbababaabcbab   \n    abababca\n         |\n       第六位\n\n朴素算法：\nbacbababaabcbab   \n     abababca\n     |\n   移动一位后开始重新比较\n\nKMP算法：\nbacbababaabcbab   \n      abababca\n      |\n直接移动两位后开始重新比较\n</code></pre></div><p>如果按朴素算法则按上面所示需要搜索词移一位后重新从第一位开始匹配。仔细想想, 前5个字符ababa已经匹配成功,也就是我们已经知道双方的文本, 通过提前的计算，可以多移几位, 而不仅仅移一位. 这样可以加快搜索</p><p>KMP算法的主要原理如下:<br> s为目标文本, 长度为m<br> p为搜索词,长度为n<br> 假设p[i]与s[x]匹配失败,那么p[i-1]与s[x-1]是匹配成功的, 则试图找到一个索引 j, 使得p[0:j] = p[i-j-1:i-1] (p[0:j] 包含p[j])<br> 如果有则s[x]继续与p[j+1]进行比较, 相当于搜索词移动i-j-1位<br> 无则s[x]与p[0]比较. (具体代码实现时无可以表示为-1, 这样+1 后正好为0) 相当于搜索词移动i位</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>next<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">int</span> i<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> k<span class="token punctuation">;</span>\n    <span class="token comment">/*第一次字符前面没有索引了, 算corner case, 直接赋值为-1*/</span>\n    next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token comment">/* 循环每一个索引, 并计算next值 */</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">&#39;\\0&#39;</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">/* \b获取前一个索引的next值 */</span>\n        k <span class="token operator">=</span> next<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token comment">/* \b当p[i] != p[k + 1]时, 则令 k = next[k], 直到相等或者k == -1 退出*/</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> p<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            k <span class="token operator">=</span> next<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">/*  1. p[i] == p[k + 1] 则 i对应的next值为 ++k\n            2. 无索引时, k= -2, 则++k正好为-1\n        */</span>\n        next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>k<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">int</span> <span class="token function">kmp</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span>t<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/*next为数组, 存储搜索词里每一个索引对应的next值, 使得 p[0:next[i]] == p[i-j-1:i-1]*/</span>\n    <span class="token keyword">int</span> next<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token function">cal</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>\n    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">&#39;\\0&#39;</span> <span class="token operator">&amp;&amp;</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">&#39;\\0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">/* 值相等, 则指针 i, j 都递增 */</span>\n            i<span class="token operator">++</span><span class="token punctuation">;</span>\n            j<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                j<span class="token operator">++</span><span class="token punctuation">;</span>\n                <span class="token keyword">continue</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            i <span class="token operator">=</span> next<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&#39;\\0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>Go语言里在 strings/search.go 里使用了Boyer-Moore\b字符串搜索算法, 这个思想和KMP类似,都是根据Pattern自身计算出移动的步数. 有两个优化点:</p><ol><li>BM算法是从后向前逐渐匹配.</li><li>kmp里的通过已匹配的文本增加移动步数的叫做好规则，那么BM里同时还增加了坏规则</li></ol><p>假定\bText为&quot;HERE IS A SIMPLE EXAMPLE&quot;，Pattern为&quot;EXAMPLE&quot;。<br> 当T[i] != P[j], P[j]右边都匹配时时, 具体的移动规则如下:<br> 坏字符规则: 此时T[i]定义为坏字符, 如果P[0..j-1]中包含T[i]这个字符, 则移动T使坏字符与相等的字符对齐, 如果不包含,则直接移动len(P)</p><div class="language-text ext-text"><pre class="language-text"><code>HERE IS A SIMPLE EXAMPLE\n             |\n       EXAMPLE\n\n此时P为坏字符, 因EXAMPLE包含P, 则T的i指针右移二位使之对齐，然后重新开始从P的末端继续匹配（下面打X处）.\n\nHERE IS A SIMPLE EXAMPLE\n             | X\n         EXAMPLE\n\n如下场景，T中的M与P中的E不匹配, 按Go的代码实现，是移动两位（取该字符到P末尾的最短距离），没完全按上面的规则实现\n大家是不是发现没有跳跃前进，反而匹配又倒回到之前已完成的匹配过程。 Go代码这么做是为了实现简单。 \n因为还有好规则可以保证最终的移动步数是正确的\nABCADADEEFXYZ\n   | \n AYEDADE\n移动为\n  ABCADADEEFXYZ\n     | X   \n AYEDADE\n\n</code></pre></div><p>好后缀规则: 当发生不匹配时,之前已经匹配成功的,称之为好字符. 如下I和A不匹配, 后面的MPLE就是好后缀. 首先检查P里是否好后缀只出现过一次: 比如此时的<code>MPLE</code>作为好后缀在整个字符串<code>EXAMPLE</code>中只出现过一次</p><ul><li>不是, 则移动P使T中的好后缀与P中长度相等的字符串对齐</li><li>是, 则继续检查好后缀的所有后缀（比如PLE,PL,E)是否和同等长度的P前缀相等, 如果相等则移动P使之对齐, 不相等则移动 len(P).<br> 这里相当于要求后缀必须出现在P的首部, 如果非首部, 因前缀的前一个字符必然不相等,则整个字符串肯定无法匹配</li></ul><div class="language-text ext-text"><pre class="language-text"><code>HERE IS A SIMPLE EXAMPLE\n            ||||\n         EXAMPLE\nMPLE， PLE，LE没法和首部匹配，但后缀E和P前缀相等, 则移动T使其对齐，从打X出继续从后向前比较\nHERE IS A SIMPLE EXAMPLE\n               |     X\n               EXAMPLE\n            \n</code></pre></div><p>具体的代码注释如下：</p><div class="language-go ext-go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">makeStringFinder</span><span class="token punctuation">(</span>pattern <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>stringFinder <span class="token punctuation">{</span>\n\tf <span class="token operator">:=</span> <span class="token operator">&amp;</span>stringFinder<span class="token punctuation">{</span>\n\t\tpattern<span class="token punctuation">:</span>        pattern<span class="token punctuation">,</span>\n\t\tgoodSuffixSkip<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">// last 是pattern最后一个字符的索引</span>\n\tlast <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>\n\n\t<span class="token comment">// 创建坏字符表，记录不匹配时T的i指针移动步数</span>\n\t<span class="token comment">// 第一阶段，初始化256个字符全部移动 len(pattern) 步</span>\n\t<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> f<span class="token punctuation">.</span>badCharSkip <span class="token punctuation">{</span>\n\t\tf<span class="token punctuation">.</span>badCharSkip<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// 第二阶段：从左到右遍历pattern，更新其索引与P末尾的距离，结果就是该字符到末尾的最小距离</span>\n\t<span class="token comment">// 没有计算last byte的距离, 因为移动至少要一步。 没有0步。 </span>\n\t<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> last<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n\t\tf<span class="token punctuation">.</span>badCharSkip<span class="token punctuation">[</span>pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> last <span class="token operator">-</span> i\n\t<span class="token punctuation">}</span>\n\n\t<span class="token comment">// 创建好后缀表</span>\n\t<span class="token comment">// 第一阶段: 此时pattern[i+1:]都是已经匹配的，且好后缀只出现了一次</span>\n\t<span class="token comment">// 计算T中的指针要移动的步数</span>\n\tlastPrefix <span class="token operator">:=</span> last\n\t<span class="token keyword">for</span> i <span class="token operator">:=</span> last<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> <span class="token function">HasPrefix</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> pattern<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\tlastPrefix <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token comment">// 好后缀时T的指针移动分两步，首先移动到与 pattern的末尾对齐，即 last - i</span>\n\t\t<span class="token comment">// lastPrefix 用来记录 pattern[i+1:]中所有后缀与同等长度的前缀相等时的最大索引</span>\n\t\t<span class="token comment">// 然后移动 lastPrefix步</span>\n\t\tf<span class="token punctuation">.</span>goodSuffixSkip<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> lastPrefix <span class="token operator">+</span> last <span class="token operator">-</span> i\n\t<span class="token punctuation">}</span>\n\t<span class="token comment">// 第二阶段: 好后缀在pattern前面部分还出现过, 如下计算相应的移动步数</span>\n\t<span class="token comment">// 会覆盖之前第一阶段的部分值。但好后缀出现过移动步数比没出现的小。所以最终值是正确的</span>\n\t<span class="token comment">// 举例： &quot;mississi&quot; 中好后缀是issi, 在pattern[1]处出现过，所以移动步数为 last-i  +  lenSuffix</span>\n\t<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> last<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n\t\tlenSuffix <span class="token operator">:=</span> <span class="token function">longestCommonSuffix</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> pattern<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\t\t<span class="token keyword">if</span> pattern<span class="token punctuation">[</span>i<span class="token operator">-</span>lenSuffix<span class="token punctuation">]</span> <span class="token operator">!=</span> pattern<span class="token punctuation">[</span>last<span class="token operator">-</span>lenSuffix<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// (last-i) is the shift, and lenSuffix is len(suffix).</span>\n\t\t\tf<span class="token punctuation">.</span>goodSuffixSkip<span class="token punctuation">[</span>last<span class="token operator">-</span>lenSuffix<span class="token punctuation">]</span> <span class="token operator">=</span> lenSuffix <span class="token operator">+</span> last <span class="token operator">-</span> i\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> f\n<span class="token punctuation">}</span>\n<span class="token comment">// longestCommonSuffix 仅仅比较两个字符串的共同后缀的长度, 没有则为0</span>\n<span class="token keyword">func</span> <span class="token function">longestCommonSuffix</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">for</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">if</span> a<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> b<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">break</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// next 主要返回p在text里第一次匹配时的索引, 不匹配则返回-1</span>\n<span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>stringFinder<span class="token punctuation">)</span> <span class="token function">next</span><span class="token punctuation">(</span>text <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>\n    <span class="token comment">// i 是T(即变量text)中要检查的字符索引, j为P中要检查的字符索引</span>\n\n    <span class="token comment">// 因从后向前比较, 所以i初始化为P的最后一位索引</span>\n\ti <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>pattern<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>\n\t<span class="token keyword">for</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 每次比较时都从p的最后一位开始比较</span>\n\t\tj <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>pattern<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>\n\t\t<span class="token keyword">for</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> f<span class="token punctuation">.</span>pattern<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n\t\t\ti<span class="token operator">--</span>\n\t\t\tj<span class="token operator">--</span>\n\t\t<span class="token punctuation">}</span>\n        <span class="token comment">// j为负数,说明匹配成功, 则直接返回 i+ 1 </span>\n\t\t<span class="token keyword">if</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span>\n\t\t<span class="token punctuation">}</span>\n        <span class="token comment">// j为非负, 表明text[i] != f.pattern[j], 则从坏字符表和好后缀表中获取分别获取i需要移动的步数, 取最大值并使移动到新位置</span>\n\t\ti <span class="token operator">+=</span> <span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>badCharSkip<span class="token punctuation">[</span>text<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>goodSuffixSkip<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',23),r={render:function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.j4)(t.HY,null,[p,(0,t.Wm)("p",null,[o,e,c,(0,t.Wm)("a",u,[l,(0,t.Wm)(a)]),k]),i],64)}}}}]);