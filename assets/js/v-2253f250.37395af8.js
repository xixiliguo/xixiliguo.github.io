(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[751],{5168:(s,a,n)=>{"use strict";n.r(a),n.d(a,{data:()=>e});const e={key:"v-2253f250",path:"/network/libvirt-network.html",title:"Libvirt Network 笔记",lang:"en-US",frontmatter:{title:"Libvirt Network 笔记",author:"Peter Wang",tags:["libvirt","iptables"],date:"2019-06-16T13:00:55.000Z",draft:"falses"},excerpt:"",headers:[{level:2,title:"使用trace模块",slug:"使用trace模块",children:[]},{level:2,title:"使用log模块",slug:"使用log模块",children:[]},{level:2,title:"默认NAT模式",slug:"默认nat模式",children:[]},{level:2,title:"路由模式",slug:"路由模式",children:[]},{level:2,title:"隔离模式",slug:"隔离模式",children:[]},{level:2,title:"macvtap",slug:"macvtap",children:[]},{level:2,title:"vhostuser",slug:"vhostuser",children:[]}],filePathRelative:"network/libvirt-network.md",git:{updatedTime:1626591395e3,contributors:[]}}},6083:(s,a,n)=>{"use strict";n.r(a),n.d(a,{default:()=>t});const e=(0,n(6252).uE)('<p>学习libvirt的网络实现方式,记录一些笔记</p><h1 id="如何跟踪定位iptables" tabindex="-1"><a class="header-anchor" href="#如何跟踪定位iptables" aria-hidden="true">#</a> 如何跟踪定位iptables</h1><h2 id="使用trace模块" tabindex="-1"><a class="header-anchor" href="#使用trace模块" aria-hidden="true">#</a> 使用trace模块</h2><p>将该报文匹配的每一条规则打印出来.<code>man iptables-extensions</code>里关于trace模块的说明</p><p>加载模块(CentOS7)</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># modprobe  nf_log_ipv4</span>\n<span class="token comment"># sysctl -w net.netfilter.nf_log.2=nf_log_ipv4</span>\n</code></pre></div><p>加载模块(CentOS6)</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># modprobe ipt_LOG</span>\n<span class="token comment"># sysctl -w net.netfilter.nf_log.2=ipt_LOG</span>\n</code></pre></div><p>必须在<code>raw</code>表增加规则,以触发trace 如下规则会追踪tcp目标端口为80的所有包.<br> 可通过<code>dmesg</code>或者<code>/var/log/messages</code>查看.<br> 生产环境使用不当可能导致严重的性能问题.</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># iptables -t raw -I PREROUTING -p tcp --dport 3128 -j TRACE</span>\n</code></pre></div><p>物理机上用<code>libvirt</code>启动虚拟机,然后在虚拟机发起到某个ip端口为3128的包<br> 下面的<code>dmesg</code>的输出,可以看到网桥virbr0收到原始包后, 转发到bond0,然后再做了snat出去.<br> 在POSTROUTING的NAT表里SRC会替换为物理机的ip.</p><div class="language-text ext-text"><pre class="language-text"><code>[5121056.357116] TRACE: raw:PREROUTING:policy:3 IN=virbr0 OUT= MAC=52:54:00:da:ec:4f:52:54:00:a4:5e:56:08:00 SRC=192.168.122.17 DST=10.44.32.217 LEN=60 TOS=0x00 PREC=0x00 TTL=64 ID=14247 DF PROTO=TCP SPT=42954 DPT=3128 SEQ=3127975600 ACK=0 WINDOW=29200 RES=0x00 SYN URGP=0 OPT (020405B40402080A10B629170000000001030307)\n[5121056.357126] TRACE: mangle:PREROUTING:policy:1 IN=virbr0 OUT= MAC=52:54:00:da:ec:4f:52:54:00:a4:5e:56:08:00 SRC=192.168.122.17 DST=10.44.32.217 LEN=60 TOS=0x00 PREC=0x00 TTL=64 ID=14247 DF PROTO=TCP SPT=42954 DPT=3128 SEQ=3127975600 ACK=0 WINDOW=29200 RES=0x00 SYN URGP=0 OPT (020405B40402080A10B629170000000001030307)\n[5121056.357131] TRACE: nat:PREROUTING:policy:1 IN=virbr0 OUT= MAC=52:54:00:da:ec:4f:52:54:00:a4:5e:56:08:00 SRC=192.168.122.17 DST=10.44.32.217 LEN=60 TOS=0x00 PREC=0x00 TTL=64 ID=14247 DF PROTO=TCP SPT=42954 DPT=3128 SEQ=3127975600 ACK=0 WINDOW=29200 RES=0x00 SYN URGP=0 OPT (020405B40402080A10B629170000000001030307)\n[5121056.357140] TRACE: mangle:FORWARD:policy:1 IN=virbr0 OUT=bond0 MAC=52:54:00:da:ec:4f:52:54:00:a4:5e:56:08:00 SRC=192.168.122.17 DST=10.44.32.217 LEN=60 TOS=0x00 PREC=0x00 TTL=63 ID=14247 DF PROTO=TCP SPT=42954 DPT=3128 SEQ=3127975600 ACK=0 WINDOW=29200 RES=0x00 SYN URGP=0 OPT (020405B40402080A10B629170000000001030307)\n[5121056.357144] TRACE: filter:FORWARD:rule:2 IN=virbr0 OUT=bond0 MAC=52:54:00:da:ec:4f:52:54:00:a4:5e:56:08:00 SRC=192.168.122.17 DST=10.44.32.217 LEN=60 TOS=0x00 PREC=0x00 TTL=63 ID=14247 DF PROTO=TCP SPT=42954 DPT=3128 SEQ=3127975600 ACK=0 WINDOW=29200 RES=0x00 SYN URGP=0 OPT (020405B40402080A10B629170000000001030307)\n[5121056.357147] TRACE: mangle:POSTROUTING:policy:4 IN= OUT=bond0 SRC=192.168.122.17 DST=10.44.32.217 LEN=60 TOS=0x00 PREC=0x00 TTL=63 ID=14247 DF PROTO=TCP SPT=42954 DPT=3128 SEQ=3127975600 ACK=0 WINDOW=29200 RES=0x00 SYN URGP=0 OPT (020405B40402080A10B629170000000001030307)\n[5121056.357150] TRACE: nat:POSTROUTING:rule:3 IN= OUT=bond0 SRC=192.168.122.17 DST=10.44.32.217 LEN=60 TOS=0x00 PREC=0x00 TTL=63 ID=14247 DF PROTO=TCP SPT=42954 DPT=3128 SEQ=3127975600 ACK=0 WINDOW=29200 RES=0x00 SYN URGP=0 OPT (020405B40402080A10B629170000000001030307)\n</code></pre></div><h2 id="使用log模块" tabindex="-1"><a class="header-anchor" href="#使用log模块" aria-hidden="true">#</a> 使用log模块</h2><p>log是一个target, 如下规则是指当包经过nat表,postrouting链,将源为192.168.122.0/24的包记录下来</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># iptables -t nat -A POSTROUTING -s 192.168.122.0/24 -j LOG</span>\n</code></pre></div><p><code>/var/log/messages</code>打印如下：</p><div class="language-text ext-text"><pre class="language-text"><code>kernel: IN= OUT=bond0 SRC=192.168.122.17 DST=10.44.32.217 LEN=60 TOS=0x00 PREC=0x00 TTL=63 ID=62347 DF PROTO=TCP SPT=42964 DPT=3128 WINDOW=29200 RES=0x00 SYN URGP=0\n</code></pre></div><h1 id="libvirt-网络模型" tabindex="-1"><a class="header-anchor" href="#libvirt-网络模型" aria-hidden="true">#</a> Libvirt 网络模型</h1><p>假设物理机只有一个网卡<code>wlp5s0</code>,对应的ip为<code>192.168.3.5</code><br> 虚拟机的ip为<code>192.168.122.8</code></p><h2 id="默认nat模式" tabindex="-1"><a class="header-anchor" href="#默认nat模式" aria-hidden="true">#</a> 默认NAT模式</h2><p><code>libvirt</code>默认提供nat转发模式, <code>virt-manager</code>默认调用<code>libvirt</code>也是这个模式<br> 这种模式下虚拟机可以访问外部网络,但外部网络无法访问虚拟机内部.</p><p>虚拟机发出去的消息,首先到网桥<code>virbr0</code>的<code>input</code>链. 允许通过的情况下,路由决策目标IP不是本机ip, 需要转发. 从<code>wlp5s0</code>出去</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># iptables  -nvL</span>\nChain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">45456</span> packets, 89M bytes<span class="token punctuation">)</span>\n pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         \n    <span class="token number">0</span>     <span class="token number">0</span> ACCEPT     udp  --  virbr0 *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            udp dpt:53\n    <span class="token number">0</span>     <span class="token number">0</span> ACCEPT     tcp  --  virbr0 *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            tcp dpt:53\n    <span class="token number">0</span>     <span class="token number">0</span> ACCEPT     udp  --  virbr0 *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            udp dpt:67\n    <span class="token number">0</span>     <span class="token number">0</span> ACCEPT     tcp  --  virbr0 *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            tcp dpt:67\n\nChain FORWARD <span class="token punctuation">(</span>policy ACCEPT <span class="token number">0</span> packets, <span class="token number">0</span> bytes<span class="token punctuation">)</span>\n pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         \n    <span class="token number">0</span>     <span class="token number">0</span> ACCEPT     all  --  *      virbr0  <span class="token number">0.0</span>.0.0/0            <span class="token number">192.168</span>.122.0/24     ctstate RELATED,ESTABLISHED\n    <span class="token number">0</span>     <span class="token number">0</span> ACCEPT     all  --  virbr0 *       <span class="token number">192.168</span>.122.0/24     <span class="token number">0.0</span>.0.0/0           \n    <span class="token number">0</span>     <span class="token number">0</span> ACCEPT     all  --  virbr0 virbr0  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0           \n    <span class="token number">0</span>     <span class="token number">0</span> REJECT     all  --  *      virbr0  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            reject-with icmp-port-unreachable\n    <span class="token number">0</span>     <span class="token number">0</span> REJECT     all  --  virbr0 *       <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            reject-with icmp-port-unreachable\n\nChain OUTPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">45542</span> packets, 5338K bytes<span class="token punctuation">)</span>\n pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         \n    <span class="token number">0</span>     <span class="token number">0</span> ACCEPT     udp  --  *      virbr0  <span class="token number">0.0</span>.0.0/0            <span class="token number">0.0</span>.0.0/0            udp dpt:68\n</code></pre></div><p>在<code>postrouteing</code>时匹配了MASQUERADE规则,将源ip从虚拟机的ip修改为发消息出去的网卡的ip. 这里为<code>wlp5s0</code></p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># iptables -t nat -nvL</span>\nChain PREROUTING <span class="token punctuation">(</span>policy ACCEPT <span class="token number">3</span> packets, <span class="token number">708</span> bytes<span class="token punctuation">)</span>\n pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         \n\nChain INPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">2</span> packets, <span class="token number">394</span> bytes<span class="token punctuation">)</span>\n pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         \n\nChain OUTPUT <span class="token punctuation">(</span>policy ACCEPT <span class="token number">1079</span> packets, <span class="token number">76558</span> bytes<span class="token punctuation">)</span>\n pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         \n\nChain POSTROUTING <span class="token punctuation">(</span>policy ACCEPT <span class="token number">1079</span> packets, <span class="token number">76558</span> bytes<span class="token punctuation">)</span>\n pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token builtin class-name">source</span>               destination         \n    <span class="token number">3</span>   <span class="token number">334</span> RETURN     all  --  *      *       <span class="token number">192.168</span>.122.0/24     <span class="token number">224.0</span>.0.0/24        \n    <span class="token number">0</span>     <span class="token number">0</span> RETURN     all  --  *      *       <span class="token number">192.168</span>.122.0/24     <span class="token number">255.255</span>.255.255     \n    <span class="token number">0</span>     <span class="token number">0</span> MASQUERADE  tcp  --  *      *       <span class="token number">192.168</span>.122.0/24    <span class="token operator">!</span><span class="token number">192.168</span>.122.0/24     masq ports: <span class="token number">1024</span>-65535\n    <span class="token number">0</span>     <span class="token number">0</span> MASQUERADE  udp  --  *      *       <span class="token number">192.168</span>.122.0/24    <span class="token operator">!</span><span class="token number">192.168</span>.122.0/24     masq ports: <span class="token number">1024</span>-65535\n    <span class="token number">0</span>     <span class="token number">0</span> MASQUERADE  all  --  *      *       <span class="token number">192.168</span>.122.0/24    <span class="token operator">!</span><span class="token number">192.168</span>.122.0/24    \n</code></pre></div><p><code>libvirtd</code>一个网络属于一个网桥,同一网络下的虚拟机的网卡在该网桥下.网桥相当与一台交换机<br> 虚拟机可以互访,交互的消息在物理机的iptables跟踪不动.因为消息并没有出这台交换机.<br> 同时<code>libvirtd</code>通过dnsmasq给所有虚拟机提供dhcp和dns服务.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>brctl show\nbridge name\tbridge <span class="token function">id</span>\t\tSTP enabled\tinterfaces\nvirbr0\t\t<span class="token number">8000</span>.5254008931ee\t<span class="token function">yes</span>\t\tvirbr0-nic\n\t\t\t\t\t\t\tvnet0\n\t\t\t\t\t\t\tvnet1\n</code></pre></div><h2 id="路由模式" tabindex="-1"><a class="header-anchor" href="#路由模式" aria-hidden="true">#</a> 路由模式</h2><p>这种模式下对比nat模式,少了nat表的配置,其他都一样. 网桥相当与有了路由功能的交换机. 虚拟机直接使用分配的ip与外界通信. 外部网络直接访问虚拟机的ip. 所以需要在外部配置静态路由使外面的消息能发到这台物理机</p><h2 id="隔离模式" tabindex="-1"><a class="header-anchor" href="#隔离模式" aria-hidden="true">#</a> 隔离模式</h2><p>这种模式只允许虚拟机互访. 外界包括物理机都无法访问. 应用场景很少.</p><h2 id="macvtap" tabindex="-1"><a class="header-anchor" href="#macvtap" aria-hidden="true">#</a> macvtap</h2><p>这种模式,虚拟机直接使用物理机的网卡</p><div class="language-bash ext-sh"><pre class="language-bash"><code>    <span class="token operator">&lt;</span>interface <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">&#39;direct&#39;</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>mac <span class="token assign-left variable">address</span><span class="token operator">=</span><span class="token string">&#39;52:54:00:26:71:4b&#39;</span>/<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>source <span class="token assign-left variable">dev</span><span class="token operator">=</span><span class="token string">&#39;enp3s0&#39;</span> <span class="token assign-left variable">mode</span><span class="token operator">=</span><span class="token string">&#39;bridge&#39;</span>/<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>target <span class="token assign-left variable">dev</span><span class="token operator">=</span><span class="token string">&#39;macvtap0&#39;</span>/<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>model <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">&#39;virtio&#39;</span>/<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>alias <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&#39;net0&#39;</span>/<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>address <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">&#39;pci&#39;</span> <span class="token assign-left variable">domain</span><span class="token operator">=</span><span class="token string">&#39;0x0000&#39;</span> <span class="token assign-left variable">bus</span><span class="token operator">=</span><span class="token string">&#39;0x00&#39;</span> <span class="token assign-left variable">slot</span><span class="token operator">=</span><span class="token string">&#39;0x03&#39;</span> <span class="token assign-left variable">function</span><span class="token operator">=</span><span class="token string">&#39;0x0&#39;</span>/<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>/interface<span class="token operator">&gt;</span>\n</code></pre></div><h2 id="vhostuser" tabindex="-1"><a class="header-anchor" href="#vhostuser" aria-hidden="true">#</a> vhostuser</h2><p>这种类型可以使虚拟机的qemu进程与另一个用户态空间交换包文.<br> 主要用于支持DPDK的包处理,进一步提升网络性能.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>  <span class="token operator">&lt;</span>interface <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">&#39;vhostuser&#39;</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>mac <span class="token assign-left variable">address</span><span class="token operator">=</span><span class="token string">&#39;52:54:00:3b:83:1a&#39;</span>/<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>source <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">&#39;unix&#39;</span> <span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token string">&#39;/tmp/vhost1.sock&#39;</span> <span class="token assign-left variable">mode</span><span class="token operator">=</span><span class="token string">&#39;server&#39;</span>/<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>model <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">&#39;virtio&#39;</span>/<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>/interface<span class="token operator">&gt;</span>\n</code></pre></div><h1 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h1><p>如下文档是一个使用iptable配置防止DDOS工具的终极指南. 里面有大量的配置实例<br> https://javapipe.com/blog/iptables-ddos-protection/<br> 如下文档上iptable入门指南<br> https://rlworkman.net/howtos/iptables/iptables-tutorial.html</p><h1 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h1><p>https://access.redhat.com/solutions/2313671<br> https://www.lijiaocn.com/%E6%8A%80%E5%B7%A7/2018/06/15/debug-linux-network.html<br> https://libvirt.org/formatdomain.html<br> https://wiki.libvirt.org/page/Networking<br> https://wiki.libvirt.org/page/VirtualNetworking</p>',41),t={render:function(s,a){return e}}}}]);