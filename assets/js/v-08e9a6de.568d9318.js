(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[623],{2675:(t,e,s)=>{"use strict";s.r(e),s.d(e,{data:()=>a});const a={key:"v-08e9a6de",path:"/linux/atop.html",title:"ATOP工作原理总结",lang:"en-US",frontmatter:{date:"2017-03-05T05:15:27.000Z",draft:!1,cover:"/img/atop.png",title:"ATOP工作原理总结",tags:["atop","proc"]},excerpt:"",headers:[{level:2,title:"CPU",slug:"cpu",children:[]},{level:2,title:"Memory Swap",slug:"memory-swap",children:[]},{level:2,title:"Disk",slug:"disk",children:[]},{level:2,title:"Network",slug:"network",children:[]}],filePathRelative:"linux/atop.md",git:{updatedTime:1626591395e3,contributors:[]}}},4620:(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>r});var a=s(6252);const n=(0,a.uE)('<p>ATOP是一款用于观察Linux性能的ASCII全屏交互式工具。类似于top,每隔一段时间报告 <code>CPU，Memory，Disk，Network</code> 等硬件的性能信息，对于严重过载的资源会高亮显示。 除此之外，还包括进程级的相关统计信息。比如进程的CPU、内存、磁盘利用率，用户名，进程状态，启动时间，进程ID等。对于在上一个周期内退出的进程还会显示退出状态码。所有进程信息默认按CPU占用率降序排列。</p><h1 id="运行方式" tabindex="-1"><a class="header-anchor" href="#运行方式" aria-hidden="true">#</a> 运行方式</h1><p><code>atop 3</code>可以按每3秒刷新一次的频率在ASCII屏幕上显示即时性能信息，结果如下图。 可以实时了解当前系统的负载情况，同时具有很强的交互性。比如按键盘上的<code>c</code>可显示运行进程的完整名称（包括参数）。按键<code>m</code>可以按内存利用率降序排序当前进程列表，称之为内存视图。 <img src="/img/atop.png" alt="abc"></p><p><code>atop -a -w /var/log/atop/atop_{HOSTNAME}_20151123 30</code>则每30秒记录一次数据并持久化到atop_{HOSTNAME}_20151123文件里。这样的命令通常被定时任务拉起。当服务器在特定时间点出现异常或者想要查看近几天内的性能信息时，就可以使用<code>atop -r FileName</code>读取文件并查看里面的性能数据。这里列出文件的一些默认设置</p><ul><li>性能收集时间间隔：30s</li><li>文件名：atop_HOSTNAME_CURDAY</li><li>文件保存天数：7days</li><li>文件保存目录：/var/log/atop</li><li>执行ATOP的定时任务脚本：/etc/cron.d/atop</li></ul><p>安装atop后主机上每天都会产生对应的atop文件，但我们执行<code>crontab -l</code>却找不到与atop相关的定时任务，其实它在/etc/cron.d下面。</p><blockquote><p>AAA:~ # cat /etc/cron.d/atop<br> 0 0 * * * root /etc/atop/atop.daily</p></blockquote><p>cron进程先在<code>/var/spool/cron/tabs</code>目录下搜索以用户名命名的文件，找到就读到内存中，其内容就是<code>crontab -l</code>的输出。接着继续搜索<code>/etc/crontab</code>和 <code>/etc/cron.d</code>目录下的所有文件并读取之。其格式和<code>tabs</code>下的略有不同，主要区别是指定了脚本的执行用户。</p><h1 id="原始信息收集" tabindex="-1"><a class="header-anchor" href="#原始信息收集" aria-hidden="true">#</a> 原始信息收集</h1><p><code>/proc</code>是Linux下一种虚拟文件系统，存储的是当前内核运行状态的一系列特殊文件，用户可以通过查看这些文件了解系统硬件及当前正在运行进程的信息。ATOP正是从<code>/proc</code>下各种文件中读取原始信息，通过采样来计算周期内的即时数据。比如A时间点记录下消耗在用户态的cpu时间和总的CPU时间为<code>M</code>，<code>X</code>。在B时间点记录下此两项对应的值为<code>N</code>，<code>Y</code>。则当前的用户态CPU使用率为<code>(N-M)/(Y-X)</code>。等所有的性能信息都计算加工完毕后,使用libncurses库提供的函数将最终信息打印在字符界面上。</p><p><code>/proc</code>里记录的统计信息（除内存）都是自设备启动以来或者进程启动以来的累积值。如果没具体说明，则本文所讲到的各字段的值默认都是差值,即当前时间点采样值减去先前时间点的采样值.</p><p>本文所有示例在<code>Suse11</code>环境下通过，atop版本为<code>1.27</code>。示例中数据仅为说明，一些影响阅读且与本文无关的内容会删除。如果想要全面了解/proc文件系统里文件含义，可以<code>man 5 proc</code></p><h2 id="cpu" tabindex="-1"><a class="header-anchor" href="#cpu" aria-hidden="true">#</a> CPU</h2><p>读取<code>/proc/stat</code>获取CPU的统计信息，包括每个CPU和总的CPU信息。</p><blockquote><p>AAA:~ # cat /proc/stat<br> cpu 3870117 23378 3233296 139792496 2051527 159950 29648 0 0<br> cpu0 1903376 11614 1577768 70138672 1000644 81353 12021 0 0<br> cpu1 1966740 11763 1655527 69653824 1050882 78597 17626 0 0<br> ....<br> btime 1447557115<br> processes 3543228<br> procs_running 1<br> procs_blocked 0</p></blockquote><p>cpuN行后面的数值含义从左到右分别是：user，nice，system，idle，iowait，irq，softirq，steal，guest。单位为jiffies，该值等于<code>1/hertz</code>秒。<code>hertz</code>在大部分系统里为100。可以用如下命令查询：</p><blockquote><p>AAA:~ # getconf -a | grep TCK<br> CLK_TCK 100</p></blockquote><p>那么当前每个CPU的利用率为：<code>CPU usage = (total - idle - iowait) / total</code> <code>total</code>为cpuN这一行所有值之和.</p><p>顺便介绍下其他几个比较有用的字段含义：</p><ul><li>btime：记录系统开机启动时距1970年1月1号多少秒</li><li>processes (total_forks)：自系统启动以来所创建的任务的数目</li><li>procs_running：当前处于运行队列的进程数</li><li>procs_blocked：当前被阻塞的进程数</li></ul><h2 id="memory-swap" tabindex="-1"><a class="header-anchor" href="#memory-swap" aria-hidden="true">#</a> Memory Swap</h2><p>读取<code>/proc/meminfo</code>获取内存统计信息，读取<code>/proc/vmstat</code>获取页交换信息。 在高负荷的服务器里当内存不够用时，OS会将本应写入内存的数据写入到Swap空间，等内存充足时再将SWAP内的数据交换到内在里。内存和Swap 的这种交换过程称为页面交换（Paging），单位为页，大小是4K。 在PAGE这行 <code>swout</code>字段显示一秒中有多少页写入Swap。如果这个值超过10，则内存资源会红色高亮显示。只要该值<code>11 &lt;= X &lt; 10</code>，则表明当前物理内存已经不足，有页交换操作。ATOP会以青灰色高亮内存资源，表示已经出现瓶颈但不是特别严重。</p><ul><li>计算公式为： <code>swouts / nsecs</code></li><li>swouts 从 <code>/proc/vmstat</code> 的 <code>pswpout</code>字段获得</li><li>nescs为采样的时间间隔</li></ul><p>系统自带的<code>vmstat</code>命令也可以观察到<code>SWAP</code>的交换情况，它正是通过读取<code>/proc/vmstat</code>来获取页交换信息的</p><blockquote><p>AAA:~ # strace -ftT -e trace=open vmstat &gt;/dev/null<br> 09:36:16 open(&quot;/etc/ld.so.cache&quot;, O_RDONLY) = 3 &lt;0.000015&gt;<br> 09:36:16 open(&quot;/lib64/libc.so.6&quot;, O_RDONLY) = 3 &lt;0.000014&gt;<br> 09:36:16 open(&quot;/proc/meminfo&quot;, O_RDONLY) = 3 &lt;0.000027&gt;<br> 09:36:16 open(&quot;/proc/stat&quot;, O_RDONLY) = 4 &lt;0.000018&gt;<br> 09:36:16 open(&quot;/proc/vmstat&quot;, O_RDONLY) = 5 &lt;0.000018&gt;</p><p>AAA:~ # cat /proc/meminfo<br> MemTotal: 7669188 kB<br> MemFree: 1909052 kB<br> Buffers: 424088 kB<br> Cached: 3670052 kB<br> ....<br> SwapCached: 0 kB<br> SwapTotal: 8393920 kB<br> SwapFree: 8393920 kB<br> Mapped: 681904 kB<br> ....<br> Shmem: 736624 kB<br> Slab: 178552 kB<br> SReclaimable: 139164 kB</p></blockquote><p>上述meminfo文件字段解释：</p><ul><li>MemTotal：所有可用RAM大小（即物理内存减去一些预留位和内核的二进制代码大小）</li><li>MemFree：被系统留着未使用的内存</li><li>Buffers：用来给文件做缓冲大小</li><li>Cached：被高速缓冲存储器（cache memory）用的内存的大小</li><li>SwapTotal: 交换空间的总大小</li><li>SwapFree: 未被使用交换空间的大小</li><li>Slab: 内核数据结构缓存的大小，可以减少申请和释放内存带来的消耗。</li><li>SReclaimable:可收回Slab的大小</li><li>Shmem: 共享内存大小</li></ul><p>内存利用率的公式为：<code>(MemTotal - MemFree - Cached - Buffers) / MemTotal</code>. Shmem这部分内存是包含在Cache里的，其实它是无法被回收的。 所以从ATOP2.0版本开始，该利用用率公式变为：<code>(MemTotal - MemFree - Cached - Buffers +　Shmem) / MemTotal</code> . 这个结果已经非常准确了。</p><p>Swap利用率公式为：<code>(SwapTotal - SwapFree) / SwapTotal</code></p><h2 id="disk" tabindex="-1"><a class="header-anchor" href="#disk" aria-hidden="true">#</a> Disk</h2><p>读取/proc/diskstats获取磁盘信息。从左至右分别对应主设备号，次设备号和设备名称。后续的11个列解释如下，除了第9个列外所有的列都是从启动时的累积值。</p><div class="language-text ext-text"><pre class="language-text"><code>AAA:~ # cat /proc/diskstats \n    8       0 sda 139119 267262 3848795 1357456 3942149 4733328 62031044 62148876 0 36083024 63502552\n    8       1 sda1 27 415 1388 472 0 0 0 0 0 452 472\n    8       2 sda2 83999 87253 1992917 588124 883514 1359683 17920106 16570224 0 6728052 17157604\n    8       3 sda3 4 0 14 84 0 0 0 0 0 84 84\n    8       5 sda5 49767 174838 1493156 706492 1414495 2617855 32228098 19276908 0 14162008 19981604\n    8       6 sda6 5257 4121 359986 60828 726761 755790 11882840 13347236 0 6084640 13407536\n    8       7 sda7 20 194 428 508 0 0 0 0 0 496 508\n    8       8 sda8 21 405 426 604 0 0 0 0 0 400 604\n    7       0 loop0 0 0 0 0 0 0 0 0 0 0 0\n</code></pre></div><ul><li>第1列：读磁盘的次数，成功完成读的总次数。</li><li>第2列：合并读次数，为了效率可能会合并相邻的读和写。从而两次4K的读在它最终被处理到磁盘上之前可能会变成一次8K的读，才被计数（和排队），因此只有一次I/O操作。这个域使你知道这样的操作有多频繁。</li><li>第3列：读扇区的次数，成功读过的扇区总次数。</li><li>第4列：读花费的毫秒数，这是所有读操作所花费的毫秒数（用__make_request()到end_that_request_last()测量）。</li><li>第5列：写完成的次数，成功写完成的总次数。</li><li>第6列：合并写次数</li><li>第7列：写扇区的次数，成功写扇区总次数。</li><li>第8列：写花费的毫秒数，这是所有写操作所花费的毫秒数（用__make_request()到end_that_request_last()测量）。</li><li>第9列：I/O的当前进度，只有这个域应该是0。当请求被交给适当的request_queue_t时增加和请求完成时减小。</li><li>第10列：花在I/O操作上的毫秒数，这个域会增长只要field 9不为0。</li><li>第11列：加权， 花在I/O操作上的毫秒数，在每次I/O开始，I/O结束，I/O合并时这个域都会增加。这可以给I/O完成时间和存储那些可以累积的提供一个便利的测量标准。</li></ul><p>下面表格列出常用字段的计算方法，表中的<code>第X列</code>是指<code>/proc/diskstats</code>文件里的对应列的差值（即两次采样点所得值的差值）</p><table><thead><tr><th style="text-align:left;">ATOP字段</th><th style="text-align:left;">含义</th><th style="text-align:left;">计算公式</th><th style="text-align:left;">单位</th></tr></thead><tbody><tr><td style="text-align:left;">MBr/s</td><td style="text-align:left;">平均每秒读数据量</td><td style="text-align:left;">第3列 * 2 / 1024 / nsecs</td><td style="text-align:left;">MB/s</td></tr><tr><td style="text-align:left;">MBw/s</td><td style="text-align:left;">平均1秒内写数据量</td><td style="text-align:left;">第7列* 2 / 1024 / nsecs</td><td style="text-align:left;">MB/s</td></tr><tr><td style="text-align:left;">avio</td><td style="text-align:left;">IO操作的平均操作时长</td><td style="text-align:left;">第10列 / iotot</td><td style="text-align:left;">ms</td></tr><tr><td style="text-align:left;">avq</td><td style="text-align:left;">平均阵列深度，即加权后的IO操作时长</td><td style="text-align:left;">第11列/iotot</td><td style="text-align:left;">ms</td></tr><tr><td style="text-align:left;">busy</td><td style="text-align:left;">磁盘利用率</td><td style="text-align:left;">第10列 / mstot</td><td style="text-align:left;">百分比</td></tr></tbody></table><ul><li>nsecs：采样时间间隔</li><li>iotot：读写次数之和，即第1列+第5列</li><li>mstot：利用CPU数据计算的平均间隔时间，单位是毫秒。公式为<code>cputot * 1000 / hertz / nrcpu</code></li><li>cputot：两次采样点之间所有cpu的消耗时间之和, 单位是 jiffies</li><li>hertz：100 表示1秒内有100个jiffies</li><li>nrcpu：主机CPU个数</li></ul><p>如果avq远大于avio,则说明IO大部分消耗在等待和排队中，而不是数据传输本身。</p><h2 id="network" tabindex="-1"><a class="header-anchor" href="#network" aria-hidden="true">#</a> Network</h2><p>读取/proc/net/dev获取所有网卡信息</p><blockquote><p>AAA:~ # cat /proc/net/dev<br> Inter-| Receive | Transmit<br> face |bytes packets errs drop fifo frame compressed multicast|bytes packets errs drop fifo colls carrier compressed<br> lo:5993298914 41500939 0 0 0 0 0 0 5993298914 41500939 0 0 0 0 0 0<br> eth0: 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0<br> eth4:46036327 544231 0 0 0 0 0 1 31411179 41268 0 0 0 0 0 0<br> eth5:48454032 556137 0 0 0 0 0 30920 3808752 7778 0 0 0 0 0 0<br> eth2: 7766519 106577 0 0 0 0 0 3428 531166 7950 0 0 0 0 0 0<br> eth3:50947490 669306 0 0 0 0 0 30980 680 8 0 0 0 0 0 0<br> bond1:94490359 1100368 0 0 0 0 0 30921 35219931 49046 0 0 0 0 0 0<br> AAA:~ #</p></blockquote><ul><li>最左边的表示接口的名字，Receive表示收包，Transmit表示发包。</li><li>bytes：收发的字节数</li><li>packets：表示收发正确的包量</li><li>errs：表示收发错误的包量</li><li>drop：表示收发丢弃的包量</li><li>上面四个值是自网卡启动以来的累积值, 执行<code>ifconfig ethX down;ifconfig ethX up</code>会清零这些值</li></ul><p>网卡的带宽和双工模式并不是从<code>/proc</code>读取，而是通过类似下面的代码获取。</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/ethtool.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/sockios.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/if.h&gt;</span></span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> sockfd<span class="token punctuation">;</span>\n    <span class="token keyword">struct</span> <span class="token class-name">ifreq</span> ifreq<span class="token punctuation">;</span>\n    <span class="token keyword">struct</span> <span class="token class-name">ethtool_cmd</span> \tethcmd<span class="token punctuation">;</span>\n    sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ifreq<span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> ifreq<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ethcmd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> ethcmd<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">strncpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ifreq<span class="token punctuation">.</span>ifr_ifrn<span class="token punctuation">.</span>ifrn_name<span class="token punctuation">,</span> <span class="token string">&quot;eth4&quot;</span><span class="token punctuation">,</span>\n                    <span class="token keyword">sizeof</span> ifreq<span class="token punctuation">.</span>ifr_ifrn<span class="token punctuation">.</span>ifrn_name<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ifreq<span class="token punctuation">.</span>ifr_ifru<span class="token punctuation">.</span>ifru_data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ethcmd<span class="token punctuation">;</span>\n    ethcmd<span class="token punctuation">.</span>cmd <span class="token operator">=</span> ETHTOOL_GSET<span class="token punctuation">;</span>\n    <span class="token function">ioctl</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> SIOCETHTOOL<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ifreq<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;speed is %d Mb, mode is %s duplex\\n&quot;</span><span class="token punctuation">,</span>ethcmd<span class="token punctuation">.</span>speed<span class="token punctuation">,</span>ethcmd<span class="token punctuation">.</span>duplex <span class="token operator">?</span> <span class="token string">&quot;Full&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Half&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',43),o={href:"http://www.linuxjournal.com/node/6908/",target:"_blank",rel:"noopener noreferrer"},p=(0,a.Uk)("这篇文章"),l=(0,a.Uk)("详细地介绍了ETHTOOL 这个操作，只需要配合ioctl就可以获得网卡的全部信息。Linux下的ethtool工具也是通过这种方式查询网卡驱动和配置信息。"),c=(0,a.uE)('<blockquote><p>AAA:~ # strace -ftT -e trace=ioctl ethtool eth4 &gt;/dev/null<br> 11:31:48 ioctl(1, SNDCTL_TMR_TIMEBASE or TCGETS, 0x7fffca09bb30) = -1 ENOTTY (Inappropriate ioctl for device) &lt;0.000012&gt;<br> 11:31:48 ioctl(3, SIOCETHTOOL, 0x7fffca09cb10) = 0 &lt;0.000017&gt;<br> 11:31:48 ioctl(3, SIOCETHTOOL, 0x7fffca09cb10) = 0 &lt;0.000012&gt;<br> 11:31:48 ioctl(3, SIOCETHTOOL, 0x7fffca09cb10) = 0 &lt;0.000025&gt;<br> 11:31:48 ioctl(3, SIOCETHTOOL, 0x7fffca09cb10) = 0 &lt;0.000027&gt;<br> AAA:~ #</p></blockquote><p>网卡利用率的计算方法如下： 全双工： 获取rbytes与wbytes中的最大值A, curspeed = A * 8 / 1000 单双工： curspeed = (rbytes + wbytes) * 8 / 1000 最终利用率的公式： curspeed / （网卡带宽 * 1000）</p><blockquote><p>rbytes和wbytes是从/proc/net/dev读取 <code>* 8</code> 是把 bytes 转化为 bit, <code>/ 1000</code> 单位变为 Kb, 通过SIOCETHTOOL获得的带宽是Mb, 所以 <code>* 1000</code> 转换为Kb</p></blockquote><h1 id="过载资源高亮" tabindex="-1"><a class="header-anchor" href="#过载资源高亮" aria-hidden="true">#</a> 过载资源高亮</h1><p>atop预设了针对每个资源（如CPU，Memory)的阈值， 如果当前利用率超过了阈值，则会将该资源红色高亮显示。 当达到阈值的80%时，使用青灰色高亮显示。这些值可以用户自定义。如下是资源及对应的默认阈值：</p><table><thead><tr><th style="text-align:left;">资源</th><th style="text-align:left;">阈值</th></tr></thead><tbody><tr><td style="text-align:left;">CPU</td><td style="text-align:left;">90%</td></tr><tr><td style="text-align:left;">内存</td><td style="text-align:left;">90%</td></tr><tr><td style="text-align:left;">Swap</td><td style="text-align:left;">80%</td></tr><tr><td style="text-align:left;">磁盘</td><td style="text-align:left;">70%</td></tr><tr><td style="text-align:left;">网卡</td><td style="text-align:left;">90%</td></tr></tbody></table><p>默认进程列表是按CPU排序的。按<code>A</code>会自动依照当前过载最严重的资源排序当前进程列表。如何检测谁是最严重过载的资源。做法是将每个资源自身的利用率进行加权处理(即除以自身的过载阈值），然后选择最大的那个。举例如下：</p><table><thead><tr><th>资源</th><th style="text-align:center;">当前利用率</th><th style="text-align:center;">加权公式</th><th style="text-align:right;">加权结果</th></tr></thead><tbody><tr><td>CPU</td><td style="text-align:center;">70%</td><td style="text-align:center;">70% / 90%</td><td style="text-align:right;">77%</td></tr><tr><td>内存</td><td style="text-align:center;">90%</td><td style="text-align:center;">90% / 90%</td><td style="text-align:right;">100%</td></tr><tr><td>Swap</td><td style="text-align:center;">0%</td><td style="text-align:center;">70% / 80%</td><td style="text-align:right;">0%</td></tr><tr><td>磁盘</td><td style="text-align:center;">80%</td><td style="text-align:center;">80% / 70%</td><td style="text-align:right;">114%</td></tr><tr><td>网卡</td><td style="text-align:center;">20%</td><td style="text-align:center;">20% / 90%</td><td style="text-align:right;">22%</td></tr></tbody></table><p>这样ATOP判断当前最严重过载的资源是磁盘，则进程按磁盘利用率降序排列。我们经常遇到的都是高负载服务器，使用<code>A</code>能自动判断当前资源瓶颈在哪块，并显示导致相关资源极度紧张的TOP进程。对排查问题很有帮助。这里有一种特殊情况，当最严重过载资源是内存且加权后低于70%， 则仍按CPU排序。</p><div class="language-c ext-c"><pre class="language-c"><code><span class="token comment">/*\n** if the system is hardly loaded, still CPU-ordering of\n** processes is most interesting (instead of memory)\n*/</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>highbadness <span class="token operator">&lt;</span> <span class="token number">70</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>highorderp <span class="token operator">==</span> MSORTMEM<span class="token punctuation">)</span>\n        <span class="token operator">*</span>highorderp <span class="token operator">=</span> MSORTCPU<span class="token punctuation">;</span>\n</code></pre></div>',10),r={render:function(t,e){const s=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.j4)(a.HY,null,[n,(0,a.Wm)("p",null,[(0,a.Wm)("a",o,[p,(0,a.Wm)(s)]),l]),c],64)}}}}]);