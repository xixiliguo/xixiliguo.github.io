(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[321],{2963:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-68cbc49a",path:"/kernel/linux-trap.html",title:"Linux: Trap",lang:"en-US",frontmatter:{title:"Linux: Trap",date:"2021-03-20T13:45:56.000Z",draft:!1},excerpt:"",headers:[],filePathRelative:"kernel/linux-trap.md",git:{updatedTime:1626591395e3,contributors:[]}}},9500:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<p>记录一些关于内核处理异常,trap等的机制</p><h1 id="内核关于segment-fault的打印" tabindex="-1"><a class="header-anchor" href="#内核关于segment-fault的打印" aria-hidden="true">#</a> 内核关于segment fault的打印</h1><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">;</span>\n   <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>上述代码中p为空指针, 访问它会触发segment fault, 系统日志会打印如下:</p><div class="language-text ext-text"><pre class="language-text"><code>[Sat Mar 20 17:12:52 2021] a.out[40342]: segfault at 0 ip 00000000004005b1 sp 00007ffc5b1be400 error 4 in a.out[400000+1000]\n</code></pre></div><p>对应x86的处理代码:</p><div class="language-c ext-c"><pre class="language-c"><code>\t<span class="token function">printk</span><span class="token punctuation">(</span><span class="token string">&quot;%s%s[%d]: segfault at %lx ip %px sp %px error %lx&quot;</span><span class="token punctuation">,</span>\n\t\tloglvl<span class="token punctuation">,</span> tsk<span class="token operator">-&gt;</span>comm<span class="token punctuation">,</span> <span class="token function">task_pid_nr</span><span class="token punctuation">(</span>tsk<span class="token punctuation">)</span><span class="token punctuation">,</span> address<span class="token punctuation">,</span>\n\t\t<span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>regs<span class="token operator">-&gt;</span>ip<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>regs<span class="token operator">-&gt;</span>sp<span class="token punctuation">,</span> error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>at 要具体要访问的内存地址<br> ip 当前的执行指令的地址. 即寄存器<code>rip</code>的值<br> sp 栈地址<br> error page fault触发后生成的, 具体对应x86下面的含义可用以下代码解析.</p><div class="language-go ext-go"><pre class="language-go"><code><span class="token keyword">package</span> main\n\n<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>\n\n<span class="token comment">/*\n * x86 Page fault error code bits:\n *\n *   bit 0 ==\t 0: no page found\t1: protection fault\n *   bit 1 ==\t 0: read access\t\t1: write access\n *   bit 2 ==\t 0: kernel-mode access\t1: user-mode access\n *   bit 3 ==\t\t\t\t1: use of reserved bit detected\n *   bit 4 ==\t\t\t\t1: fault was an instruction fetch\n *   bit 5 ==\t\t\t\t1: protection keys block access\n */</span>\n\n<span class="token keyword">var</span> errorDesc <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>\n\t<span class="token punctuation">{</span><span class="token string">&quot;no page found&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;protection fault&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">{</span><span class="token string">&quot;read access&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;write access&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">{</span><span class="token string">&quot;kernel-mode access&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user-mode access&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">{</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;use of reserved bit detected&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">{</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;use of reserved bit detected&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\t<span class="token punctuation">{</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;protection keys block access&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\terrorCode <span class="token operator">:=</span> <span class="token number">14</span>\n\t<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>\n\t\tdesc <span class="token operator">:=</span> errorDesc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>errorCode<span class="token operator">&gt;&gt;</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">]</span>\n\t\t<span class="token keyword">if</span> desc <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>\n\t\t\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre></div><p>in 后面跟执行指令当前位于哪个文件(可能是主程序文件,也可能是动态库)和该文件在内存中加载的地址</p><p>参考:<br> https://stackoverflow.com/questions/2549214/interpreting-segfault-messages</p>',11),p={render:function(n,s){return t}}}}]);