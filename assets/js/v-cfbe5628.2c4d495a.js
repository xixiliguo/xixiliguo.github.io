(self.webpackChunkvuepress_blog=self.webpackChunkvuepress_blog||[]).push([[773],{2781:(t,n,s)=>{"use strict";s.r(n),s.d(n,{data:()=>a});const a={key:"v-cfbe5628",path:"/linux/linux-shadow.html",title:"Linux /etc/shadow 文件学习笔记",lang:"en-US",frontmatter:{title:"Linux /etc/shadow 文件学习笔记",author:"Peter Wang",tags:["linux","shadow","crypt"],date:"2017-10-11T14:11:23.000Z",draft:!1},excerpt:"",headers:[{level:3,title:"字段介绍",slug:"字段介绍",children:[]},{level:3,title:"自己写代码实现加密(C 和 Python实现)",slug:"自己写代码实现加密-c-和-python实现",children:[]},{level:3,title:"密码相关一些配置",slug:"密码相关一些配置",children:[]}],filePathRelative:"linux/linux-shadow.md",git:{updatedTime:1626591395e3,contributors:[]}}},2654:(t,n,s)=>{"use strict";s.r(n),s.d(n,{default:()=>e});const a=(0,s(6252).uE)('<p>Linux系统下，创建的用户信息如ID，家目录，默认shell保存在/etc/passwd下，该文件每行的第二位（以冒号分隔）表示密码。但真正的密码其实被加密后放在/etc/shadow里，/etc/passwd里只显示为x。本文主要介绍shadow文件各字段含义和相关的密码生命周期配置。</p><p>本文内使用的Linux环境是centos7.3, 操作时间是2017年10月12号</p><h3 id="字段介绍" tabindex="-1"><a class="header-anchor" href="#字段介绍" aria-hidden="true">#</a> 字段介绍</h3><p>/etc/shadow每行和/etc/passwd一一对应，命令<code>pwconv</code>根据/etc/passwd生成。每行由9个字段（以冒号分隔）组成，如下是每个字段的含义：</p><h5 id="_1-登录名" tabindex="-1"><a class="header-anchor" href="#_1-登录名" aria-hidden="true">#</a> 1. 登录名:</h5><p>如 root， 通过它，唯一匹配/etc/passwd中的一行</p><h5 id="_2-加密后的密码" tabindex="-1"><a class="header-anchor" href="#_2-加密后的密码" aria-hidden="true">#</a> 2. 加密后的密码：</h5><p>通常的格式为: $X$ZZZZZZ<br> X为数字，表示不同的加密算法，具体如下：</p><table><thead><tr><th style="text-align:left;">ID</th><th style="text-align:left;">Method</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">MD5</td></tr><tr><td style="text-align:left;">2a</td><td style="text-align:left;">Blowfish</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">SHA-256</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">SHA-512</td></tr></tbody></table><p>第二个星号后面的ZZZZ为加密后的密文, 具体是通过glibc里的crypt函数来实现加密。文章最后会提供一段程序，通过盐值来加密明文。可以通过<code>man 3 crypt</code>了解函数使用方法</p><p>如果该字段 是 ! 或者 *， 表示该用户无法用密码登录系统.但可以通过其他方式登录。<br> 如果该字段以感叹号!开头，其余是通常的格式，则系统认为密码被锁， ssh登录时即使输入正确的密码，也会拒绝登录. <code>usermod -L username</code> 就是使用该原理。<code>usermod -U username</code> 功能是解锁</p><h5 id="_3-密码最后修改时间" tabindex="-1"><a class="header-anchor" href="#_3-密码最后修改时间" aria-hidden="true">#</a> 3. 密码最后修改时间：</h5><p>通过<code>chage -d XX user</code>可以设置该字段<br> 值为从1970 1月1号至改密码时的天数。<br> 0表示用户需要在下次登录时修改密码<br> 空值表示关闭密码有效期功能，即密码永远有效<br> 如下是设置为0时的系统行为</p><div class="language-text ext-text"><pre class="language-text"><code>[root@linux /root]# grep test /etc/shadow\ntest:$6$IFqUZWcW$lEDn9cLw:17450:0:99999:7:::\n[root@linux /root]# chage -d 0 test\n[root@linux /root]# grep test /etc/shadow\ntest:$6$IFqUZWcW$lEDn9cLw:0:0:99999:7:::\n\n$ ssh test@XX.XX.XX.XX\ntest@XX.XX.XX.XX&#39;s password:\nYou are required to change your password immediately (root enforced)\nLast login: Wed Oct 11 23:09:07 2017 from XX.XX.XX.XX\nWARNING: Your password has expired.\nYou must change your password now and login again!\nChanging password for user test.\nChanging password for test.\n(current) UNIX password:\nNew password:\nRetype new password:\npasswd: all authentication tokens updated successfully.\nConnection to XX.XX.XX.XX closed.\n$\n然后用新密码就可以登录了， 这个可以用于管理员强制普通用户修改密码\n</code></pre></div><h5 id="_4-最小时间间隔" tabindex="-1"><a class="header-anchor" href="#_4-最小时间间隔" aria-hidden="true">#</a> 4. 最小时间间隔：</h5><p>通过<code>chage -m XXX user</code>可以设置该字段<br> 两次修改口令之间所需的最小天数。<br> 空或者0表示没有限制</p><h5 id="_5-最大时间间隔" tabindex="-1"><a class="header-anchor" href="#_5-最大时间间隔" aria-hidden="true">#</a> 5. 最大时间间隔：</h5><p>通过<code>chage -M XXX user</code>可以设置该字段<br> 两次修改口令之间所需的最大天数。一旦超过，意味着密码过期.<br> 空表示没有限制.</p><p>如果该值小于最小时间间隔，则用户无法修改密码,如下演示其行为:</p><div class="language-text ext-text"><pre class="language-text"><code>[root@linux /root]# grep test /etc/shadow\ntest:$6$xxFzM1X0$GzIbWsFIqhhcJ:17450:5:4:7:::\n[root@linux /root]#\n\n[test@linux ~]$ passwd\nChanging password for user test.\nChanging password for test.\n(current) UNIX password:\nYou must wait longer to change your password\npasswd: Authentication token manipulation error\n</code></pre></div><h5 id="_6-警告天数" tabindex="-1"><a class="header-anchor" href="#_6-警告天数" aria-hidden="true">#</a> 6. 警告天数：</h5><p>通过<code>chage -W XXX user</code>可以设置该字段<br> 在密码过期前（即 密码最后修改时间 + 最大时间间隔），提前多少天通知用户. 此时仍可以正常登陆，只是多了一行提示<br> 空或者0表示无警告.<br> 如下演示告警信息:</p><div class="language-text ext-text"><pre class="language-text"><code>[root@linux /root]# grep test /etc/shadow\ntest:$6$xxFzM1X0$GzIbWsFIqhh:17450:0:6:7:::\n[root@linux /root]#\n$ ssh test@XX.XX.XX.XX\ntest@XX.XX.XX.XX&#39;s password:\nWarning: your password will expire in 6 days\nLast login: Wed Oct 11 23:36:04 2017 from XX.XX.XX.XX\n[test@linux ~]$\n</code></pre></div><h5 id="_7-非活动周期" tabindex="-1"><a class="header-anchor" href="#_7-非活动周期" aria-hidden="true">#</a> 7. 非活动周期:</h5><p>通过<code>chage -I XXX user</code>可以设置该字段<br> 表示密码过期后，多少天内用户仍可以正常登陆，但要求立即修改密码。 一旦超过该天数，系统会拒绝用户登陆<br> 空值或者0表示没有非活动期，一旦密码过期直接拒绝登陆</p><p>如下演示进入非活动期</p><div class="language-text ext-text"><pre class="language-text"><code>[root@linux /root]# chage -l test\nLast password change\t\t\t\t\t: Oct 01, 2017\nPassword expires\t\t\t\t\t: Oct 02, 2017\nPassword inactive\t\t\t\t\t: Nov 01, 2017\nAccount expires\t\t\t\t\t\t: never\nMinimum number of days between password change\t\t: 0\nMaximum number of days between password change\t\t: 1\nNumber of days of warning before password expires\t: 7\n[root@linux /root]# grep test /etc/shadow\ntest:$6$xxFzM1X0$GzIbWsFIqhhcJ:17440:0:1:7:30::\n$ ssh test@XX.XX.XX.XX\ntest@XX.XX.XX.XX&#39;s password:\nYou are required to change your password immediately (password aged)\nLast login: Wed Oct 11 23:51:05 2017 from XX.XX.XX.XX\nWARNING: Your password has expired.\nYou must change your password now and login again!\nChanging password for user test.\nChanging password for test.\n(current) UNIX password:\nNew password:\nRetype new password:\npasswd: all authentication tokens updated successfully.\nConnection to XX.XX.XX.XX closed.\n</code></pre></div><p>如下演示超过非活动期:</p><div class="language-text ext-text"><pre class="language-text"><code>[root@linux /root]# chage -l test\nLast password change\t\t\t\t\t: Oct 01, 2017\nPassword expires\t\t\t\t\t: Oct 02, 2017\nPassword inactive\t\t\t\t\t: Oct 02, 2017\nAccount expires\t\t\t\t\t\t: never\nMinimum number of days between password change\t\t: 0\nMaximum number of days between password change\t\t: 1\nNumber of days of warning before password expires\t: 7\n[root@linux /root]# grep test /etc/shadow\ntest:$6$wODB1.oE$39TBytc.5y0OkKn:17440:0:1:7:0::\n$ ssh test@10.211.55.9\ntest@10.211.55.9&#39;s password:\nYour account has expired; please contact your system administrator\nConnection closed by 10.211.55.9\n</code></pre></div><h5 id="_8-用户过期时间" tabindex="-1"><a class="header-anchor" href="#_8-用户过期时间" aria-hidden="true">#</a> 8. 用户过期时间：</h5><p>通过<code>chage -E XXX user</code>可以设置该字段<br> 用户过期时间，值表示为自19701月1号起的天数.<br> 密码过期后，用户只是无法使用密码登陆，还可以用其他方式。 一旦用户过期，任何方式都无法用该用户登陆<br> 空值表示永远不会过期<br> 0值不建议使用。解释取决于程序本身</p><h5 id="_9-其他为保留字段-为将来扩展功能用" tabindex="-1"><a class="header-anchor" href="#_9-其他为保留字段-为将来扩展功能用" aria-hidden="true">#</a> 9. 其他为保留字段，为将来扩展功能用</h5><h3 id="自己写代码实现加密-c-和-python实现" tabindex="-1"><a class="header-anchor" href="#自己写代码实现加密-c-和-python实现" aria-hidden="true">#</a> 自己写代码实现加密(C 和 Python实现)</h3><div class="language-c ext-c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;crypt.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>\n\n<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>argc<span class="token operator">!=</span><span class="token number">3</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">char</span> <span class="token operator">*</span>buf <span class="token operator">=</span> <span class="token function">crypt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;salt: %s, crypt: %s\\n&quot;</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-text ext-text"><pre class="language-text"><code>#gcc -g a.c -lcrypt  \n#grep root /etc/shadow  \nroot:$6$DEgVEU0T$mwlTGb/nTtvpIJcoIy2t9xNMgv0.IT34WLvQ7VmbWJP9rU8Ysp9JyJ8I8PxEleGPWoirdbk4VKbhtCg6P.sm1.:17450:0:99999:7:::  \n#./a.out abc \\$6\\$DEgVEU0T  \nsalt: $6$DEgVEU0T, crypt: $6$DEgVEU0T$mwlTGb/nTtvpIJcoIy2t9xNMgv0.IT34WLvQ7VmbWJP9rU8Ysp9JyJ8I8PxEleGPWoirdbk4VKbhtCg6P.sm1.  \n</code></pre></div><p>Python 2.7 自带crypt模块，它是C库 crypt的binding， 实现更简单。代码如下：</p><div class="language-text ext-text"><pre class="language-text"><code>[root@abc ~]# python\nPython 2.7.5 (default, Nov  6 2016, 00:28:07)\n[GCC 4.8.5 20150623 (Red Hat 4.8.5-11)] on linux2\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n&gt;&gt;&gt; import crypt\n&gt;&gt;&gt; crypt.crypt(&quot;abc&quot;, &quot;$6$DEgVEU0T&quot;)\n&#39;$6$DEgVEU0T$mwlTGb/nTtvpIJcoIy2t9xNMgv0.IT34WLvQ7VmbWJP9rU8Ysp9JyJ8I8PxEleGPWoirdbk4VKbhtCg6P.sm1.&#39;\n</code></pre></div><h3 id="密码相关一些配置" tabindex="-1"><a class="header-anchor" href="#密码相关一些配置" aria-hidden="true">#</a> 密码相关一些配置</h3><p>/etc/login.defs 用来存放一些与创建用户和密码相关的配置信息<br> 当使用useradd创建新用户时，系统会读取该文件，然后写入/etc/shadows.<br> 和密码相关的只要是 PASS_MAX_DAYS，PASS_MIN_DAYS，PASS_MIN_LEN，PASS_WARN_AGE，ENCRYPT_METHOD 这几个参数<br> UMASK用来定义默认的新建文件权限</p><div class="language-text ext-text"><pre class="language-text"><code>[root@linux /root]# grep ^[^#] /etc/login.defs\nMAIL_DIR\t/var/spool/mail\nPASS_MAX_DAYS\t99999\nPASS_MIN_DAYS\t0\nPASS_MIN_LEN\t5\nPASS_WARN_AGE\t7\nUID_MIN                  1000\nUID_MAX                 60000\nSYS_UID_MIN               201\nSYS_UID_MAX               999\nGID_MIN                  1000\nGID_MAX                 60000\nSYS_GID_MIN               201\nSYS_GID_MAX               999\nCREATE_HOME\tyes\nUMASK           077\nUSERGROUPS_ENAB yes\nENCRYPT_METHOD SHA512\n</code></pre></div><blockquote><p>参考：<br> man 8 pwconv<br> man 5 shadow<br> man 3 crypt</p></blockquote>',41),e={render:function(t,n){return a}}}}]);