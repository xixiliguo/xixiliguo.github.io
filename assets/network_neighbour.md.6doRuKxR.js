import{_ as s,c as i,o as a,a2 as n,ae as t}from"./chunks/framework.KQnwS2KS.js";const y=JSON.parse('{"title":"邻居子系统","description":"","frontmatter":{},"headers":[],"relativePath":"network/neighbour.md","filePath":"network/neighbour.md","lastUpdated":1754323216000}'),p={name:"network/neighbour.md"},h=n(`<h1 id="邻居子系统" tabindex="-1">邻居子系统 <a class="header-anchor" href="#邻居子系统" aria-label="Permalink to &quot;邻居子系统&quot;">​</a></h1><p>实现二层通信，在ipv4场景下根据路由结果里的目标IP，通过arp报文获取该IP的mac地址，然后填充到报文里的目的mac。 一般来说报文里的源MAC会填充为发送设备的mac。</p><h2 id="arp处理" tabindex="-1">ARP处理 <a class="header-anchor" href="#arp处理" aria-label="Permalink to &quot;ARP处理&quot;">​</a></h2><p>普通以太网设备对应表项里的<code>neigh-&gt;ops</code> 都为<code>arp_hh_ops</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> neigh_ops arp_hh_ops </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.family </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		AF_INET,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.solicit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		arp_solicit,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //调用这个函数发送 arp request消息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.error_report </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		arp_error_report,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //向上层报告error,通过发送icmp消息，路由不可达</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		neigh_resolve_output,  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	.connected_output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	neigh_resolve_output,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="tcp发包时的arp处理" tabindex="-1">TCP发包时的arp处理 <a class="header-anchor" href="#tcp发包时的arp处理" aria-label="Permalink to &quot;TCP发包时的arp处理&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ip_finish_output2</span></span>
<span class="line"><span>    --&gt; ip_neigh_for_gw   // 如果没找到网关，那就是同子网，查找目的ip的表项</span></span>
<span class="line"><span>	    --&gt; ip_neigh_gw4  // 查找是否有ipv4网关的表项</span></span>
<span class="line"><span>		    --&gt; __ipv4_neigh_lookup_noref</span></span>
<span class="line"><span>			--&gt; __neigh_create  // 如果没找到，就新建</span></span>
<span class="line"><span>		--&gt; ip_neigh_gw6  // 查找是否有ipv6网关的表项</span></span>
<span class="line"><span>	--&gt; neigh_output     //如果没有错误，则通过该函数把包发出去</span></span>
<span class="line"><span>	    --&gt; neigh_hh_output        //如果表项是connected状态且有缓冲数据，则有快速路径</span></span>
<span class="line"><span>		--&gt; neigh_resolve_output   //其他场景</span></span>
<span class="line"><span>		    --&gt; neigh_event_send</span></span>
<span class="line"><span>			    --&gt; neigh_event_send_probe</span></span>
<span class="line"><span>				    --&gt; __neigh_event_send  // 不是NUD_CONNECTED，NUD_DELAY，NUD_PROBE 这三个状态的其中之一，就发arp request</span></span></code></pre></div><p><code>neigh_event_send</code>如果返回0则直接根据表项里的mac地址填充到报文里的目的mac, 报文里的源mac是dev的mac, 然后发出去。返回1说明要么包丢弃，要么skb暂时缓冲在neigh表项的一个队列里（incomplete状态时），等收到arp response后再发。</p><p>返回 0 的情况：<br> 处于 NUD_CONNECTED | NUD_DELAY | NUD_PROBE 这三种状态其中一种<br> 处于 NUD_STALE 状态， 修改为 NUD_DELAY</p><p>返回 1 的情况：<br> 处于 NUD_NONE 状态的， 修改状态为 NUD_INCOMPLETE，设置定时器，发送 <strong>arp request</strong>，skb暂放入一个表项维护的队列里<br> 处于 NUD_INCOMPLETE 状态的， skb暂放入一个表项维护的队列里</p><p>内核参数<code>arp_announce</code> 用于主动发arp request场景，在<code>arp_solicit</code>发送arp请求时调用。决定arp request报文里的src ip 的值。<br> 0 默认值，只要skb-&gt;saddr是本机的IP就能作为arp报文里的src ip<br> 1 skb-&gt;saddr是本地IP，同时跟网卡IP，目标IP都是同子网，才能作为arp报文里的src ip<br> 2 选取网卡的主IP</p><h3 id="收到arp报文后的处理" tabindex="-1">收到arp报文后的处理 <a class="header-anchor" href="#收到arp报文后的处理" aria-label="Permalink to &quot;收到arp报文后的处理&quot;">​</a></h3><p>接收到arp requets后一般会发送are response, 如下参数是更细致的控制。</p><p><code>arp_ignore</code><br> 0 默认值，主要IP是本地的，不管是不是配置在接收包的网卡上面，都响应<br> 1 只有IP是配置在接收包的网卡上，才响应<br> 2 不仅P是配置在接收包的网卡上，而且跟src ip 是同一个子网才响应</p><p><code>arp_filter</code><br> 1 反向路由的目标网卡是接收消息的网卡时才允许响应，否则就被过滤掉。 计数器 为<code>nstat -r -z | grep ArpFilter</code><br> 0 默认值，即使请求的IP是其他网卡的， 也运行发response, 这可能是个错误，但 可以理解， 因为IP是属于主机的，不是属于某个网卡的</p><p>收到arp response后一般是更新下已有的表现， 如下参数是更细致的控制。</p><p><code>arp_accept</code><br> 定义收到免费ARP且ip不在arp表项里是的行为<br> 0 默认值， 不创建表项<br> 1 创建表项</p><h3 id="ip-命令" tabindex="-1">ip 命令 <a class="header-anchor" href="#ip-命令" aria-label="Permalink to &quot;ip 命令&quot;">​</a></h3><p>代码实现上arp表是全局变量， 但 <code>ip neigh</code> 在不同网络空间中执行的结果不一样。可以认为是隔离的，原因是 在<code>neigh_dump_table</code>函数里会检查每一个arp记录，对应的网卡的网络空间跟当前执行命令的网络空间是否一致， 一致才会返回结果。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> neigh_dump_table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> neigh_table </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">tbl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sk_buff </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">skb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> netlink_callback </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">cb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> neigh_dump_filter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> net </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">net </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sock_net</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(skb-&gt;sk);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> neighbour </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rc, h, s_h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cb-&gt;args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> idx, s_idx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> idx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cb-&gt;args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> neigh_hash_table </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nht;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NLM_F_MULTI;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (filter-&gt;dev_idx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filter-&gt;master_idx)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NLM_F_DUMP_FILTERED;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	rcu_read_lock_bh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	nht </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rcu_dereference_bh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tbl-&gt;nht);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s_h; h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nht-&gt;hash_shift); h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s_h)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			s_idx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rcu_dereference_bh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nht-&gt;hash_buckets[h]), idx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		     n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		     n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rcu_dereference_bh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n-&gt;next)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (idx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s_idx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net_eq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dev_net</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n-&gt;dev), net))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 判断网络空间是否一致</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				goto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">neigh_ifindex_filtered</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n-&gt;dev, filter-&gt;dev_idx) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			    neigh_master_filtered</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n-&gt;dev, filter-&gt;master_idx))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				goto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">neigh_fill_info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(skb, n, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NETLINK_CB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cb-&gt;skb).portid,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">					    cb-&gt;nlh-&gt;nlmsg_seq,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">					    RTM_NEWNEIGH,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">					    flags) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				rc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				goto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> out;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">next:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			idx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	rc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> skb-&gt;len;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">out:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	rcu_read_unlock_bh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	cb-&gt;args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	cb-&gt;args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> idx;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rc;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>ip -s neigh</code>可以显示更详细的信息, 下面例子中第一项里<br> 192.168.3.11 的mac地址为 68:ec:c5:f1:da:6f，属于 eth0设备。<br><code>2312/0/2312</code> 最近一次<code>used</code>,<code>confirmed</code>,<code>updated</code>的时间，自系统启动后的秒数。<br><code>probes 4</code> 代表<code>neigh-&gt;probes</code>的值</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>192.168.3.11 dev eth0 lladdr 68:ec:c5:f1:da:6f  ref 1 used 2312/0/2312probes 4 REACHABLE</span></span>
<span class="line"><span>192.168.3.1 dev eth0 lladdr f8:20:a9:3c:eb:74  ref 1 used 3/255/3probes 1 DELA</span></span></code></pre></div><p><code>ip monitor neigh</code>可以实时观察neigh表项的状态变化， 注意这里只记录是定时器超时时发生的状态变化， 当发送路径<code>neigh_event_send</code>里触发的状态变化不会体现。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># ip -ts monitor neigh</span></span>
<span class="line"><span>[2025-06-26T22:50:45.728950] 192.168.3.11 dev eth0 FAILED</span></span>
<span class="line"><span>[2025-06-26T22:50:45.729083] Deleted 192.168.3.11 dev eth0 FAILED</span></span>
<span class="line"><span>[2025-06-26T22:50:45.729511] 192.168.3.11 dev eth0 lladdr 68:ec:c5:f1:da:6f REACHABLE</span></span></code></pre></div><h3 id="内核相关的数据结构" tabindex="-1">内核相关的数据结构 <a class="header-anchor" href="#内核相关的数据结构" aria-label="Permalink to &quot;内核相关的数据结构&quot;">​</a></h3><p>全局变量<code>struct neigh_table arp_tbl</code> 是arp表，所有网络空间共用。<code>arp_tbl-&gt;nht</code>指向hash表，里面保存 所有的表项，能动态扩容。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RCU_INIT_POINTER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tbl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nht</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">neigh_hash_alloc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><p><code>struct neighbour</code>部分字段的解释：<br> neigh-&gt;used 在每次发包时更新， 单位：jiffies<br> neigh-&gt;updated 表项的状态（比如NUD_STALE变为NUD_DELAY）发生变化的最近一次的时间 单位：jiffies<br> neigh-&gt;confirmed 收到arp request后更新表项或者添加删除时时间 单位：jiffies</p><h3 id="arp状态迁移" tabindex="-1">arp状态迁移 <a class="header-anchor" href="#arp状态迁移" aria-label="Permalink to &quot;arp状态迁移&quot;">​</a></h3><p>每个邻居表项都有定时器， 超时就执行<code>neigh_timer_handler</code>会改变状态，如下是具体的状态迁移： <img src="`+t+'" alt="状态迁移"></p><p>参考：<a href="https://blogs.oracle.com/linux/post/arp-internals" target="_blank" rel="noreferrer">https://blogs.oracle.com/linux/post/arp-internals</a></p><h2 id="ipv6-ndp-处理" tabindex="-1">ipv6 ndp 处理 <a class="header-anchor" href="#ipv6-ndp-处理" aria-label="Permalink to &quot;ipv6 ndp 处理&quot;">​</a></h2>',32),l=[h];function e(k,r,E,d,g,c){return a(),i("div",null,l)}const _=s(p,[["render",e]]);export{y as __pageData,_ as default};
