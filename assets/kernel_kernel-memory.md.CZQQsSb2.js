import{_ as s,c as a,o as i,a2 as n}from"./chunks/framework.YBtj1D-X.js";const F=JSON.parse('{"title":"内存管理","description":"","frontmatter":{"title":"内存管理","date":"2021-10-17T11:37:59.000Z","draft":false},"headers":[],"relativePath":"kernel/kernel-memory.md","filePath":"kernel/kernel-memory.md","lastUpdated":1747665785000}'),p={name:"kernel/kernel-memory.md"},e=n(`<h2 id="分段" tabindex="-1">分段 <a class="header-anchor" href="#分段" aria-label="Permalink to &quot;分段&quot;">​</a></h2><p>linux并没有利用分段实现虚拟内存, 但是却利用了dpl功能实现了权限控制. 用户态DPL是3, 内核态DPL是0, 当用户态程序 CPL为3时直接访问内核态的地址时，会因权限不足而报错。所以要通过syscal, int等特别指令触发切换, 这些指令会改变CPL值</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DEFINE_PER_CPU_PAGE_ALIGNED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> gdt_page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, gdt_page) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { .gdt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * We need valid kernel segments for data and code in long mode too</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * IRET will check the segment types  kkeil 2000/10/28</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * Also sysret mandates a special GDT layout</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * TLS descriptors are currently at a different place compared to i386.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * Hopefully nobody expects them at a fixed place (Wine?)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[GDT_ENTRY_KERNEL32_CS]		</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GDT_ENTRY_INIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c09b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fffff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[GDT_ENTRY_KERNEL_CS]		</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GDT_ENTRY_INIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a09b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fffff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[GDT_ENTRY_KERNEL_DS]		</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GDT_ENTRY_INIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c093</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fffff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[GDT_ENTRY_DEFAULT_USER32_CS]	</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GDT_ENTRY_INIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c0fb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fffff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[GDT_ENTRY_DEFAULT_USER_DS]	</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GDT_ENTRY_INIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c0f3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fffff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	[GDT_ENTRY_DEFAULT_USER_CS]	</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GDT_ENTRY_INIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a0fb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fffff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} };</span></span></code></pre></div><h2 id="虚拟地址映射" tabindex="-1">虚拟地址映射 <a class="header-anchor" href="#虚拟地址映射" aria-label="Permalink to &quot;虚拟地址映射&quot;">​</a></h2><p>x86_64下面分页机制采用四级目录, 相关数据结构在<code>arch/x86/include/asm/pgtable_64_types.h</code> 如果cpu支持5级分页, 当前centos9会自动激活这个特性</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PGDIR_SHIFT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	39</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PTRS_PER_PGD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	512</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 3rd level page</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PUD_SHIFT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	30</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PTRS_PER_PUD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	512</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * PMD_SHIFT determines the size of the area a middle-level</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * page table can map</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PMD_SHIFT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	21</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PTRS_PER_PMD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	512</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * entries per page directory level</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PTRS_PER_PTE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	512</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PMD_SIZE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_AC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, UL) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PMD_SHIFT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PMD_MASK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PMD_SIZE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PUD_SIZE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_AC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, UL) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PUD_SHIFT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PUD_MASK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PUD_SIZE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PGDIR_SIZE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_AC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, UL) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PGDIR_SHIFT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PGDIR_MASK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PGDIR_SIZE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>x86_64的虚拟地址是64位, 但只使用48位用于映射到物理地址.因为处理器地址只有48条,要求内存地址48位到63位必须相同, 具体四级目录用到的位数如下:<br> PGD(9) + PUD(9) + PMD(9) + PTE(9) + 页内偏移(12)</p><p>查询当前系统一页的大小</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@localhost </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# getconf PAGE_SIZE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">4096</span></span></code></pre></div><h2 id="进程空间" tabindex="-1">进程空间 <a class="header-anchor" href="#进程空间" aria-label="Permalink to &quot;进程空间&quot;">​</a></h2><p>进程空间分为用户态地址空间和内核态地址空间, 32位下面用户态空间是3G, 内核态时1G. 分界线为宏<code>#define TASK_SIZE</code>, 这个定义了用户态空间的最大地址, 根据下面的宏, 计算出x86_64下面为<code>0x00007FFFFFFFF000</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TASK_SIZE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test_thread_flag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TIF_ADDR32) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">					IA32_PAGE_OFFSET </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TASK_SIZE_MAX)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TASK_SIZE_MAX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> __VIRTUAL_MASK_SHIFT) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PAGE_SIZE)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CONFIG_X86_5LEVEL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __VIRTUAL_MASK_SHIFT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pgtable_l5_enabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 56</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 47</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __VIRTUAL_MASK_SHIFT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	47</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>crash&gt; struct mm_struct -x 0xffff99da00e79540 | grep size</span></span>
<span class="line"><span>    task_size = 0x7ffffffff000,</span></span>
<span class="line"><span>crash&gt;</span></span></code></pre></div><p>x86_64下<br> 用户空间 0x0000000000000000 ~ 0x00007FFFFFFFF000 128T<br> 内核空间 0xFFFF800000000000 ~ 0xFFFFFFFFFFFFFFFF 128T<br> 0x00007FFFFFFFF000 到 0xFFFF800000000000 为空洞区域</p><p>在execve时,将该值设置到mm_struct上面去</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	/* Set the new mm task size. We have to do that late because it may</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * depend on TIF_32BIT which is only updated in flush_thread() on</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 * some architectures like powerpc</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	current</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">task_size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TASK_SIZE;</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">struct</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mm_struct.task_size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0xffff9f814be29f80</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    task_size</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x7ffffffff000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>在x86_64, 内核态从<code>0xffff888000000000</code> 开始映射整个物理内存</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __PAGE_OFFSET_BASE_L4</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	_AC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ffff888000000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, UL)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CONFIG_DYNAMIC_MEMORY_LAYOUT</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __PAGE_OFFSET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           page_offset_base</span></span></code></pre></div><p>如果打开了kaslr, 在<code>kernel_randomize_memory</code>里会对<code>page_offset_base</code>随机向上偏移一些位置, 如下是实际运行的cents8里的值:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">px</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> page_offset_base</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">page_offset_base</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $20 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0xffff9f7f40000000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>参考文档: Documentation/x86/x86_64/mm.txt</p><h3 id="用户态" tabindex="-1">用户态 <a class="header-anchor" href="#用户态" aria-label="Permalink to &quot;用户态&quot;">​</a></h3><p>在load_elf_binary函数里 <code>setup_new_exec</code>里设置mm-&gt;mmap_base和mm-&gt;task_size, <code>kernel.randomize_va_space = 2</code>表示需要随机化部分区域的起始地址, 包括mmap, stack等<br><code>setup_arg_pages</code>里设置mm-&gt;arg_start和mm-&gt;start_stack, 此时这两个值一样<br><code>create_elf_tables</code> 重新设置了mm-&gt;start_stack<br> start_stack指栈底, 它与arg_start之前存放了一些信息, 比如执行命令的参数个数和每一个参数的具体字符串指针, 每一个环境变量的指针. arg_start ~ arg_end, env_start ~ env_end 之间才是真正存放这些数据的地方. 在程序内部改变这些指针值就能改变参数和环境变量信息</p><h3 id="内核态" tabindex="-1">内核态 <a class="header-anchor" href="#内核态" aria-label="Permalink to &quot;内核态&quot;">​</a></h3><p>page_offset_base开始的64T范围内是直接映射内存, 这些虚拟地址对应的物理地址就是 减去page_offset_base<br> page_offset_base默认是0xffff888000000000, 如果<code>CONFIG_RANDOMIZE_MEMORY=y</code>则会随机偏移些<br> 每个进程对应的task_struct分配在这个区域, 可以减去page_offset_base直接得到物理地址</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>crash&gt; vtop ffff9e68002398c0</span></span>
<span class="line"><span>VIRTUAL           PHYSICAL</span></span>
<span class="line"><span>ffff9e68002398c0  1002398c0</span></span>
<span class="line"><span></span></span>
<span class="line"><span>PGD DIRECTORY: ffffffffb2e10000</span></span>
<span class="line"><span>PAGE DIRECTORY: 1c601067</span></span>
<span class="line"><span>   PUD: 1c601d00 =&gt; 1c606067</span></span>
<span class="line"><span>   PMD: 1c606008 =&gt; 1057a9063</span></span>
<span class="line"><span>   PTE: 1057a91c8 =&gt; 8000000100239063</span></span>
<span class="line"><span>  PAGE: 100239000</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      PTE         PHYSICAL   FLAGS</span></span>
<span class="line"><span>8000000100239063  100239000  (PRESENT|RW|ACCESSED|DIRTY|NX)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      PAGE        PHYSICAL      MAPPING       INDEX CNT FLAGS</span></span>
<span class="line"><span>ffffdba004008e40 100239000 dead000000000008        0  0 17ffffc0000000</span></span>
<span class="line"><span>crash&gt; px page_offset_base</span></span>
<span class="line"><span>page_offset_base = $15 = 0xffff9e6700000000</span></span>
<span class="line"><span>crash&gt; eval ffff9e68002398c0 - 0xffff9e6700000000</span></span>
<span class="line"><span>hexadecimal: 1002398c0</span></span>
<span class="line"><span>    decimal: 4297300160</span></span>
<span class="line"><span>      octal: 40010714300</span></span>
<span class="line"><span>     binary: 0000000000000000000000000000000100000000001000111001100011000000</span></span>
<span class="line"><span>crash&gt;</span></span></code></pre></div><p>vmalloc_base从 0xffffc90000000000UL开始, 随机偏移后, 可通过如下命令获取当前值</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>crash&gt; px vmalloc_base</span></span>
<span class="line"><span>vmalloc_base = $16 = 0xffffb9cb00000000</span></span>
<span class="line"><span>crash&gt;</span></span></code></pre></div><p>vmemmap_base从 0xffffea0000000000UL开始, 随机偏移后, 可通过如下命令获取当前值, 存放 struct page</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>crash&gt; px vmemmap_base</span></span>
<span class="line"><span>vmemmap_base = $17 = 0xffffdba000000000</span></span>
<span class="line"><span>crash&gt;</span></span></code></pre></div><p>内核的代码段从__START_KERNEL_map开始, 对应的物理地址是减去 __START_KERNEL_map 加上 phys_base</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __START_KERNEL_map</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	_AC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ffffffff80000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, UL)</span></span></code></pre></div><h2 id="物理分配" tabindex="-1">物理分配 <a class="header-anchor" href="#物理分配" aria-label="Permalink to &quot;物理分配&quot;">​</a></h2><p>当前主流都是numa结构, 即一个CPU对应本地内存, 当本地内存不够, 再通过总线访问其他节点的内存. 内存管理的最小单位是页, 通常是4K, 它属于Zone, Zone属于node节点节. node节点就是numa节点</p><p>如下表示该OS可以支持 1&lt;&lt; 10 == 1024个numa节点</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@localhost </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# grep CONFIG_NODES_SHIFT /boot/config-5.14.0-22.el9.x86_64</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CONFIG_NODES_SHIFT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">10</span></span></code></pre></div><p>一台4u8G的机器, 只有一个numa. cpu0~3属于node0</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root@localhost </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]# lscpu </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NUMA</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NUMA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NUMA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CPU</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">               0-3</span></span></code></pre></div><p>node0里面的跟物理内存的相关的数据如下</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pglist_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">node_data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[MAX_NUMNODES] __read_mostly;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EXPORT_SYMBOL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node_data);</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>crash&gt; p node_data[0]</span></span>
<span class="line"><span>$22 = (pg_data_t *) 0xffff94e6dffd1000</span></span>
<span class="line"><span>crash&gt;  struct pg_data_t.node_id,nr_zones,node_start_pfn,node_present_pages,node_spanned_pages -x 0xffff94e6dffd1000</span></span>
<span class="line"><span>  node_id = 0x0,</span></span>
<span class="line"><span>  nr_zones = 0x3,</span></span>
<span class="line"><span>  node_start_pfn = 0x1,              //从页号1开始</span></span>
<span class="line"><span>  node_present_pages = 0x1fff8e,     //该node管理0x1fff8e个可用的页. </span></span>
<span class="line"><span>  node_spanned_pages = 0x21ffff,     //管理0x21ffff页(8G), 除了包含present_pages, 还包含了空洞的物理地址. 这些页不可用.</span></span>
<span class="line"><span>crash&gt; struct zone.name,zone_start_pfn,spanned_pages,present_pages,managed_pages -x ffff94e6dffd1000 5</span></span>
<span class="line"><span>  name = 0xffffffffa9fa3ed3 &quot;DMA&quot;,</span></span>
<span class="line"><span>  zone_start_pfn = 0x1,</span></span>
<span class="line"><span>  spanned_pages = 0xfff,</span></span>
<span class="line"><span>  present_pages = 0xf9e,</span></span>
<span class="line"><span>  managed_pages = {</span></span>
<span class="line"><span>    counter = 0xf00</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  name = 0xffffffffa9f4c32c &quot;DMA32&quot;,</span></span>
<span class="line"><span>  zone_start_pfn = 0x1000,</span></span>
<span class="line"><span>  spanned_pages = 0xff000,</span></span>
<span class="line"><span>  present_pages = 0xdeff0,</span></span>
<span class="line"><span>  managed_pages = {</span></span>
<span class="line"><span>    counter = 0xcaff0</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  name = 0xffffffffa9f4c222 &quot;Normal&quot;,</span></span>
<span class="line"><span>  zone_start_pfn = 0x100000,</span></span>
<span class="line"><span>  spanned_pages = 0x120000,</span></span>
<span class="line"><span>  present_pages = 0x120000,</span></span>
<span class="line"><span>  managed_pages = {</span></span>
<span class="line"><span>    counter = 0x1145ec</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  name = 0xffffffffa9f4c229 &quot;Movable&quot;,</span></span>
<span class="line"><span>  zone_start_pfn = 0x0,</span></span>
<span class="line"><span>  spanned_pages = 0x0,</span></span>
<span class="line"><span>  present_pages = 0x0,</span></span>
<span class="line"><span>  managed_pages = {</span></span>
<span class="line"><span>    counter = 0x0</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  name = 0xffffffffa9f9924d &quot;Device&quot;,</span></span>
<span class="line"><span>  zone_start_pfn = 0x0,</span></span>
<span class="line"><span>  spanned_pages = 0x0,</span></span>
<span class="line"><span>  present_pages = 0x0,</span></span>
<span class="line"><span>  managed_pages = {</span></span>
<span class="line"><span>    counter = 0x0</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>crash&gt;</span></span></code></pre></div><p>0x1fff8e个可用页等于 8388152K</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[root@localhost ~]# dmesg -T | grep Mem</span></span>
<span class="line"><span>[Sun Dec 26 11:12:09 2021] Memory: 3442876K/8388152K available (14345K kernel code, 5931K rwdata, 8944K rodata, 2656K init, 5448K bss, 556100K reserved, 0K cma-reserved)</span></span></code></pre></div><p>上面可以看到64位下有三个zone, 分别是 DMA, DMA32, Normal<br> struct page代表一页, 页通过伙伴系统管理. 所有空闲页挂在11个页块链表上. 每个链表包含相同连续页的地址. 有 1、2、4、8、16、32、64、128、256、512 和 1024. 所以一次最大可申请1024个物理地址连续的页(即4M的内存). 这些链表存在struct zone.free_area<br> 第 i 个页块链表中，页块中页的数目为 2^i</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MAX_ORDER</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 11</span></span></code></pre></div><p>order为i时, 意味着申请 2 ^ i 个连续页, 如果free_area[i]没有, 则去free_area[i+1]里面找, 依次类推</p>`,47),l=[e];function t(h,k,d,r,g,c){return i(),a("div",null,l)}const y=s(p,[["render",t]]);export{F as __pageData,y as default};
