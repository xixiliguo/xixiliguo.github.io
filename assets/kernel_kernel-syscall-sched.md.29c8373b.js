import{_ as s,c as n,o as a,a as l}from"./app.526dca4e.js";const C=JSON.parse('{"title":"\u7CFB\u7EDF\u8C03\u7528\u4E0E\u8FDB\u7A0B\u8C03\u5EA6","description":"","frontmatter":{"title":"\u7CFB\u7EDF\u8C03\u7528\u4E0E\u8FDB\u7A0B\u8C03\u5EA6","date":"2021-09-20T13:45:56.000Z","draft":false},"headers":[{"level":2,"title":"64\u4F4D\u4E0B\u7CFB\u7EDF\u8C03\u7528\u7EA6\u5B9A","slug":"_64\u4F4D\u4E0B\u7CFB\u7EDF\u8C03\u7528\u7EA6\u5B9A"},{"level":2,"title":"task_struct\u90E8\u5206\u5B57\u6BB5\u7684\u542B\u4E49","slug":"task-struct\u90E8\u5206\u5B57\u6BB5\u7684\u542B\u4E49"},{"level":2,"title":"\u8FDB\u7A0B\u7BA1\u7406","slug":"\u8FDB\u7A0B\u7BA1\u7406"},{"level":2,"title":"\u8C03\u5EA6\u7EC6\u8282","slug":"\u8C03\u5EA6\u7EC6\u8282"}],"relativePath":"kernel/kernel-syscall-sched.md","lastUpdated":1657810449000}'),p={name:"kernel/kernel-syscall-sched.md"},o=l(`<p>\u8BB0\u5F55\u4E00\u4E9B\u5173\u4E8E\u5185\u6838\u7CFB\u7EDF\u8C03\u7528\u548C\u8FDB\u7A0B\u8C03\u5EA6\u76F8\u5173\u7684\u77E5\u8BC6\u70B9, \u4EE55.14\u5185\u6838\u4E3A\u4F8B</p><h2 id="_64\u4F4D\u4E0B\u7CFB\u7EDF\u8C03\u7528\u7EA6\u5B9A" tabindex="-1">64\u4F4D\u4E0B\u7CFB\u7EDF\u8C03\u7528\u7EA6\u5B9A <a class="header-anchor" href="#_64\u4F4D\u4E0B\u7CFB\u7EDF\u8C03\u7528\u7EA6\u5B9A" aria-hidden="true">#</a></h2><p>c\u8BED\u8A00\u7684\u51FD\u6570\u8C03\u7528\u8FC7\u7A0B\u4E2D:<br> RDI, RSI, RDX, RCX, R8, R9 \u5206\u522B\u4EE3\u8868\u7B2C\u4E00\u4E2A,\u4E8C\u4E2A,\u4E09\u4E2A... \u53C2\u6570, RAX\u4EE3\u8868\u8FD4\u56DE\u503C<br> RBX, RSP, RBP, and R12\u2013R15 \u662F\u8C03\u7528\u8005\u4FDD\u5B58\u5BC4\u5B58\u5668, \u610F\u601D\u662F\u8C03\u7528\u8005\u5148\u4FDD\u5B58\u539F\u5148\u503C,\u5728\u5B50\u51FD\u6570\u8FD4\u56DE\u65F6\u9700\u8981\u6062\u590D,\u4EE5\u786E\u4FDD\u8BE5\u5BC4\u5B58\u5668\u7684\u503C\u6CA1\u53D8</p><p>Linux\u7CFB\u7EDF\u8C03\u7528\u65F6\u7A0D\u5FAE\u6709\u4E00\u70B9\u4E0D\u540C, \u7B2C\u4E09\u4E2A\u53C2\u6570\u4E0D\u662F\u653E\u5230RCX, \u800C\u662FR10. RCX\u7528\u4E8E\u4FDD\u5B58\u5207\u6362\u65F6\u7528\u6237\u6001\u65F6\u7684RIP</p><p>\u4E0B\u9762\u662Fgolang\u5728linux amd64\u7684\u7CFB\u7EDF\u8C03\u7528\u6C47\u7F16</p><div class="language-go"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)</span></span>
<span class="line"><span style="color:#A6ACCD;">TEXT \xB7</span><span style="color:#82AAFF;">Syscall6</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SB</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;">NOSPLIT</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">$</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">80</span></span>
<span class="line"><span style="color:#A6ACCD;">	CALL	runtime\xB7</span><span style="color:#82AAFF;">entersyscall</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SB</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	MOVQ	a1</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">8</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">FP</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> DI</span></span>
<span class="line"><span style="color:#A6ACCD;">	MOVQ	a2</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">16</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">FP</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> SI</span></span>
<span class="line"><span style="color:#A6ACCD;">	MOVQ	a3</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">24</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">FP</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> DX</span></span>
<span class="line"><span style="color:#A6ACCD;">	MOVQ	a4</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">32</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">FP</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> R10  </span><span style="color:#676E95;font-style:italic;">// \u5B58\u653E\u7B2C\u4E09\u4E2A\u53C2\u6570</span></span>
<span class="line"><span style="color:#A6ACCD;">	MOVQ	a5</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">40</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">FP</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> R8</span></span>
<span class="line"><span style="color:#A6ACCD;">	MOVQ	a6</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">48</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">FP</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> R9</span></span>
<span class="line"><span style="color:#A6ACCD;">	MOVQ	trap</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">FP</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> AX	</span><span style="color:#676E95;font-style:italic;">// syscall entry</span></span>
<span class="line"><span style="color:#A6ACCD;">	SYSCALL</span></span>
<span class="line"><span style="color:#A6ACCD;">	CMPQ	AX</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> $</span><span style="color:#F78C6C;">0xfffffffffffff001</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// \u5224\u65ADAX \u662F\u5426\u5C0F\u4E8E MAX_ERRNO:-4095 , \u662F\u5219\u6210\u529F </span></span>
<span class="line"><span style="color:#A6ACCD;">	JLS	ok6</span></span>
<span class="line"><span style="color:#A6ACCD;">	MOVQ	$</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> r1</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">56</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">FP</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	MOVQ	$</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> r2</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">64</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">FP</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	NEGQ	AX</span></span>
<span class="line"><span style="color:#A6ACCD;">	MOVQ	AX</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">72</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">FP</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">             </span><span style="color:#676E95;font-style:italic;">// \u9519\u8BEF\u65F6, \u5219\u8D1F\u503C\u53D8\u6B63\u503C, \u8FD4\u56DE\u5177\u4F53\u7684\u9519\u8BEF\u7801</span></span>
<span class="line"><span style="color:#A6ACCD;">	CALL	runtime\xB7</span><span style="color:#82AAFF;">exitsyscall</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SB</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	RET</span></span>
<span class="line"><span style="color:#A6ACCD;">ok6</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">	MOVQ	AX</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> r1</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">56</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">FP</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	MOVQ	DX</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> r2</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">64</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">FP</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	MOVQ	$</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> err</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">72</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">FP</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	CALL	runtime\xB7</span><span style="color:#82AAFF;">exitsyscall</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">SB</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	RET</span></span>
<span class="line"></span></code></pre></div><p>\u7CFB\u7EDF\u8C03\u7528\u8FD4\u56DE\u524D, \u4F1A\u6267\u884C<code>callq</code>, \u5C06\u6709\u7B26\u53F7\u76844\u5B57\u8282\u6269\u5C55\u4E3A8\u5B57\u8282. \u6BD4\u59820x80000000 \u53D8\u4E3A ffffffff80000000, 0x40000000\u4ECD\u662F40000000<br><a href="https://stackoverflow.com/questions/6555094/what-does-cltq-do-in-assembly" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/6555094/what-does-cltq-do-in-assembly</a><br> \u6240\u6709\u7CFB\u7EDF\u8C03\u7528\u7684\u8FD4\u56DE\u9519\u8BEF\u503C\u8303\u56F4\u4E3A[-4095, -1], \u6240\u4EE5\u53EF\u4EE5\u65E0\u7B26\u53F7\u5224\u65AD RAX \u5C0F\u4E8E 0xfffffffffffff001, \u5219\u4E3A\u6B63\u5E38\u8FD4\u56DE</p><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Kernel pointers have redundant information, so we can use a</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * scheme where we can return either an error code or a normal</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * pointer with the same return value.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * This should be a per-architecture thing, to allow different</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * error and pointer decisions.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MAX_ERRNO</span><span style="color:#A6ACCD;">	</span><span style="color:#F78C6C;">4095</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#ifndef</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__ASSEMBLY__</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">IS_ERR_VALUE</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">unlikely</span><span style="color:#89DDFF;">((</span><span style="color:#C792EA;">unsigned</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">long</span><span style="color:#89DDFF;">)(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*)(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">unsigned</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">long</span><span style="color:#89DDFF;">)-</span><span style="color:#A6ACCD;">MAX_ERRNO</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">__x64_sys_recv</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">:		</span><span style="color:#89DDFF;">&lt;--</span><span style="color:#A6ACCD;"> syscall with </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> parameters</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">	callq	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">__fentry__</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">	mov	</span><span style="color:#F78C6C;">0x70</span><span style="color:#89DDFF;">(%</span><span style="color:#A6ACCD;">rdi</span><span style="color:#89DDFF;">),%</span><span style="color:#A6ACCD;">rdi	</span><span style="color:#89DDFF;">&lt;--</span><span style="color:#A6ACCD;"> decode regs</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">di</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">	mov	</span><span style="color:#F78C6C;">0x68</span><span style="color:#89DDFF;">(%</span><span style="color:#A6ACCD;">rdi</span><span style="color:#89DDFF;">),%</span><span style="color:#A6ACCD;">rsi	</span><span style="color:#89DDFF;">&lt;--</span><span style="color:#A6ACCD;"> decode regs</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">si</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">	mov	</span><span style="color:#F78C6C;">0x60</span><span style="color:#89DDFF;">(%</span><span style="color:#A6ACCD;">rdi</span><span style="color:#89DDFF;">),%</span><span style="color:#A6ACCD;">rdx	</span><span style="color:#89DDFF;">&lt;--</span><span style="color:#A6ACCD;"> decode regs</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">dx</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">	mov	</span><span style="color:#F78C6C;">0x38</span><span style="color:#89DDFF;">(%</span><span style="color:#A6ACCD;">rdi</span><span style="color:#89DDFF;">),%</span><span style="color:#A6ACCD;">rcx	</span><span style="color:#89DDFF;">&lt;--</span><span style="color:#A6ACCD;"> decode regs</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">r10</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">	xor	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">r9d</span><span style="color:#89DDFF;">,%</span><span style="color:#A6ACCD;">r9d	</span><span style="color:#89DDFF;">&lt;--</span><span style="color:#A6ACCD;"> clear </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">r9</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">	xor	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">r8d</span><span style="color:#89DDFF;">,%</span><span style="color:#A6ACCD;">r8d	</span><span style="color:#89DDFF;">&lt;--</span><span style="color:#A6ACCD;"> clear </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">r8</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">	callq	__sys_recvfrom	</span><span style="color:#89DDFF;">&lt;--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#A6ACCD;"> the actual work in </span><span style="color:#82AAFF;">__sys_recvfrom</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">				    which takes </span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;"> arguments</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">	cltq			</span><span style="color:#89DDFF;">&lt;--</span><span style="color:#A6ACCD;"> extend </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> value to </span><span style="color:#F78C6C;">64</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">bit</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">	retq			</span><span style="color:#89DDFF;">&lt;--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span></span>
<span class="line"></span></code></pre></div><p>64\u4F4D\u4E0B\u4E0D\u662F\u901A\u8FC7INT 0x80, \u800C\u662F\u901A\u8FC7syscall\u6307\u4EE4\u89E6\u53D1\u7CFB\u7EDF\u8C03\u7528, \u5BF9\u5E94\u7684\u51FD\u6570\u4E3A<code>entry_SYSCALL_64</code>, \u5728\u8FD9\u4E2A\u51FD\u6570\u91CC, \u7528\u6237\u6001\u7684\u5F88\u591A\u539F\u59CB\u4FE1\u606F,\u6BD4\u5982rip,rsp\u90FD\u4FDD\u5B58\u5728<code>struct pt_regs</code>\u91CC, \u7136\u540E entry_SYSCALL_64 --&gt; do_syscall_64<br> \u901A\u8FC7\u7ED9<code>MSR_LSTAR</code>\u5BC4\u5B58\u5668\u5199\u5165entry_SYSCALL_64\u5730\u5740, \u90A3\u4E48\u6267\u884Csyscall\u6307\u4EE4\u65F6\u5C31\u662F\u5207\u6362\u5230\u6C47\u7F16entry_SYSCALL_64</p><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">wrmsr</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">MSR_STAR</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">__USER32_CS </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> __KERNEL_CS</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">wrmsrl</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">MSR_LSTAR</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">unsigned</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">long</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">entry_SYSCALL_64</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>\u5C06\u7528\u6237\u6001\u65F6\u7684rsp\u4FDD\u5B58\u5230per cpu\u53D8\u91CFcpu_tss_rw\u91CC\u9762, \u5207\u6362cpu\u4E3A\u5185\u6838\u6A21\u5F0F, \u7136\u540E\u4F9D\u6B21\u5C06\u5BC4\u5B58\u5668\u91CC\u7684\u503Cpush, \u586B\u5145pt_regs\u7ED3\u6784\u4F53. \u4FDD\u5B58\u6240\u6709\u7528\u6237\u6001\u76F8\u5173\u7684\u4FE1\u606F<br> \u4ECE\u4EE3\u7801\u4E0A\u770B, \u6267\u884Cdo_syscall_64\u524D\u4E2D\u65AD\u662F\u5173\u95ED\u7684, \u5728<code>syscall_enter_from_user_mode</code>\u91CC\u6253\u5F00, \u4ECE<code>do_syscall_64</code>\u8FD4\u56DE\u65F6\u53C8\u5173\u95ED\u4E86, \u7B49\u6267\u884C\u4E86sysret\u540E\u5E94\u8BE5\u53C8\u6253\u5F00\u4E86</p><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">SYM_CODE_START</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">entry_SYSCALL_64</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	UNWIND_HINT_EMPTY</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	swapgs</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/* tss.sp2 is scratch space. */</span></span>
<span class="line"><span style="color:#A6ACCD;">	movq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">rsp</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PER_CPU_VAR</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cpu_tss_rw </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> TSS_sp2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	SWITCH_TO_KERNEL_CR3 scratch_reg</span><span style="color:#89DDFF;">=%</span><span style="color:#A6ACCD;">rsp</span></span>
<span class="line"><span style="color:#A6ACCD;">	movq	</span><span style="color:#82AAFF;">PER_CPU_VAR</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cpu_current_top_of_stack</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">rsp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">SYM_INNER_LABEL</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">entry_SYSCALL_64_safe_stack</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SYM_L_GLOBAL</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/* Construct struct pt_regs on stack */</span></span>
<span class="line"><span style="color:#A6ACCD;">	pushq	$__USER_DS				</span><span style="color:#676E95;font-style:italic;">/* pt_regs-&gt;ss */</span></span>
<span class="line"><span style="color:#A6ACCD;">	pushq	</span><span style="color:#82AAFF;">PER_CPU_VAR</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">cpu_tss_rw </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> TSS_sp2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/* pt_regs-&gt;sp */</span></span>
<span class="line"><span style="color:#A6ACCD;">	pushq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">r11					</span><span style="color:#676E95;font-style:italic;">/* pt_regs-&gt;flags */</span></span>
<span class="line"><span style="color:#A6ACCD;">	pushq	$__USER_CS				</span><span style="color:#676E95;font-style:italic;">/* pt_regs-&gt;cs */</span></span>
<span class="line"><span style="color:#A6ACCD;">	pushq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">rcx					</span><span style="color:#676E95;font-style:italic;">/* pt_regs-&gt;ip */</span></span>
<span class="line"><span style="color:#82AAFF;">SYM_INNER_LABEL</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">entry_SYSCALL_64_after_hwframe</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> SYM_L_GLOBAL</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	pushq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">rax					</span><span style="color:#676E95;font-style:italic;">/* pt_regs-&gt;orig_ax */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	PUSH_AND_CLEAR_REGS rax</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">$</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">ENOSYS</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/* IRQs are off. */</span></span>
<span class="line"><span style="color:#A6ACCD;">	movq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">rsp</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">rdi</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/* Sign extend the lower 32bit as syscall numbers are treated as int */</span></span>
<span class="line"><span style="color:#A6ACCD;">	movslq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">eax</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">rsi</span></span>
<span class="line"><span style="color:#A6ACCD;">	call	do_syscall_64		</span><span style="color:#676E95;font-style:italic;">/* returns with IRQs disabled */</span></span>
<span class="line"></span></code></pre></div><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">__visible noinstr </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">do_syscall_64</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> pt_regs </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">regs</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> nr</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">add_random_kstack_offset</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">	nr </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">syscall_enter_from_user_mode</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">regs</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> nr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/* syscall_enter_from_user_mode\u91CC\u9762\u4F1A\u68C0\u67E5\u4E00\u4E9B\u6743\u9650, \u6BD4\u5982\u662F\u5426\u6EE1\u8DB3SECCOMP. \u5BF9\u7CFB\u7EDF\u8C03\u7528\u7684\u5BA1\u8BA1\u4E5F\u5728\u8FD9\u91CC </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * \u5982\u679C\u8FD4\u56DE-1, \u5219\u4E0D\u4F1A\u6267\u884C\u4E0B\u9762\u7684\u51FD\u6570, \u6700\u7EC8\u7ED9\u7528\u6237\u6001\u7A0B\u5E8F\u8FD4\u56DE -ENOSYS</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">instrumentation_begin</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#82AAFF;">do_syscall_x64</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">regs</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> nr</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#82AAFF;">do_syscall_x32</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">regs</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> nr</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> nr </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#676E95;font-style:italic;">/* Invalid system call, but still a system call. */</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">regs</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">ax</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">__x64_sys_ni_syscall</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">regs</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">instrumentation_end</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">syscall_exit_to_user_mode</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">regs</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>\u6240\u6709\u7684\u7CFB\u7EDF\u8C03\u7528\u7684\u5177\u4F53\u5B9E\u73B0\u51FD\u6570, \u6C47\u603B\u5230<code>sys_call_table</code>,\u540C\u65F6<code>arch/x86/entry/syscalls/syscall_64.tbl</code> \u91CC\u4E5F\u53EF\u4EE5\u76F4\u63A5\u67E5\u8BE2\u7CFB\u7EDF\u8C03\u7528\u53F7\u4E0E\u5177\u4F53\u5B9E\u73B0\u51FD\u6570\u540D\u7684\u5BF9\u5E94\u5173\u7CFB</p><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">crash</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> whatis sys_call_table</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sys_call_ptr_t</span><span style="color:#A6ACCD;"> sys_call_table</span><span style="color:#C792EA;">[]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">crash</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> p sys_call_table</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">$</span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">sys_call_ptr_t</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0xffffffffb9b19c30</span></span>
<span class="line"><span style="color:#A6ACCD;">crash</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> sym </span><span style="color:#F78C6C;">0xffffffffb9b19c30</span></span>
<span class="line"><span style="color:#82AAFF;">ffffffffb9b19c30</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">T</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> __x64_sys_read </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">usr</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">src</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">debug</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">kernel</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">4.18.0</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">305.3.1.el8_4</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">linux</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">4.18.0</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">305.3.1.el8.x86_64</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">read_write.c: </span><span style="color:#F78C6C;">586</span></span>
<span class="line"><span style="color:#A6ACCD;">crash</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><code>syscall_exit_to_user_mode -&gt; __syscall_exit_to_user_mode_work --&gt; exit_to_user_mode_prepare --&gt; exit_to_user_mode_loop</code>, \u5728exit_to_user_mode_loop\u91CC\u6709\u4E00\u4E9B\u91CD\u8981\u7684\u4E8B\u60C5\u8981\u505A.<br> \u5982\u679C\u8BE5\u8FDB\u7A0B\u88AB\u6807\u8BB0\u4E3A\u9700\u8981\u8C03\u5EA6,\u5373\u9700\u8981\u8BA9\u51FAcpu,\u8BA9\u5176\u4ED6\u8FDB\u7A0B\u6267\u884C<br> \u8BE5\u8FDB\u7A0B\u6536\u5230\u4FE1\u53F7\u9700\u8981\u5904\u7406, \u4E5F\u662F\u5728\u9000\u51FAsyscall\u8FD4\u56DE\u7528\u6237\u6001\u7A7A\u95F4\u524D\u6267\u884C\u7684</p><p><code>mov 0x38(%rdi),%ecx</code> \u53EF\u4EE5\u770B\u5230\u786E\u5B9E\u662F\u5C06\u9677\u5165\u5185\u6838\u6001\u524D\u7684R10(\u4EE3\u8868\u7B2C\u4E09\u4E2A\u53C2\u6570)\u8D4B\u503C\u7ED9RCX, \u6EE1\u8DB3\u540E\u7EEDC\u8BED\u8A00\u7684\u8C03\u7528\u89C4\u7EA6</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">crash&gt; dis -l __x64_sys_recv</span></span>
<span class="line"><span style="color:#A6ACCD;">/usr/src/debug/kernel-5.14.0-22.el9/linux-5.14.0-22.el9.x86_64/net/socket.c: 2111</span></span>
<span class="line"><span style="color:#A6ACCD;">0xffffffffa21f4400 &lt;__x64_sys_recv&gt;:    nopl   0x0(%rax,%rax,1) [FTRACE NOP]</span></span>
<span class="line"><span style="color:#A6ACCD;">/usr/src/debug/kernel-5.14.0-22.el9/linux-5.14.0-22.el9.x86_64/net/socket.c: 2114</span></span>
<span class="line"><span style="color:#A6ACCD;">0xffffffffa21f4405 &lt;__x64_sys_recv+5&gt;:  mov    0x60(%rdi),%rdx</span></span>
<span class="line"><span style="color:#A6ACCD;">0xffffffffa21f4409 &lt;__x64_sys_recv+9&gt;:  mov    0x68(%rdi),%rsi</span></span>
<span class="line"><span style="color:#A6ACCD;">0xffffffffa21f440d &lt;__x64_sys_recv+13&gt;: xor    %r9d,%r9d</span></span>
<span class="line"><span style="color:#A6ACCD;">0xffffffffa21f4410 &lt;__x64_sys_recv+16&gt;: xor    %r8d,%r8d</span></span>
<span class="line"><span style="color:#A6ACCD;">0xffffffffa21f4413 &lt;__x64_sys_recv+19&gt;: mov    0x38(%rdi),%ecx</span></span>
<span class="line"><span style="color:#A6ACCD;">0xffffffffa21f4416 &lt;__x64_sys_recv+22&gt;: mov    0x70(%rdi),%edi</span></span>
<span class="line"><span style="color:#A6ACCD;">0xffffffffa21f4419 &lt;__x64_sys_recv+25&gt;: call   0xffffffffa21f4210 &lt;__sys_recvfrom&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">/usr/src/debug/kernel-5.14.0-22.el9/linux-5.14.0-22.el9.x86_64/net/socket.c: 2111</span></span>
<span class="line"><span style="color:#A6ACCD;">0xffffffffa21f441e &lt;__x64_sys_recv+30&gt;: cltq</span></span>
<span class="line"><span style="color:#A6ACCD;">0xffffffffa21f4420 &lt;__x64_sys_recv+32&gt;: ret</span></span>
<span class="line"><span style="color:#A6ACCD;">crash&gt; struct pt_regs -xo | grep 0x38</span></span>
<span class="line"><span style="color:#A6ACCD;">  [0x38] unsigned long r10;</span></span>
<span class="line"><span style="color:#A6ACCD;">crash&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p><code>sysretq</code>\u6307\u4EE4\u4ECERCS\u8F7D\u5165\u503C\u5230RIP, \u8FD4\u56DE\u7528\u6237\u6001</p><p>\u4ECE\u4EE3\u7801\u4E2D\u641C\u7D22\u7CFB\u7EDF\u8C03\u7528\u5177\u4F53\u51FD\u6570\u7684\u6280\u5DE7: \u4EE5open\u4E3A\u4F8B, \u5B83\u6709\u4E09\u4E2A\u53C2\u6570, \u5219\u901A\u8FC7<code>define3(open</code> \u5C31\u80FD\u5F88\u5FEB\u627E\u5230\u5BF9\u5E94\u7684\u5B9E\u73B0</p><p>\u53C2\u8003:<br><a href="http://abcdxyzk.github.io/blog/2012/11/23/assembly-args/" target="_blank" rel="noopener noreferrer">http://abcdxyzk.github.io/blog/2012/11/23/assembly-args/</a><br><a href="https://en.wikipedia.org/wiki/X86_calling_conventions" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/X86_calling_conventions</a><br><a href="https://cloud.tencent.com/developer/article/1492374" target="_blank" rel="noopener noreferrer">https://cloud.tencent.com/developer/article/1492374</a></p><h2 id="task-struct\u90E8\u5206\u5B57\u6BB5\u7684\u542B\u4E49" tabindex="-1">task_struct\u90E8\u5206\u5B57\u6BB5\u7684\u542B\u4E49 <a class="header-anchor" href="#task-struct\u90E8\u5206\u5B57\u6BB5\u7684\u542B\u4E49" aria-hidden="true">#</a></h2><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> task_struct </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">u64        utime</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//\u7528\u6237\u6001\u6D88\u8017\u7684CPU\u65F6\u95F4</span></span>
<span class="line"><span style="color:#F07178;">u64        stime</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//\u5185\u6838\u6001\u6D88\u8017\u7684CPU\u65F6\u95F4</span></span>
<span class="line"><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">long</span><span style="color:#F07178;">      nvcsw</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//\u81EA\u613F(voluntary)\u4E0A\u4E0B\u6587\u5207\u6362\u8BA1\u6570</span></span>
<span class="line"><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">long</span><span style="color:#F07178;">      nivcsw</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//\u975E\u81EA\u613F(involuntary)\u4E0A\u4E0B\u6587\u5207\u6362\u8BA1\u6570</span></span>
<span class="line"><span style="color:#F07178;">u64        start_time</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//\u8FDB\u7A0B\u542F\u52A8\u65F6\u95F4\uFF0C\u4E0D\u5305\u542B\u7761\u7720\u65F6\u95F4</span></span>
<span class="line"><span style="color:#F07178;">u64        real_start_time</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//\u8FDB\u7A0B\u542F\u52A8\u65F6\u95F4\uFF0C\u5305\u542B\u7761\u7720\u65F6\u95F4</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>utime, stime\u5355\u4F4D\u4E3Ans, \u4E24\u6B21\u65F6\u949F\u4E2D\u65AD\u89E6\u53D1\u7684\u65F6\u95F4\u95F4\u9694\u4E3A<code>1/HZ</code>. \u5185\u6838\u91CC\u9762HZ\u4E00\u822C\u662F1000,(centos\u662F1000, ubuntu\u662F250), \u5728\u51FD\u6570<code>account_process_tick</code>\u91CC\u6BCF\u6B21\u66F4\u65B0utime,stime\u90FD\u662F\u589E\u52A0<code>TICK_NSEC</code> - steal-time\`, TICK_NSEC\u4E3A1000000,</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">root@localhost </span><span style="color:#89DDFF;">~]</span><span style="color:#676E95;font-style:italic;"># grep CONFIG_HZ= /boot/config-5.14.0-22.el9.x86_64</span></span>
<span class="line"><span style="color:#A6ACCD;">CONFIG_HZ=1000</span></span>
<span class="line"></span></code></pre></div><div class="language-c"><span class="copy"></span><pre><code><span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* TICK_NSEC is the time between ticks in nsec assuming SHIFTED_HZ */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TICK_NSEC</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">NSEC_PER_SEC</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">HZ</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)/</span><span style="color:#A6ACCD;">HZ</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Account a tick to a process and cpustat</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * @p: the process that the CPU time gets accounted to</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * @user_tick: is the tick from userspace</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * @rq: the pointer to rq</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Tick demultiplexing follows the order</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * - pending hardirq update</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * - pending softirq update</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * - user_time</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * - idle_time</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * - system time</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *   - check for guest_time</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *   - else account as system_time</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Check for hardirq is done both for system and user time as there is</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * no timer going off while we are on hardirq and hence we may never get an</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * opportunity to update it solely in system time.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * p-&gt;stime and friends are only updated on system time and not on irq</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * softirq as those do not count in task exec_runtime any more.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">irqtime_account_process_tick</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> task_struct </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> user_tick</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">					 </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> ticks</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	u64 other</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> cputime </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> TICK_NSEC </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> ticks</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * When returning from idle, many ticks can get accounted at</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * once, including some ticks of steal, irq, and softirq time.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * Subtract those ticks from the amount of time accounted to</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * idle, or potentially user or system time. Due to rounding,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * other time can exceed ticks occasionally.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#F07178;">	other </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">account_other_time</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">ULONG_MAX</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">other </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> cputime</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	cputime </span><span style="color:#89DDFF;">-=</span><span style="color:#F07178;"> other</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">this_cpu_ksoftirqd</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> p</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		 * ksoftirqd time do not get accounted in cpu_softirq_time.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		 * So, we have to handle it separately here.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		 * Also, p-&gt;stime needs to be updated for ksoftirqd.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		 */</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#82AAFF;">account_system_index_time</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> cputime</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> CPUTIME_SOFTIRQ</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">user_tick</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#82AAFF;">account_user_time</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> cputime</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">p </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">this_rq</span><span style="color:#89DDFF;">()-&gt;</span><span style="color:#A6ACCD;">idle</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#82AAFF;">account_idle_time</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">cputime</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">flags</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#F07178;"> PF_VCPU</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">/* System time or guest time */</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#82AAFF;">account_guest_time</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> cputime</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#82AAFF;">account_system_index_time</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> cputime</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> CPUTIME_SYSTEM</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>\u5927\u81F4\u7684\u8C03\u7528\u5173\u7CFB</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">     	irqtime_account_process_tick+1</span></span>
<span class="line"><span style="color:#A6ACCD;">        update_process_times+81</span></span>
<span class="line"><span style="color:#A6ACCD;">        tick_sched_handle+34</span></span>
<span class="line"><span style="color:#A6ACCD;">        tick_sched_timer+97</span></span>
<span class="line"><span style="color:#A6ACCD;">        __hrtimer_run_queues+298</span></span>
<span class="line"><span style="color:#A6ACCD;">        hrtimer_interrupt+272</span></span>
<span class="line"><span style="color:#A6ACCD;">        __sysvec_apic_timer_interrupt+92</span></span>
<span class="line"><span style="color:#A6ACCD;">        sysvec_apic_timer_interrupt+55</span></span>
<span class="line"><span style="color:#A6ACCD;">        asm_sysvec_apic_timer_interrupt+18</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">update_process_times</span></span>
<span class="line"><span style="color:#A6ACCD;">	irqtime_account_process_tick     </span><span style="color:#676E95;font-style:italic;">/* \u66F4\u65B0cpu\u4FE1\u606F */</span></span>
<span class="line"><span style="color:#A6ACCD;">	scheduler_tick                   </span><span style="color:#676E95;font-style:italic;">/* \u66F4\u65B0\u8C03\u5EA6\u76F8\u5173\u7684\u4FE1\u606F, \u6BD4\u5982 vruntime */</span></span>
<span class="line"></span></code></pre></div><p>start_time, real_start_time\u5355\u4F4D\u662Fns, \u6307\u81EA\u7CFB\u7EDF\u542F\u52A8\u4EE5\u6765\u5230\u8FDB\u7A0B\u521B\u5EFA\u65F6\u6D41\u901D\u7684\u65F6\u95F4, \u5728<code>copy_process</code>\u91CC\u8D4B\u503C</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">	p-&gt;start_time = ktime_get_ns();</span></span>
<span class="line"><span style="color:#A6ACCD;">	p-&gt;real_start_time = ktime_get_boot_ns();</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>\u5982\u4E0B\u663E\u793Asystemd\u8FDB\u7A0B\u65F6\u7CFB\u7EDF\u542F\u52A817ms\u540E\u521B\u5EFA, \u622A\u6B62dump\u751F\u6210,\u4EE5\u8FD0\u884C6\u5C0F\u65F6\u591A.</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">crash</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ps -t 1</span></span>
<span class="line"><span style="color:#A6ACCD;">PID: 1      TASK: ffff8fb0c6dc2f80  CPU: 0   COMMAND: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">systemd</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    RUN TIME: 06:34:57</span></span>
<span class="line"><span style="color:#A6ACCD;">  START TIME: 17000000</span></span>
<span class="line"><span style="color:#A6ACCD;">       UTIME: 1072507605</span></span>
<span class="line"><span style="color:#A6ACCD;">       STIME: 1248244355</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">crash</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>\u6211\u4EEC\u5728<code>/proc/[pid]/stat</code>\u91CC\u770B\u5230\u7684utime \u548C stime\u5355\u4F4D\u662Fclock ticks, \u5185\u6838\u91CCHZ\u6BCF\u4E2A\u7248\u672C\u53EF\u80FD\u4E0D\u4E00\u6837, \u4F46\u4E3A\u4E86\u4FDD\u6301\u7528\u6237\u6001\u7684\u4E00\u81F4\u6027,\u66B4\u9732\u7ED9\u7528\u6237\u6001\u7684USER_HZ\u5374\u4E00\u76F4\u90FD\u662F100. \u901A\u8FC7<code>nsec_to_clock_t</code> \u5C06task_struct-&gt;utime,stime\u8F6C\u5316\u4E3A<code>ticks</code>. \u5728centos8 x86_64\u73AF\u5883\u4E3A<code>x/( NSEC_PER_SEC / USER_HZ)</code></p><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">u64 </span><span style="color:#FFCB6B;">nsec_to_clock_t</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">u64 x</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">NSEC_PER_SEC</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">USER_HZ</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">div_u64</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> NSEC_PER_SEC </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> USER_HZ</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#elif</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">USER_HZ</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">%</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">512</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">div_u64</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">x </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> USER_HZ </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">512</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> NSEC_PER_SEC </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">512</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#else</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         * max relative error 5.7e-8 (1.8s per year) for USER_HZ &lt;= 1024,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         * overflow after 64.99 years.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         * exact for HZ=60, 72, 90, 120, 144, 180, 300, 600, 900, ...</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">         */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">div_u64</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">x </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">9</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">9ull</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> NSEC_PER_SEC </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">USER_HZ </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">))</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> USER_HZ</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>/proc/[pid]/stat</code>\u7684\u5177\u4F53\u5B9E\u73B0\u5728<code>fs/proc/array.c</code>\u91CC\u7684<code>do_task_stat</code></p><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">seq_put_decimal_ull</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">nsec_to_clock_t</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">utime</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">seq_put_decimal_ull</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">nsec_to_clock_t</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stime</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span></code></pre></div><p><code>top</code>\u91CC\u663E\u793Acpu\u7684hi\u548Csi\u5728<code>irqtime_account_irq</code>\u8BA1\u7B97, \u8BE5\u51FD\u6570\u5728irq_enter\u548Cirq_exit\u65F6\u8FD0\u884C. ksoftirq\u7684\u5904\u7406\u65F6\u95F4\u4E0D\u4EC5\u7B97\u5728\u81EA\u5DF1\u8FDB\u7A0B\u7684stime\u4E0A, \u8FD8\u4F1A\u7B97\u5230cpu\u7684si\u4E0A\u9762</p><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">inline</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">account_softirq_enter</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> task_struct </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">tsk</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">vtime_account_irq</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">tsk</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> SOFTIRQ_OFFSET</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">irqtime_account_irq</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">tsk</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> SOFTIRQ_OFFSET</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;">      </span><span style="color:#676E95;font-style:italic;">/*\u66F4\u65B0starttime, \u4F46\u7B2C\u4E8C\u4E2A\u53C2\u6570\u4E0D\u8BA9\u8BA1\u7B97\u5DEE\u503C*/</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">inline</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">account_softirq_exit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> task_struct </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">tsk</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">vtime_account_softirq</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">tsk</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">irqtime_account_irq</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">tsk</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;">                   </span><span style="color:#676E95;font-style:italic;">/*\u66F4\u65B0starttime, \u5E76\u5C06\u5DEE\u503C(now-starttime)\u7EDF\u8BA1\u8FDB\u53BB*/</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">inline</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">account_hardirq_enter</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> task_struct </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">tsk</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">vtime_account_irq</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">tsk</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> HARDIRQ_OFFSET</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">irqtime_account_irq</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">tsk</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> HARDIRQ_OFFSET</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;">     </span><span style="color:#676E95;font-style:italic;">/*\u66F4\u65B0starttime, \u4F46\u7B2C\u4E8C\u4E2A\u53C2\u6570\u4E0D\u8BA9\u8BA1\u7B97\u5DEE\u503C*/</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">inline</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">account_hardirq_exit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> task_struct </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">tsk</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">vtime_account_hardirq</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">tsk</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">irqtime_account_irq</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">tsk</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;">                  </span><span style="color:#676E95;font-style:italic;">/*\u66F4\u65B0starttime, \u5E76\u5C06\u5DEE\u503C(now-starttime)\u7EDF\u8BA1\u8FDB\u53BB*/</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>\u901A\u8FC7task\u83B7\u53D6pt_regs\u7684\u51FD\u6570\u5982\u4E0B, \u8FD9\u91CC\u8BB0\u5F55\u4E86\u8FDB\u7A0B\u8FDB\u5165\u5185\u6838\u6001\u65F6, \u4FDD\u5B58\u7684\u4E00\u4E9B\u7528\u6237\u6001\u4FE1\u606F.</p><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#ifdef</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CONFIG_KASAN</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">KASAN_STACK_ORDER</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#else</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">KASAN_STACK_ORDER</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">THREAD_SIZE_ORDER</span><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> KASAN_STACK_ORDER</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">THREAD_SIZE</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">PAGE_SIZE </span><span style="color:#89DDFF;">&lt;&lt;</span><span style="color:#A6ACCD;"> THREAD_SIZE_ORDER</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">task_pt_regs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">task</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#89DDFF;">({</span><span style="color:#F07178;">									</span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">long</span><span style="color:#F07178;"> __ptr </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">unsigned</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">long</span><span style="color:#89DDFF;">)</span><span style="color:#82AAFF;">task_stack_page</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">task</span><span style="color:#89DDFF;">);</span><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">	__ptr </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> THREAD_SIZE </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> TOP_OF_KERNEL_STACK_PADDING</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">((</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> pt_regs </span><span style="color:#89DDFF;">*)</span><span style="color:#F07178;">__ptr</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">					</span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#89DDFF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#ifdef</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CONFIG_X86_32</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;"># ifdef</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CONFIG_VM86</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#  define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TOP_OF_KERNEL_STACK_PADDING</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;"># else</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#  define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TOP_OF_KERNEL_STACK_PADDING</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;"># endif</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#else</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;"># define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TOP_OF_KERNEL_STACK_PADDING</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>pid\u7684\u7C7B\u578B\u4E3Aint,\u4F46pidmax\u9ED8\u8BA4\u503C\u5728kernel/pid.c\u91CC\u7684<code>pid_idr_init</code>\u8BBE\u7F6E, \u65B0\u5206\u914D\u7684pid\u662F\u4E0A\u4E00\u6B21\u5206\u914D\u7684pid\u52A01, \u76F4\u5230pid_max, \u7136\u540E\u5FAA\u73AF\u4F7F\u7528\u5DF2\u95F2\u7F6E\u7684\u6700\u5C0Fpid.</p><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> __init </span><span style="color:#82AAFF;">pid_idr_init</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/* Verify no one has done anything silly: */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">BUILD_BUG_ON</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">PID_MAX_LIMIT </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> PIDNS_ADDING</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/* bump default and minimum pid_max based on number of cpus */</span></span>
<span class="line"><span style="color:#F07178;">	pid_max </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">min</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">pid_max_max</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">max_t</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> pid_max</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">				PIDS_PER_CPU_DEFAULT </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">num_possible_cpus</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"><span style="color:#F07178;">	pid_max_min </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">max_t</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> pid_max_min</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">				PIDS_PER_CPU_MIN </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">num_possible_cpus</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">pr_info</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pid_max: default: %u minimum: %u</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> pid_max</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> pid_max_min</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#82AAFF;">idr_init</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#A6ACCD;">init_pid_ns</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">idr</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">init_pid_ns</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pid_cachep</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">KMEM_CACHE</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">pid</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">			SLAB_HWCACHE_ALIGN </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> SLAB_PANIC </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> SLAB_ACCOUNT</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>\u5982\u679C\u8981\u901A\u8FC7<code>sysctl -w kernel.pid_max=xxx</code>\u8C03\u8282, 64\u4F4D\u4E0B\u6700\u5927\u503C\u4E3A4194304. \u4E00\u822CCONFIG_BASE_SMALL\u4E3AN.</p><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * A maximum of 4 million PIDs should be enough for a while.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * [NOTE: PID/TIDs are limited to 2^29 ~= 500+ million, see futex.h.]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PID_MAX_LIMIT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">CONFIG_BASE_SMALL </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> PAGE_SIZE </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">(sizeof(</span><span style="color:#C792EA;">long</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> PID_MAX_DEFAULT</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span></code></pre></div><p>\u5728<code>copy_process</code>\u91CC\u5148\u5224\u65AD\u662F\u5426\u8D85\u8FC7ulimit\u91CC\u9762\u7684\u9650\u5236, \u4F46root\u7528\u6237\u7684\u8FDB\u7A0B\u4E0D\u53D7\u8FD9\u4E2A\u9650\u5236</p><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">is_ucounts_overlimit</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">task_ucounts</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> UCOUNT_RLIMIT_NPROC</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rlimit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">RLIMIT_NPROC</span><span style="color:#89DDFF;">)))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">real_cred</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">user</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> INIT_USER </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F07178;">		    </span><span style="color:#89DDFF;">!</span><span style="color:#82AAFF;">capable</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">CAP_SYS_RESOURCE</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#82AAFF;">capable</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">CAP_SYS_ADMIN</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#89DDFF;font-style:italic;">goto</span><span style="color:#F07178;"> bad_fork_free</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>\u5982\u679C\u5F53\u524D\u7684\u7EBF\u7A0B\u6570(\u5176\u5B9E\u5C31\u662Ftask_struct\u7684\u6570\u91CF, \u5728linux\u8FDB\u7A0B\u548C\u7EBF\u7A0B\u5176\u5B9E\u662F\u90FD\u662Ftask_struct), \u8D85\u8FC7/proc/sys/kernel/threads-max, \u4E5F\u4F1A\u62A5\u9519</p><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * If multiple threads are within copy_process(), then this check</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * triggers too late. This doesn&#39;t hurt, the check is only there</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * to stop root fork bombs.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	retval </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">EAGAIN</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">data_race</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">nr_threads </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> max_threads</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">goto</span><span style="color:#A6ACCD;"> bad_fork_cleanup_count</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>\u7D27\u63A5\u7740\u5982\u679C\u56E0\u8D85\u8FC7pid_max, \u4E14\u6CA1\u95F2\u7F6E\u7684pid, \u5219\u4F1A\u5BFC\u81F4\u521B\u5EFA\u8FDB\u7A0B\u5931\u8D25.</p><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pid </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">init_struct_pid</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		pid </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">alloc_pid</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">nsproxy</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">pid_ns_for_children</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">set_tid</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">				</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">set_tid_size</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">IS_ERR</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">pid</span><span style="color:#89DDFF;">))</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">			retval </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">PTR_ERR</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">pid</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#89DDFF;font-style:italic;">goto</span><span style="color:#F07178;"> bad_fork_cleanup_thread</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>\u6700\u540E\u8FD8\u4F1A\u68C0\u67E5cgroup\u91CC\u7684\u7684pid_max\u9650\u5236</p><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * Ensure that the cgroup subsystem policies allow the new process to be</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * forked. It should be noted that the new process&#39;s css_set can be changed</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * between here and cgroup_post_fork() if an organisation operation is in</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * progress.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	retval </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cgroup_can_fork</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">retval</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">goto</span><span style="color:#A6ACCD;"> bad_fork_put_pidfd</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>\u65E5\u5FD7\u91CC\u9762\u6709\u5982\u4E0B\u62A5\u9519,\u5C31\u662F\u56E0\u4E3A\u8FD9\u4E2A\u539F\u56E0<br> cgroup: fork rejected by pids controller in /user.slice/user-0.slice/session-7.scope</p><p>\u6211\u4EEC\u518D\u6765\u770B\u7ECF\u5E38\u9047\u5230\u7684\u8D85\u8FC7\u6587\u4EF6\u53E5\u67C4\u6570\u76F8\u5173\u7684\u4E00\u4E9B\u77E5\u8BC6<br> \u901A\u8FC7<code>ulimit -n</code>\u8BBE\u7F6E\u8FDB\u7A0B\u6700\u5927\u7684\u6253\u5F00\u6587\u4EF6\u6570, \u6700\u5927\u503C\u4E3A<code>1048576</code>, \u5B83\u662F\u53D7\u9650\u4E8E<code>sysctl fs.nr_open</code></p><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">unsigned</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> sysctl_nr_open __read_mostly </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">//\u9ED8\u8BA4\u503C</span></span>
<span class="line"><span style="color:#C792EA;">unsigned</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> sysctl_nr_open_min </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> BITS_PER_LONG</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* our min() is unusable in constant expressions ;-/ */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__const_min</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#C792EA;">unsigned</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> sysctl_nr_open_max </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">__const_min</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">INT_MAX</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">~(</span><span style="color:#C792EA;">size_t</span><span style="color:#89DDFF;">)</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">/sizeof(</span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*))</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">BITS_PER_LONG</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//\u6700\u5927\u503C</span></span>
<span class="line"></span></code></pre></div><p>\u6709\u4E24\u4E2A\u8DDF\u6587\u4EF6\u53E5\u67C4\u6570\u7684\u62A5\u9519, <code>ENFILE</code>\u8868\u793A\u8D85\u8FC7\u4E86OS\u6574\u7684\u7CFB\u7EDF\u9650\u5236, <code>EMFILE</code>\u8868\u793A\u8D85\u8FC7\u4E86\u81EA\u8EAB\u7684<code>/proc/[pid]/limits</code>\u91CC\u9762<code>Max open files</code>\u7684\u9650\u5236</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">/usr/include/asm-generic/errno-base.h:#define   ENFILE          23      /* File table overflow */</span></span>
<span class="line"><span style="color:#A6ACCD;">/usr/include/asm-generic/errno-base.h:#define   EMFILE          24      /* Too many open files */</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>OS\u7CFB\u7EDF\u7EA7\u6240\u6709\u6253\u5F00\u7684\u6587\u4EF6\u53E5\u67C4\u6700\u5927\u6570, \u666E\u901A\u7528\u6237\u53D7\u9650, \u4F46root\u7684\u8FDB\u7A0B\u4E0D\u53D7\u9650</p><div class="language-shell"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">root@localhost abc</span><span style="color:#89DDFF;">]</span><span style="color:#676E95;font-style:italic;"># sysctl fs.file-nr</span></span>
<span class="line"><span style="color:#A6ACCD;">fs.file-nr = 1984       0       789985</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">root@localhost abc</span><span style="color:#89DDFF;">]</span><span style="color:#676E95;font-style:italic;"># sysctl fs.file-max</span></span>
<span class="line"><span style="color:#A6ACCD;">fs.file-max = 789985</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">root@localhost abc</span><span style="color:#89DDFF;">]</span><span style="color:#676E95;font-style:italic;">#</span></span>
<span class="line"></span></code></pre></div><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> file </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;">alloc_empty_file</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> flags</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> cred </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">cred</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">long</span><span style="color:#F07178;"> old_max</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#C792EA;">struct</span><span style="color:#F07178;"> file </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * Privileged users can go above max_files</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">get_nr_files</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">files_stat</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">max_files</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#82AAFF;">capable</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">CAP_SYS_ADMIN</span><span style="color:#89DDFF;">))</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		 * percpu_counters are inaccurate.  Do an expensive check before</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		 * we go and fail.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		 */</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">percpu_counter_sum_positive</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#F07178;">nr_files</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">files_stat</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">max_files</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#89DDFF;font-style:italic;">goto</span><span style="color:#F07178;"> over</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	f </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">__alloc_file</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">flags</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> cred</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#82AAFF;">IS_ERR</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">f</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#82AAFF;">percpu_counter_inc</span><span style="color:#89DDFF;">(&amp;</span><span style="color:#F07178;">nr_files</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> f</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">over:</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#676E95;font-style:italic;">/* Ran out of filps - report that */</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">get_nr_files</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> old_max</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#82AAFF;">pr_info</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">VFS: file-max limit %lu reached</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">get_max_files</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#F07178;">		old_max </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">get_nr_files</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ERR_PTR</span><span style="color:#89DDFF;">(-</span><span style="color:#F07178;">ENFILE</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>task_struct-&gt;stack \u6307\u5411\u8FDB\u7A0B\u7684\u5185\u6838\u6808, \u5728 dup_task_struct --&gt; alloc_thread_stack_node \u91CC\u9762\u5206\u914D, \u901A\u5E38\u662F\u901A\u8FC7vmalloc\u5206\u914D, \u800C\u4E0D\u662Fslab\u7CFB\u7EDF</p><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * Allocated stacks are cached and later reused by new threads,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * so memcg accounting is performed manually on assigning/releasing</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * stacks to tasks. Drop __GFP_ACCOUNT.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	stack </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__vmalloc_node_range</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">THREAD_SIZE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> THREAD_ALIGN</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">				     VMALLOC_START</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> VMALLOC_END</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">				     THREADINFO_GFP </span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">~</span><span style="color:#A6ACCD;">__GFP_ACCOUNT</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">				     PAGE_KERNEL</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">				     </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> node</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">__builtin_return_address</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * We can&#39;t call find_vm_area() in interrupt context, and</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * free_thread_stack() can be called in interrupt context,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * so cache the vm_struct.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stack</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">tsk</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">stack_vm_area</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">find_vm_area</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">stack</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">tsk</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">stack</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> stack</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">crash&gt; task | grep stack</span></span>
<span class="line"><span style="color:#A6ACCD;">  stack = 0xffff97c5825e0000,</span></span>
<span class="line"><span style="color:#A6ACCD;">  stack_canary = 2863369865746246656,</span></span>
<span class="line"><span style="color:#A6ACCD;">  curr_ret_stack = -1,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ret_stack = 0x0,</span></span>
<span class="line"><span style="color:#A6ACCD;">  stack_vm_area = 0xffff8c900af5b040,</span></span>
<span class="line"><span style="color:#A6ACCD;">  stack_refcount = {</span></span>
<span class="line"><span style="color:#A6ACCD;">crash&gt; grep 0xffff97c5825e0000 /proc/vmallocinfo</span></span>
<span class="line"><span style="color:#A6ACCD;">0xffff97c5825e0000-0xffff97c5825e5000   20480 dup_task_struct+0x49/0x300 pages=4 vmalloc N0=4</span></span>
<span class="line"><span style="color:#A6ACCD;">crash&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h2 id="\u8FDB\u7A0B\u7BA1\u7406" tabindex="-1">\u8FDB\u7A0B\u7BA1\u7406 <a class="header-anchor" href="#\u8FDB\u7A0B\u7BA1\u7406" aria-hidden="true">#</a></h2><p><code>current</code>\u6C38\u8FDC\u6307\u5411\u5F53\u524Dcpu\u4E0A\u8FD0\u884C\u7684\u8FDB\u7A0B\u7684task_struct, \u5B9E\u73B0\u65B9\u5F0F\u5982\u4E0B</p><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">DECLARE_PER_CPU</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> task_struct </span><span style="color:#89DDFF;">*,</span><span style="color:#A6ACCD;"> current_task</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> __always_inline </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> task_struct </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;">get_current</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">void</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">this_cpu_read_stable</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">current_task</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">current</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">get_current</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span></code></pre></div><p><code>init_task</code>\u4EE3\u8868\u4E86pid\u4E3A0\u7684\u8FDB\u7A0B, \u5373swapper/0, \u901A\u8FC7\u5B83\u548C<code>task_struct.tasks</code>\u53EF\u4EE5\u627E\u5230\u6240\u6709\u8FDB\u7A0B</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">crash&gt; list task_struct.tasks -s task_struct.comm -h init_task | head -19</span></span>
<span class="line"><span style="color:#A6ACCD;">ffffffffb481a940</span></span>
<span class="line"><span style="color:#A6ACCD;">  comm = &quot;swapper/0\\000\\000\\000\\000\\000\\000&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">ffff9dd300218000</span></span>
<span class="line"><span style="color:#A6ACCD;">  comm = &quot;systemd\\000\\060\\000\\000\\000\\000\\000\\000&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">ffff9dd30021e300</span></span>
<span class="line"><span style="color:#A6ACCD;">  comm = &quot;kthreadd\\000\\000\\000\\000\\000\\000\\000&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">ffff9dd30021ca40</span></span>
<span class="line"><span style="color:#A6ACCD;">  comm = &quot;rcu_gp\\000d\\000\\000\\000\\000\\000\\000\\000&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">ffff9dd3002198c0</span></span>
<span class="line"><span style="color:#A6ACCD;">  comm = &quot;rcu_par_gp\\000\\000\\000\\000\\000&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">ffff9dd30023b180</span></span>
<span class="line"><span style="color:#A6ACCD;">  comm = &quot;kworker/0:0H\\000\\000\\000&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">ffff9dd30023ca40</span></span>
<span class="line"><span style="color:#A6ACCD;">  comm = &quot;mm_percpu_wq\\000\\000\\000&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">ffff9dd3002398c0</span></span>
<span class="line"><span style="color:#A6ACCD;">  comm = &quot;rcu_tasks_kthre&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">ffff9dd300266300</span></span>
<span class="line"><span style="color:#A6ACCD;">  comm = &quot;rcu_tasks_rude_&quot;,</span></span>
<span class="line"><span style="color:#A6ACCD;">ffff9dd300264a40</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">crash&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>\u666E\u901A\u8FDB\u7A0B\u7684nice\u503C\u662F\u4F18\u5148\u7EA7. \u7528\u6237\u6001\u663E\u793A\u7684\u8303\u56F4\u4E3A [-20 ~ 19], \u503C\u8D8A\u4F4E,\u4F18\u5148\u7EA7\u8D8A\u9AD8.\u5BF9\u5E94\u7684task_struct\u7684\u5B57\u6BB5\u4E3Astatic_prio, \u53D6\u503C\u4E3A[100\uFF5E139]</p><div class="language-c"><span class="copy"></span><pre><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MAX_NICE</span><span style="color:#A6ACCD;">	</span><span style="color:#F78C6C;">19</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MIN_NICE</span><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">20</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NICE_WIDTH</span><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">MAX_NICE </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> MIN_NICE </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Priority of a process goes from 0..MAX_PRIO-1, valid RT</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * priority is 0..MAX_RT_PRIO-1, and SCHED_NORMAL/SCHED_BATCH</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * tasks are in the range MAX_RT_PRIO..MAX_PRIO-1. Priority</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * values are inverted: lower p-&gt;prio value means higher priority.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * The MAX_USER_RT_PRIO value allows the actual maximum</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * RT priority to be separate from the value exported to</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * user-space.  This allows kernel threads to set their</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * priority to a value higher than any user task. Note:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * MAX_RT_PRIO must not be smaller than MAX_USER_RT_PRIO.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MAX_USER_RT_PRIO</span><span style="color:#A6ACCD;">	</span><span style="color:#F78C6C;">100</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MAX_RT_PRIO</span><span style="color:#A6ACCD;">		MAX_USER_RT_PRIO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MAX_PRIO</span><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">MAX_RT_PRIO </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> NICE_WIDTH</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DEFAULT_PRIO</span><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">MAX_RT_PRIO </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> NICE_WIDTH </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Convert user-nice values [ -20 ... 0 ... 19 ]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * to static priority [ MAX_RT_PRIO..MAX_PRIO-1 ],</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * and back.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NICE_TO_PRIO</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">nice</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">nice</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> DEFAULT_PRIO</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PRIO_TO_NICE</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">prio</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">prio</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> DEFAULT_PRIO</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * &#39;User priority&#39; is the nice value converted to something we</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * can work with better when scaling various scheduler parameters,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * it&#39;s a [ 0 ... 39 ] range.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">USER_PRIO</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">)-</span><span style="color:#A6ACCD;">MAX_RT_PRIO</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TASK_USER_PRIO</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">USER_PRIO</span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#A6ACCD;">static_prio</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MAX_USER_PRIO</span><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">USER_PRIO</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">MAX_PRIO</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Convert nice value [19,-20] to rlimit style value [1,40].</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">inline</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">nice_to_rlimit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> nice</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">MAX_NICE </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> nice </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * task_nice - return the nice value of a given task.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@p</span><span style="color:#676E95;font-style:italic;">: the task in question.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Return: The nice value [ -20 ... 0 ... 19 ].</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">inline</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">task_nice</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> task_struct </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">PRIO_TO_NICE</span><span style="color:#89DDFF;">((</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#A6ACCD;">static_prio</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">\`\`\`\u666E\u901A\u8FDB\u7A0B\u7684nice\u503C\u662F\u4F18\u5148\u7EA7. \u7528\u6237\u6001\u663E\u793A\u7684\u8303\u56F4\u4E3A </span><span style="color:#89DDFF;">[-</span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">~</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">19</span><span style="color:#89DDFF;">],</span><span style="color:#A6ACCD;"> \u503C\u8D8A\u4F4E</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">\u4F18\u5148\u7EA7\u8D8A\u9AD8.\u5BF9\u5E94\u7684task_struct\u7684\u5B57\u6BB5\u4E3Astatic_prio</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> \u53D6\u503C\u4E3A</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">100</span><span style="color:#A6ACCD;">\uFF5E</span><span style="color:#F78C6C;">139</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">\`\`\` c</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MAX_NICE</span><span style="color:#A6ACCD;">	</span><span style="color:#F78C6C;">19</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MIN_NICE</span><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">20</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NICE_WIDTH</span><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">MAX_NICE </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> MIN_NICE </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Priority of a process goes from 0..MAX_PRIO-1, valid RT</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * priority is 0..MAX_RT_PRIO-1, and SCHED_NORMAL/SCHED_BATCH</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * tasks are in the range MAX_RT_PRIO..MAX_PRIO-1. Priority</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * values are inverted: lower p-&gt;prio value means higher priority.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * The MAX_USER_RT_PRIO value allows the actual maximum</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * RT priority to be separate from the value exported to</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * user-space.  This allows kernel threads to set their</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * priority to a value higher than any user task. Note:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * MAX_RT_PRIO must not be smaller than MAX_USER_RT_PRIO.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MAX_USER_RT_PRIO</span><span style="color:#A6ACCD;">	</span><span style="color:#F78C6C;">100</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MAX_RT_PRIO</span><span style="color:#A6ACCD;">		MAX_USER_RT_PRIO</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MAX_PRIO</span><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">MAX_RT_PRIO </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> NICE_WIDTH</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DEFAULT_PRIO</span><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">MAX_RT_PRIO </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> NICE_WIDTH </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Convert user-nice values [ -20 ... 0 ... 19 ]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * to static priority [ MAX_RT_PRIO..MAX_PRIO-1 ],</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * and back.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">NICE_TO_PRIO</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">nice</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">nice</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> DEFAULT_PRIO</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PRIO_TO_NICE</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">prio</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">prio</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> DEFAULT_PRIO</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * &#39;User priority&#39; is the nice value converted to something we</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * can work with better when scaling various scheduler parameters,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * it&#39;s a [ 0 ... 39 ] range.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">USER_PRIO</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">)-</span><span style="color:#A6ACCD;">MAX_RT_PRIO</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TASK_USER_PRIO</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">USER_PRIO</span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#A6ACCD;">static_prio</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MAX_USER_PRIO</span><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">USER_PRIO</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">MAX_PRIO</span><span style="color:#89DDFF;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Convert nice value [19,-20] to rlimit style value [1,40].</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">inline</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">nice_to_rlimit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">long</span><span style="color:#A6ACCD;"> nice</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">MAX_NICE </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> nice </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * task_nice - return the nice value of a given task.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#C792EA;font-style:italic;">@p</span><span style="color:#676E95;font-style:italic;">: the task in question.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Return: The nice value [ -20 ... 0 ... 19 ].</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">inline</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">task_nice</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">struct</span><span style="color:#A6ACCD;"> task_struct </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">PRIO_TO_NICE</span><span style="color:#89DDFF;">((</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">)-&gt;</span><span style="color:#A6ACCD;">static_prio</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="\u8C03\u5EA6\u7EC6\u8282" tabindex="-1">\u8C03\u5EA6\u7EC6\u8282 <a class="header-anchor" href="#\u8C03\u5EA6\u7EC6\u8282" aria-hidden="true">#</a></h2><p>linux\u652F\u6301\u7684\u8C03\u5EA6\u7B56\u7565\u5982\u4E0B</p><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * The order of the sched class addresses are important, as they are</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * used to determine the order of the priority of each sched class in</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * relation to each other.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SCHED_DATA</span><span style="color:#A6ACCD;">				\\</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">STRUCT_ALIGN</span><span style="color:#89DDFF;">();</span><span style="color:#A6ACCD;">				\\</span></span>
<span class="line"><span style="color:#A6ACCD;">	__begin_sched_classes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> .</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">		\\</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">*(</span><span style="color:#A6ACCD;">__idle_sched_class</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">			\\</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">*(</span><span style="color:#A6ACCD;">__fair_sched_class</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">			\\</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">*(</span><span style="color:#A6ACCD;">__rt_sched_class</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">			\\</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">*(</span><span style="color:#A6ACCD;">__dl_sched_class</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">			\\</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">*(</span><span style="color:#A6ACCD;">__stop_sched_class</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">			\\</span></span>
<span class="line"><span style="color:#A6ACCD;">	__end_sched_classes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> .</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>struct rq.clock \u7684\u5355\u4F4D\u662Fns, cfs\u91CC<code>update_curr</code>\u7528\u4E8E\u66F4\u65B0\u8FDB\u7A0B\u8FD0\u884C\u65F6\u7684\u7EDF\u8BA1\u91CF</p><p>\u5206\u4E24\u79CD\u60C5\u51B5:</p><ol><li>\u4E3B\u52A8\u5F0F\u8C03\u5EA6 \u5F53\u5199IO,\u6216\u8005\u7B49\u5F85\u5176\u4ED6\u8D44\u6E90\u65F6,\u4E3B\u52A8\u8BA9\u51FAcpu\u7684, \u4EE3\u7801\u4E2D\u76F4\u63A5\u8C03\u7528<code>__schedule</code></li><li>\u88AB\u52A8\u5F0F\u8C03\u5EA6 <ul><li>\u81EA\u8EAB\u65F6\u95F4\u6267\u884C\u65F6\u95F4\u8FC7\u957F,\u5360\u7528cpu\u8FC7\u591A, \u8C03\u5EA6\u7BA1\u7406\u4F1A\u901A\u8FC7\u65F6\u949F\u4E2D\u65AD\u8C03\u7528<code>scheduler_tick</code>\u66F4\u65B0\u8FDB\u7A0B\u76F8\u5173\u7684\u7EDF\u8BA1\u4FE1\u606F, \u5224\u65AD\u662F\u5426\u9700\u8981\u91CD\u65B0\u8C03\u5EA6. \u5982\u679C\u65F6,\u5219\u5C06\u8BE5\u8FDB\u7A0B\u6807\u8BB0\u4E3A<code>_TIF_NEED_RESCHED</code><ul><li>curr-&gt;sched_class-&gt;task_tick(rq, curr, 0) \u91CC\u8C03\u7528 entity_tick()</li><li>entity_tick() \u8C03\u7528 update_curr \u66F4\u65B0\u5F53\u524D\u8FDB\u7A0B vruntime, \u8C03\u7528 check_preempt_tick \u68C0\u6D4B\u662F\u5426\u9700\u8981\u88AB\u8C03\u5EA6</li><li>check_preempt_tick \u4E2D\u5224\u65AD\u5DF2\u8FD0\u884C\u7684\u662F\u5426\u662F\u5426\u5927\u4E8Eideal_runtime(\u4F30\u7B97\u7684\u8FDB\u7A0B\u5E94\u8BE5\u8FD0\u884C\u7684\u65F6\u95F4), \u5F53\u524D\u8FDB\u7A0B\u7684vruntime\u548C\u961F\u5217\u91CC\u6700\u5C0F\u7684vruntime, \u5982\u679C\u8D85\u8FC7\u9608\u503C,\u8BF4\u660E\u6709\u5176\u4ED6\u8FDB\u7A0B\u66F4\u9700\u8981\u8FD0\u884C.</li></ul></li><li>\u88AB\u521A\u521A\u5524\u9192\u7684\u8FDB\u7A0B,\u5982\u679C\u4F18\u5148\u7EA7\u66F4\u9AD8,\u4E5F\u4F1A\u6807\u8BB0\u4E3A<code>_TIF_NEED_RESCHED</code><ul><li>try_to_wake_up -&gt; ttwu_queue -&gt; ttwu_do_activate -&gt; activate_task \u52A0\u5165\u5230\u53EF\u8FD0\u884C\u961F\u5217</li><li>try_to_wake_up -&gt; ttwu_queue -&gt; ttwu_do_activate -&gt; ttwu_do_wakeup \u68C0\u67E5\u662F\u5426\u9700\u8981\u88AB\u8C03\u5EA6</li></ul></li><li>\u62A2\u5360\u65F6\u673A, \u4EC0\u4E48\u65F6\u5019\u8BA9\u5DF2\u6807\u8BB0\u4E3A<code>_TIF_NEED_RESCHED</code>\u7684\u8FD0\u884C<code>__schedule</code>\u8C03\u51FA\u53BB <ul><li>\u7528\u6237\u6001\u8FDB\u7A0B <ul><li>\u7CFB\u7EDF\u8C03\u7528\u8C03\u7528\u8FD4\u56DE\u65F6,\u5728<code>exit_to_user_mode_loop</code>\u91CC</li><li>\u4E2D\u65AD\u8FD4\u56DE\u65F6, irqentry_exit --&gt; irqentry_exit_to_user_mode --&gt; exit_to_user_mode_prepare --&gt; exit_to_user_mode_loop</li></ul></li><li>\u5185\u6838\u6001\u8FDB\u7A0B \u5982\u679C\u6CA1\u6709\u914D\u7F6E<code>CONFIG_PREEMPT=y</code>, \u90A3\u4E48\u5185\u6838\u6001\u8FD0\u884C\u65F6\u65E0\u6CD5\u62A2\u5360, \u5047\u8BBE\u8BE5\u529F\u80FD\u6253\u5F00\u5219: <ul><li>\u4E2D\u65AD\u8FD4\u56DE\u65F6,irqentry_exit --&gt; irqentry_exit_cond_resched --&gt; preempt_schedule_irq</li><li>preempt_disable\u5728\u67D0\u4E9B\u8DEF\u5F84\u5173\u95ED\u62A2\u5360\u540E, \u7528preempt_enable\u6253\u5F00\u65F6\u53EF\u80FD\u6267\u884C<code>__schedule</code></li></ul></li><li>\u6B63\u662F\u56E0\u4E3A\u4E3B\u6D41\u7684linux\u53D1\u884C\u7248\u4E0D\u652F\u6301\u5185\u6838\u62A2\u5360,\u6240\u4EE5\u7CFB\u7EDF\u8C03\u7528\u8FD0\u884C\u65F6\u95F4\u8FC7\u957F\u4F1A\u5BFC\u81F4\u5E94\u7528\u7A0B\u5E8F\u5904\u7406\u5EF6\u8FDF,\u56E0\u4E3A\u4E00\u76F4\u8981\u7B49\u5230\u4E34\u8FD1\u8FD4\u56DE\u7528\u6237\u6001\u65F6\u624D\u4E3B\u52A8\u8C03\u5EA6\u51FA\u53BB</li></ul></li></ul></li></ol><p>\u65E0\u8BBA\u4E3B\u52A8\u8FD8\u662F\u88AB\u52A8, \u90FD\u4F1A\u901A\u8FC7<code>schedule</code>\u628A\u8FDB\u7A0B\u5207\u51FA\u53BB, schedule --&gt; __schedule --&gt; context_switch --&gt; switch_to --&gt; __switch_to_asm --&gt;</p><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">#define</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">switch_to</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">prev</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> next</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> last</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">					\\</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">do</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">									</span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">((</span><span style="color:#F07178;">last</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">__switch_to_asm</span><span style="color:#89DDFF;">((</span><span style="color:#F07178;">prev</span><span style="color:#89DDFF;">),</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">next</span><span style="color:#89DDFF;">)));</span><span style="color:#F07178;">			</span><span style="color:#A6ACCD;">\\</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><div class="language-c"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">SYM_FUNC_START</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">__switch_to_asm</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * Save callee-saved registers</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * This must match the order in inactive_task_frame</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	pushq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">rbp</span></span>
<span class="line"><span style="color:#A6ACCD;">	pushq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">rbx</span></span>
<span class="line"><span style="color:#A6ACCD;">	pushq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">r12</span></span>
<span class="line"><span style="color:#A6ACCD;">	pushq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">r13</span></span>
<span class="line"><span style="color:#A6ACCD;">	pushq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">r14</span></span>
<span class="line"><span style="color:#A6ACCD;">	pushq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">r15</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/* switch stack */</span></span>
<span class="line"><span style="color:#A6ACCD;">	movq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">rsp</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">TASK_threadsp</span><span style="color:#89DDFF;">(%</span><span style="color:#A6ACCD;">rdi</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">	movq	</span><span style="color:#82AAFF;">TASK_threadsp</span><span style="color:#89DDFF;">(%</span><span style="color:#A6ACCD;">rsi</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">rsp    </span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/* \u6267\u884C\u5B8C\u8FD9\u4E2A\u547D\u4EE4\u4E4B\u540E, \u540E\u7EED\u64CD\u4F5C\u90FD\u662F\u5728next\u8FD9\u4E2A\u8FDB\u7A0B\u7684\u5185\u6838\u6808\u8FDB\u884C\u4E86 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#ifdef</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CONFIG_STACKPROTECTOR</span></span>
<span class="line"><span style="color:#A6ACCD;">	movq	</span><span style="color:#82AAFF;">TASK_stack_canary</span><span style="color:#89DDFF;">(%</span><span style="color:#A6ACCD;">rsi</span><span style="color:#89DDFF;">),</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">rbx</span></span>
<span class="line"><span style="color:#A6ACCD;">	movq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">rbx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">PER_CPU_VAR</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">fixed_percpu_data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> stack_canary_offset</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#ifdef</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CONFIG_RETPOLINE</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * When switching from a shallower to a deeper call stack</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * the RSB may either underflow or use entries populated</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * with userspace addresses. On CPUs where those concerns</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * exist, overwrite the RSB with entries which capture</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 * speculative execution to prevent attack.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	 */</span></span>
<span class="line"><span style="color:#A6ACCD;">	FILL_RETURN_BUFFER </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">r12</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> RSB_CLEAR_LOOPS</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> X86_FEATURE_RSB_CTXSW</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">/* restore callee-saved registers */</span></span>
<span class="line"><span style="color:#A6ACCD;">	popq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">r15</span></span>
<span class="line"><span style="color:#A6ACCD;">	popq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">r14</span></span>
<span class="line"><span style="color:#A6ACCD;">	popq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">r13</span></span>
<span class="line"><span style="color:#A6ACCD;">	popq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">r12</span></span>
<span class="line"><span style="color:#A6ACCD;">	popq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">rbx</span></span>
<span class="line"><span style="color:#A6ACCD;">	popq	</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">rbp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	jmp	__switch_to</span></span>
<span class="line"><span style="color:#82AAFF;">SYM_FUNC_END</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">__switch_to_asm</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div>`,81),t=[o];function e(c,r,y,D,F,i){return a(),n("div",null,t)}var _=s(p,[["render",e]]);export{C as __pageData,_ as default};
